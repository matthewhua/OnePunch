syntax = "proto3";

package client2server;

import "battleMsg.proto";

option java_package = "pb4client";
option java_outer_classname = "War2GamePkt";
option java_multiple_files = true;

// option go_package = "c2g";

// msgType = 10000
// 后端 -> 网关
// （控制消息）断开网关和客户端的连接
message CtrlOffline {
}

// msgType = 10001
// 网关 -> 后端
// （控制消息）通知后端客户端连接已断开
message CtrlNoticeOffline {
}

// msgType = 2998
// 客户端 -> 服务器
// 1号之前的查询角色数据 供后续的选角色登录
message QueryLoginPlayers {
    string openId = 1;
    int32 os = 2;
}

message QueryLoginPlayersRt {
    int64 nowPlayWorldId = 1; // 默认进入的世界ID
    repeated QueryLoginPlayerVo loginPlayerVos = 2;
}

message QueryLoginPlayerVo {
    ServerInfo serverInfo = 1; // 服务器基础数据
    string name = 2; // 玩家名
    int32 castleLv = 3; // 主堡
    int32 photoId = 4; // 头像-可能不做
}

// msgType = 1
// 客户端 -> 服务器
// 发送登录消息，包括账号和密码
message Login {
    string openId = 1;
    string token = 2;           // 登录令牌
    string scope = 3;           // 用户授权tags
    DeviceInfo deviceInfo = 7;  // 设备信息
    string sdkOpenId = 15;      // SDK 平台账号
    int32 sdkType = 16;         // SDK类型 0 设备登录 1 内网登录 4 googleplay 5 facebook
    int32 clientType = 17;      // 腾讯登录的时候要携带的字段 0-未知 1-安卓 2-ios 3-PC
    int32 channelid = 18;       // 渠道id (腾讯登录的时候要携带的字段)
    int64 playerId = 22;        // 角色ID，留空则为创建新号
    int32 areaId = 23;          // 游戏大区ID(区服导航的，与idip的区分)
    int32 partition = 24;       // 小区ID
    string clientIp = 25;
    string countryCode = 26;
    int32 hoge = 100;           // 预留作为robot标记
    int32 developerLogin = 101; // 标记为开发人员登录
}

// 返回RT=58 快速登录异常,   -->这个是发过来的世界ID不对  重置成0 重新发,断连接
// 返回RT=59 快速登录令牌无效,   -->这个是快速登录的时候令牌本地没有  worldId重置成0 重新发,断连接
// 返回RT=20007 远端验证令牌不通过,重新获取令牌在发,断连接
// 返回RT=20009 令牌过期了,重新获取令牌在发,不断连接
message LoginRt {
    string openId = 1;
    string token = 2;       // 登录令牌
    string scope = 3;       // 用户授权tags
    int32 clientType = 4;   // 腾讯登录的时候要携带的字段 0-未知 1-安卓 2-ios 3-PC
    int64 playerId = 5;     // 角色ID，留空则为创建新号
    int32 banOverTime = 9;  // 封禁结束时间
    int32 rollSign = 12;    // 滚服标记 0-否 1-是 由登录服创建角色的时候生成,登录服发现这是这个openId下的非第一个角色就认为是滚服
    int64 accountId = 15;   // 账户不变ID
    string playerName = 16; // 登录服生成出来的玩家名字
    string banReason = 17;  // 封禁理由
    BanData banData = 18;   // 封禁数据
    int32 areaId = 21;      // 游戏大区ID(区服导航的，与idip的区分)
    int32 partition = 22;   // 小区ID
    int32 idipAreaId = 23;  // idip用大区id
    string pictureUrl = 31; // 头像URL地址
    int32 hoge = 100;       // 预留作为robot标记
}

message BanData {
    repeated BanSetting forbidChatSetting = 1;
    repeated BanSetting silenceSetting = 2;
    repeated BanSetting forbidSocietySetting = 3;
    repeated BanSetting forbidTextSetting = 4;
    repeated BanSetting forbidRankSetting = 5;
    BanSetting forbidPhotoSetting = 6;
}

message BanSetting {
    int32 banType = 1;
    int64 banEndTime = 2;
    string banReason = 3;
}

message LineUp {
    string appid = 1; // GCloud应用ID	100514184
    string zoneid = 2; // 游戏区服ID	1001
    string openid = 3; // 用户openid	1234567890
    string jointime = 4; // 加入排队的时间 (v2)	1570682289
    string passtime = 5; // 放行通过的时间 (v2)	1570682320
    string token = 6; // 放行token (v2)	c7e96b6fa1a224582464ca31861dad7a
}

message DeviceInfo {
    string systemSoftware = 3; //"Windows 10  (10.0.0) 64bit"
    string systemHardware = 4;
    int32 screenWidth = 5; //1280
    int32 screenHeight = 6; //720
    string dpi = 7;
    string cpuHardward = 8; //"Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz"
    int32 memory = 9; //16335
    string glRender = 10; // "NVIDIA Geforce GTX 750 Ti"
    string glVersioin = 11; //"Direct3D 11.0 [level 11.0]"
    string deviceId = 12; //"6648a374240566b0e705e8088ae6a47f97bfa331"
    string deviceModel = 13; //"XPS 8700（Dell Inc.)"
}

message AndroidDeviceInfo {
    string serialA = 1;
    string boardA = 2;
    string brandA = 3;
    string fingerprintA = 4;
    string hardwareA = 5;
    string manufacturerA = 6;
    string networkOperatorA = 7;
    string networkTypeA = 8;
    string imeiA = 9;
    string meidA = 10;
    string subscriberA = 11;
    string line1NumA = 12;
    string deviceA = 13;
    string productA = 14;
    string modelA = 15;
    string bootLoaderA = 16;
    int64 checkEmulatorFilesListA = 17;
    int64 checkEmulatorPropertiesListA = 18;
    int64 checkEmulatorPackageListA = 19;
    bool isEmulator = 20;
    int32 emulatorScore = 21;
    bool isRoot = 22;
    string signatureMd5 = 23;
    string sensorInfo = 24;
    int32 sdCardTotalStorage = 25;
    int32 sdCardAvailStorage = 26;
    int32 innerTotalStorage = 27;
    int32 innerAvailStorage = 28;
    int32 gameInstalledDiskAvailStorage = 29;
    int32 gameInstalledDiskTotalStorage = 30;
    int32 externalSDCardAvailStorage = 31;
    int32 externalSDCardTotalStorage = 32;
}

message ASAInfo {
    int32 attribution = 1;
    string orgName = 2;
    string orgID = 3;
    string campaignID = 4;
    string campaignName = 5;
    string clickDate = 6;
    string purchaseDate = 7;
    string conversionDate = 8;
    string conversionType = 9;
    string adgroupID = 10;
    string adgroupName = 11;
    string countryRegion = 12;
    string keyword = 13;
    string keywordID = 14;
    string keywordMatchtype = 15;
    string creativesetID = 16;
    string creativesetName = 17;
    string attributionerror = 18;
}

// msgType = 2
// 客户端 -> 服务器
// 创建城池
message MakeCity {
    string openId = 1;
    string token = 2; //登录令牌
    string scope = 3; // 用户授权tags
    int32 lanType = 4; //语言类别
    int32 timezone = 5; // 时区(要转换成整数，如孟买5.5则取整=5)
    DeviceInfo deviceInfo = 7; // 设备信息
    int32 platformSdkId = 9; //platform sdk ID,1:garena msdk,2:vk sdk
    string firebaseToken = 10; // firebase推送设备令牌
    AndroidDeviceInfo androidDeviceInfo = 15; // 安卓设备信息
    string sdkOpenId = 16; // SDK 平台账号
    int32 clientType = 17; // 腾讯登录的时候要携带的字段 0-未知 1-安卓 2-ios 3-PC
    int32 channelid = 18; // 渠道id (腾讯登录的时候要携带的字段)
    string clientVersion = 19; // 客户端版本
    string resVersion = 20; // 客户端资源版本
    LineUp LineUp = 21; // 排队数据
    int64 playerId = 22; // 角色ID，留空则为创建新号
    int32 areaId = 23; // 游戏大区ID
    int32 partition = 24; // 小区ID
    string network = 25; // 网络
    string androidId = 26; // ANDROID_ID
    string iosIdfv = 27; // ios idfv
    string loginChannelId = 31; // 登录渠道

    string regChannelId = 32; // 注册渠道

    string androidOAID = 33; // OAID是由中国信通院联合部分厂商共同推出的设备识别字段
    string iosCAID = 34; // CAID是一种可变随机唯一广告标识符
    string deviceId = 35; // abdroid IMEI 国际移动设备识别码/ios IDFA 可变随机唯一广告标识符
    string userAgent = 36; // 用户浏览器的“用户代理”(针对iOS端建议上报)
    ASAInfo asaInfo = 37; // App Store Search Ads
    string platformChannel = 38;
    string adSetChannel = 39; // 广告渠道
    int32 clientLang = 40; // 客户端设备语言

    int32 hoge = 100;   // 预留作为robot标记

    string clientIp = 208;
    string countryCode = 209;
    // 下面的是channel转发的时候补全的
    string innerClientIp = 210; //客户端Ip 有channel赋值
    int32 inWhiteList = 212; //是否在白名单中 0-否 1-是

    int32 ranValue = 300; // 随机值
}

message MakeCityRt {
    int64 playerId = 2;
    int32 isLogin = 4; // 是否是登录服过来的 是的话0 不是的话1 废弃
    string openId = 5;
    string token = 6; //登录令牌
    int32 lanType = 7; //语言类别
    int32 expiryTime = 8; //该令牌有效期  废弃
    int32 banOverTime = 9; //封禁结束时间
    string firebaseToken = 10; // firebase推送设备令牌
    string tokenInfo = 11; //令牌验证信息 废弃
    int32 rollSign = 12; // 滚服标记 0-否 1-是 由登录服创建角色的时候生成,登录服发现这是这个openId下的非第一个角色就认为是滚服
    int32 canUseGm = 13; //能否使用gm命令 0-否 1-是
    int32 inWhiteList = 14; //是否在白名单中 0-否 1-是
    int64 accountId = 15; // 账户不变ID
    string playerName = 16; // 登录服生成出来的玩家名字
    string banReason = 17; // 封禁理由
    BanData banData = 18; // 封禁数据 废弃
    string aesKey = 20; //aes密钥 默认:EDb35olv1SRQG5NTO3GI
    int32 areaId = 21; // 游戏大区ID
    int32 partition = 22; // 小区ID
    string pictureUrl = 31; // 头像URL地址

    string cfgVersion = 100; // 服务器配置版本

    int32 ranValue = 300; // 随机值
}

// msgType = 3
// 客户端 -> 服务器
// 获取随机名
message GetRandomName {
}

message GetRandomNameRt {
    string name = 2; // 随机名
}

// msgType = 4
// 客户端 -> 服务器
// 进入游戏
message EnterGame {
    int64 playerId = 1; //玩家ID
    string configVer = 2; // 游戏版本号
    int32 worldMsgNo = 3; //世界推送消息编号
    string clientIp = 6;
    int32 clientType = 7;
    int32 platform = 8;
    string countryCode = 9;
    int32 privilege = 11; // 特权渠道
}

message EnterGameRt {
    int32 refreshData = 2; //是否刷新数据 0、否 1、是
    int64 time = 4;
    CityInfo cityInfo = 7; //城池信息
    repeated HeroStateInFo heroStateInfo = 8; //武将状态信息
    int64 playerId = 12; //玩家Id
    string pictureUrl = 13; // 头像URL地址
    DecreeChange decreeChange = 14; //当前政令数与时间与上限
    ServerInfo serverInfo = 31; //服务器相关信息
    int32 isFirstJoinAlliance = 68; // 玩家是否加入过联盟 0-否 1-是
    repeated QueueInfo queue = 70; // 队列
    PlayerPowerChangeVo playerPowerChangeVo = 105; //总实力
    int32 strength = 122; //体力值
    int32 strengthTime = 123; //玩家是当前体力值的时间
    int32 nowInstanceId = 128; //当前推图关卡Id
    repeated int32 newItem = 137; // 图书馆新图鉴  新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
    repeated ActivityEnterTimeInfo enterTimeInfo = 142; // 活动开放时间
    int32 worldWonderStatus = 145; // 世界服奇观状态
    int32 times = 146; //竞技场剩余战斗次数
    string jjcTimeReward = 147; // 竞技场累计奖励 (是奖励格式转成的字符串)
    int32 firstBelongState = 162; // 首次归属的州
    int32 lastBelongState = 163; // 上次所属洲
    repeated RedPointInfo worldRedPointInfos = 164; //红点信息
    int64 allianceId = 165; // 联盟ID
    int32 belongState = 166; // 所属洲
    int32 lastJjcCountTime = 167; //上次竞技场令牌回复时间
    int32 jjcMaxScore = 168; // 竞技场历史最高
    int32 transportReqNum = 169; //运输请求数量
    repeated BuffVo buffs = 171; // 玩家的buff集合
    repeated BuildingView worldBuildingViews = 172; //世界服建筑视图状态
    repeated ActionQueue worldActionQueues = 173; //行为队列
    int32 eliminateFightType = 174; // 三消战斗类型
    repeated QuestionnaireCfg questionnaireList = 176; // 问卷调查配置
    int32 openServerTime = 177; // 开服时间
    repeated WalkGroup myWalks = 180; //自己的所有行军线路
    repeated MassGroup massWalks = 181; //集结信息
    string playerId36Str = 182; // 玩家ID转成的36进制串
    repeated Task worldTasks = 183; //章节任务
    int32 birthTime = 184; // 玩家创号时间
    AllianceInfo allianceInfo = 185; //联盟信息
    repeated RankActivityInfo rankActivitys = 188; //排行榜活动
    int32 platform = 189;
    int64 defDragonId = 190;
    repeated OpenActivityVo activitys = 191; //玩家参与的活动信息
    repeated ServerActivity serverActivitys = 192; //服务器开启的活动信息
    int32 autoAllianceHelp = 193; // 联盟帮助自动请求时间
    int32 myJjcScore = 194; // 我的竞技场积分
    repeated IntToIntKV npcCastRewardTime = 195; //npc城池领奖时间
    int32 leftFreeMoveCount = 196; //剩余免费次数
    int32 worldMonsterLv = 197; // 当前可攻击精英魔物等级

    repeated int32 clearInnerCityAreaFog = 200; //清理过的内城区域迷雾
    PlayerEnemySoliderInfo playerEnemySoliderInfo = 203; //贼兵信息
    HeroTrainInfo heroTrainInfo = 204; //英雄训练所信息
    repeated EnemyInfo enemyInfos = 205; //敌方信息
    repeated int64 helpedWalkId = 206; //帮助过的行军线Id

    repeated WonderWarInfo wonderWarInfo = 210; //奇观战信息
    repeated ResWarInfo resWarInfo = 211; //资源矿战斗信息
    repeated WorldCheckPointInfo worldCheckPointInfo = 212; //关卡信息
    repeated int32 designationProtoId = 213; // 玩家称号
    repeated IntToLongKV tags = 214; // 玩家标签: 1敌对,2友好
    repeated IntToLongKV allianceTags = 215; // 联盟标签: 1敌对

    repeated AllianceBuildFireVo allianceBuildFireVos = 217;
    repeated HeroTrainInviteInfo inviteInfo = 221; //邀请训练信息
    repeated AllianceFlagSoliderChangeVo allianceFlagSoliderChangeVos = 222;
    int64 nextAskAllianceSoloTime = 225; // 下次可宣战时间
    repeated WorldActivityInfo2 worldActivityInfo2 = 226; //当前的天下大势

    int32 needDecideTrustRequestNum = 230; //需要决定的数量
    int32 loseEffectTrustRequestNum = 231; //失效的数量
    int32 sendTrustRequestNum = 232; //发起的请求数量
    int32 newPlayer = 233; // 是否是新号进入
    int32 topState = 234; // 推荐州
    int32 bornState = 235; // 出生州,换州会导致此字段发生变更
    repeated IntToLongKV statePlayerNum = 236; // 各州人数
    repeated IntToLongKV slgSoldier = 237; // 兵营中当前兵量, key为soldierID
    BarracksWoundedSoldierInfo barracksWoundedSoldierInfo = 238; // 伤兵信息
    int32 bornStateFirstChoose = 239; // 玩家出生时选的州,换州不会导致此字段发生变更
    repeated LongToIntKV warnDatas = 240; //预警数据 行军组Id-runType
    int64 maxFightValue = 241; // 历史最高战斗力
    int32 bornHeroFirstChoose = 242; // 玩家出生时选的武将,换主武将不会导致此字段发生变更
    AllianceTopInfo allianceTopInfo = 243; // 联盟推荐展示
    repeated CallRelicData callRelicPos = 244; // 召唤巢穴位置
    int32 maxKillBossLv = 245; //击杀魔物的最大等级
    repeated RadarItemOnMap radarItemOnMap = 246; // 地图上存在的雷达怪物
    int32 chooseLvTime = 247; // 平判之战活动开始时间戳
    repeated AllianceBuildVo allianceBuildVos = 248; // 联盟建筑
    ExploreValueInfo exploreValueInfo = 250; //探索值信息
    repeated IntToIntKV openTime = 251; // 新奇观的争夺日开启时间 如果今天不是争夺日 这个里是空的 key:奇观ID value:开启的"时"
    repeated EnterAnnounce enterAnnounce = 252; // 进入公告
    repeated int32 rewardedOpenFog = 260; //已领过奖励的开雾比例
    int32 openedFogNum = 261; //已开数量
    int32 totalFogNum = 262; //总量
    int32 worldWonderCount = 263; // 当前是第几届奇观战
    EnergySpecialInfo energySpecialInfo = 264; // 特殊体力信息
    repeated IntToIntKV mapNpcConditionIndex = 266; //npc可领奖条件索引
    int32 capitalBattleOfficer = 267; // 日月王城官职
    int32 capitalBattleState = 268; // 日月王城当前状态
    int32 capitalBattleStateChangeTime = 269; // 日月王城状态变更时间
    int32 capitalBattleSetKingOverTime = 270; // 国王设置结束时间
    PollutedArmyChange pollutedArmyChange = 271; //污染之地队伍信息
    VisitQuestInfo visitQuestInfo = 272; // 拜访神庙
    NoticeSetting noticeSetting = 273; // 玩家设置
    int32 privilege = 274; // 特权渠道
    ChangePickUpCount changePickUpCount = 275; // 当日拾取资源点次数
    int32 fogDataVersion = 276; // 迷雾数据版本
    int32 pollutedLv = 279; // 打过的最高等级的污染之地
    int32 isFirstCreateAlliance = 280; // 是否首次创建联盟
    CheckPointInfo checkPointInfo = 281; // cp爬塔信息
    repeated FunctionBanData functionBanData = 282; // 功能封禁
    GetResInfo getResInfo = 283; //当前已获取资源信息
    int32 midasFlag = 284; // 米大师开关  0-关闭 1表示打开
    int32 summonFlag = 285; // 1-打开 2- 关闭
    SelfTreasurePb selfTreasurePb = 286; // 我的宝藏数据

    // 进游戏特殊准备的一些显示用的数据(精简数据)
    QueryAllianceWorldWonderRt queryAllianceWorldWonder = 287;
    QueryWorldWonderInfoRt queryWorldWonderInfoRt = 288;
    OpenAllianceHelpEasy openAllianceHelpEasy = 289;
    AutoFightCommonBoss autoFightCommonBoss = 290;
    repeated UiconditionOpenPb uiconditionOpenPbs = 291; //功能开启列表
    int32 atkNum = 292; //七日boss攻击次数
    int64 recoverTime = 293; //七日boss攻击次数恢复时间
    RadarStorageInfo radarStorageInfo = 294; // 雷达探测存储值
    int32 yanwuAttackNum = 295; // 演武攻击次数
    AutoFightNpcCity autoFightNpcCity = 296;
    AllianceCallInfo allianceCallInfo = 301;
    repeated int32 occupyNpcCitys = 302; // 联盟占领的所有npc城池
    BarracksRefugeSoldierInfo barracksRefugeSoldierInfo = 303; // 避难兵信息
    repeated int32 registerNpcCity = 304; // 已经报名的城池
    repeated NeutralCityQueryRt.NeutralCityRegisterInfo registerCity = 305; // 已经报名的城池

    int64 battleFieldId = 311; //战场id
    int32 battleFieldOverTime = 312; //战场结束时间
    int64 exitedBattleFieldId = 313; // 已退出的战场id

    PlunderLimitInfo plunderLimitInfo = 320; // 掠夺上限信息
    map<int32, SupplyResourceInfo> allianceSupplyInfo = 321; // 联盟商队补给,key: 资源大类型
    repeated IntToIntKV privacySwitch = 322;
    int32 capitalBattleStateStartTime = 323; // 状态进入时间
    // 4号转5号消息
    ServerInfo4To5 serverInfo4To5 = 400;
}

message QuestionnaireCfg {
    string url = 1;                  //问卷地址
    uint64 sid = 2;                  //问卷的唯一Id
    uint64 startTime = 3;            //开始时间
    uint64 endTime = 4;              //结束时间
    map<int32,string> condition = 5; //显示条件
    string attach = 6;               //奖励附件
    string title = 7;                //标题
}

message PlunderLimitInfo {
    repeated IntToLongKV plunderNums = 1;
    int32 nextRefTime = 2;
}

message FestivalReward {
    int32 score = 1; //积分
    repeated FestivalRewardData festivalRewardData = 2; //奖励
    repeated int32 stage = 3; //已经购买的礼包
}

message UiconditionOpenPb {
    int32 uiconditionType = 1; // 模块id
    int32 state = 2; //模块状态 1-开启 没开的话也不会有数据了
    int32 stateChangeTime = 3; // 状态变化时间 其实就是模块开启时间 这么写是为了防止日后有中间状态开启一部分的情况
}

message AutoFightCommonBoss {
    int32 canFightCommonBossLv = 1; //可以打的黑暗军的最高等级
    int32 forceMaxNum = 2; // 自动打野的队列数量
    repeated IntToIntKV itemList = 3;

}

message AutoFightNpcCity {
    int32 npcCityProtoId = 1;
    map<int64, AutoTemplate> templateInfo = 2;

    message AutoTemplate {
        map<int32, int64> soliderMap = 1; // 兵信息
        map<int64, int64> heroMap = 2;    // 英雄信息
    }
}


message OpenAllianceHelpEasy {
    int32 allianceHelpVoLengs = 1; // 联盟帮助红点数量
}

// 此字段客户端从4号消息中读出来通过5号消息原封不动发给服务器即可，不要试图根据备注使用里面的任何字段，因为格式是服务器专用的
message ServerInfo4To5 {
    int64 nextScienceTaskRefreshTime = 1; // 下次科研任务刷新时间
}

// 功能封禁
message FunctionBanData {
    int64 type = 1; // 类型
    int32 ban = 2; // 封禁 0不封 1封
}

// 进入公告
message EnterAnnounce {
    int32 noticeType = 1; // 关闭公告=0，文字公告=1，图片公告=2，异形图=3
    string noticeText = 2; // 文本内容
    string jumpDestin = 3; // 跳转地址
    int32 jump = 4; // 是否跳转 0 不跳 1 跳
    int32 priorty = 5; // 优先级 小的先弹 相同就按数组内的顺序
    int32 showType =6;//显示类型  0缺省值,默认不弹 1 每次都弹，2一天弹一次，3只弹一次
    int64 id = 7;//公告唯一标识
}

message EnergySpecialInfo {
    int64 energy = 1; // 上次刷新时的体力值
    int32 lastRefresh = 2; // 上次刷新时间
    int32 energyLimit = 3; // 体力上限
}

// 联盟推荐展示
message AllianceTopInfo {
    int64 allianceId = 1;
    string allianceName = 2;
    int32 flagColor = 3;
    int32 flagStyle = 4;
    int32 flagEffect = 5;
    int32 upLv = 6;
}

// 奇观战信息
message WonderWarInfo {
    int32 protoId = 1;
    int32 warStartTime = 2;
    int32 warOverTime = 3;
    int32 occupyStartTime = 4;
    int32 occupyOverTime = 5;
    int64 firstOccupyAllianceId = 6;
}

//资源矿争夺战信息
message ResWarInfo {
    int32 protoId = 1;
    int32 warStartTime = 2;
    int32 warOverTime = 3;
    int32 occupyStartTime = 4;
    int32 occupyOverTime = 5;
    int64 firstOccupyAllianceId = 6;
}

message EnemyInfo {
    int64 playerId = 1;
    int32 robTime = 2;
}

message PlayerEnemySoliderInfo {
    int32 state = 1; //0、新手期 1、正常刷新
    repeated EnemySoliderInfo enemySoliderInfo = 2;
    int32 nextRefTime = 3; //刷新时间
    int32 refRound = 4; //已刷新的轮数
}

message EnemySoliderInfo {
    int64 id = 1;
    int32 protoId = 2; //模板Id
    int32 x = 4; //相对坐标x
    int32 y = 5; //相对坐标y
    int32 resRate = 6; //资源倍率
    string rewards = 7; //全部的资源道具奖励
    int32 unitArrayId = 8; //部队Id
    repeated IntToLongKV npcSoliders = 9; //位置-血量
    string res = 10; //资源奖励
}

//活动开放时间
message ActivityEnterTimeInfo {
    int32 activityType = 1; // 奇观战入口-1 奇观战活动-2 四天龙入口-3 死天龙活动-4 抽奖活动-5 抽奖活动（无效） 6-至高领主活动
    int32 startTime = 2; // 开始时间
    int32 endTime = 3; // 结束时间
    int64 activityId = 4; //活动Id
    int32 openCount = 5; //已开启次数
}

message InstanceUnitInfo {
    int32 unitId = 1; // 关卡信息
    repeated int32 starNumBox = 2; // 已领取宝箱星数
}

message InstanceStar {
    int32 floorId = 1; // 层数
    repeated int32 starCondition = 2; // 星数条件
    int32 bossTimes = 3; // 精英挑战次数,仅精英关卡有效
}

message FriendApply {
    int64 applyPlayerId = 1; // 加我为好友的玩家ID
    string applyPlayerName = 2; // 加我为好友的玩家名
    string shortName = 11; // 玩家昵称
    string applyPlayerAllianceShortName = 5; // 加我为好友的玩家联盟简称
    int32 applyPlayerAreaNo = 3; // 加我为好友的玩家所在服务器编号
    int32 applyPlayerVipLv = 4; // 加我为好友的玩家VIP等级
    int32 applyPlayerPhotoId = 6; // 加我为好友的玩家头像
    int32 applyTime = 10; // 申请时间
    int64 fightValue = 12; // 战斗力
    int32 applyState = 13; //申请状态 0、等待同意 1、已同意 2、已拒绝
    int32 jjcScore = 14; //
    int32 belongState = 15; // 联盟所属洲
    PhotoViewInfo photoInfo = 16; // 加我为好友的玩家头像
}

message OnlineRewardInfo {
    int32 todayOnlineNum = 1; // 本日领取次数
    string nextOnlineReward = 2; // 当前档奖励
    int32 overTime = 3; // 当前档可领奖时间
    string bigOnlineReward = 4; // 本日大奖奖励
}

message BankInfo {
    int32 type = 1; // 方案类型
    int32 userPlan = 2; // 选择的方案
    int64 useMoney = 3; // 投资的钱
    int32 rate = 4; // 利率
    int32 overTime = 5; // 到期时间
}

message TimeBoxInfo {
    int32 index = 1; // 槽位ID
    int32 timeBoxId = 2; // 当前放着的时光之盒ID
    int32 studyTime = 3; //研究时间
    int32 overTime = 4; // 研究到点时间   zeroTime的话表示放进去了时光之盒但是未开始研究,,<now的话表示研究结束未领取
}

message ServerInfo {
    int64 serverId = 1; //服务器唯一编号
    string serverName = 2; //服务器名字
    int32 areaNo = 3; // 服务器区号
    int32 areaPublishTime = 4; // 开服时间 单位：秒 使用请严谨，该时间很可能晚于当前时间
    int32 areaStatus = 5; // 状态 1 维护中  2 运行中
    int32 areaShowState = 6; // 显示状态 1 流畅 2 拥挤 3 火爆
    int32 areaShowNew = 7; // 显示新服标记 0 不显示 1 显示
    int32 areaId = 8; // 游戏大区ID
    int32 partition = 9; // 小区ID
    int32 areaVisible = 10; // 创角界面是否可见 0 不显示 1 显示
}

message BagInfo {
    int64 itemId = 1; // 物品唯一ID
    int32 itemProtoId = 2; //物品模板
    int32 num = 3; //数量
}

message HeroInfo {

    int32 pos = 6; // 站位
    int64 heroPower = 7; // 武将战斗力
    HeroInformationForProperties heroInformationForProperties = 15;
}

message CaveInfo {
    int32 startTime = 1; // 开始时间，单位秒
    int32 endTime = 2; // 结束时间，单位秒
    int64 holdKingId = 3; // 保存的君主ID，如果为0，表示君主没有保存
    repeated CaveSoldier soldiers = 4; // 要保存的士兵信息
}
message GiftBagInfo {
    int32 giftBagId = 1; // 礼包模板ID
    int64 endTime = 2; // 礼包的结束时间
    int32 curLevel = 3; // 礼包当前档位
    int32 curCount = 4; // 礼包当前档位充值次数
}

message MonthCardInfo {
    int32 monthCardId = 1; // 月卡ID 对应礼包表唯一ID
    int32 inDayRecv = 2; // 今天月卡是否领取过
    int64 overdueTime = 3; // 月卡过期时间
}

message QuotaBagInfo {
    int32 quotaBagId = 1; // 满额礼包ID
    int64 endTime = 2; // 满额礼包的结束时间
    int32 rewardId = 3; // 满额礼包奖励ID
    int32 degree = 4; // 满额礼包完成度
}

message LoginGiftInfo {
    int32 loginGiftType = 1; // 1-开服活动
    int32 startTime = 2; // 开始时间
    repeated int32 day = 3;
    int32 lastLoginRewardTime = 4; // 上次领取登录礼时间 @Deprecated
    repeated int32 autoDay = 5; // 拍脸图登录可领取天数奖励
    int32 lastLoginAutoRewardTime = 6; // 拍脸图登录上次领取登录礼时间 @Deprecated
    int32 process = 7; //14r日登录当前进度
    int32 nowLoginRewardState = 8; // 当期登陆礼的状态 0表示默认的7日登陆 非0的话就是默认的7日登陆已经完结 已经变成了重置版的七日登录(类似周签到礼)
    int64 resetLoginLastRewardTime = 9; // 重置版的7日登录活动的上次领取时间
    int32 resetLoginDay = 10; // 重置版的7日登录活动的登录天数进程
    int32 loginAutoDay = 11; // 开服拍脸图登录活动的登录天数进程
    int32 loginRewardLastTime = 12; // 14日登录上次领奖时间
}

message GrowthFundInfo {
    int32 growthFundType = 1; // 1-开服活动
    int32 buy = 3; // 基金ID
}

message HomeActivityInfo {
    int32 activityType = 1; // 1-开服活动
    int32 startTime = 2; //开始时间
}

// msgType = 5
// 客户端 -> 服务器
// 登录玩家服
message EnterGameHome {
    int64 playerId = 1; //玩家ID
    string configVer = 2; // 游戏版本号
    int32 homeMsgNo = 4; //玩家推送消息编号
    int32 worldRefreshData = 5; //世界是否刷新数据 0、否 1、是
    string clientIp = 6;
    int32 clientType = 7;
    int32 channelid = 8; // 渠道id (腾讯登录的时候要携带的字段)
    string clientVersion = 9; // 客户端版本
    string resVersion = 10; // 客户端资源版本
    TencentPayInfoProtoBuf tencentPayInfo = 11; // 腾讯充值所需数据
    string network = 12; // 网络
    string androidId = 13; // ANDROID_ID
    string iosIdfv = 14; // ios idfv
    int32 privilege = 15; // 特权渠道
    string countryCode = 16;

    // 4号转5号的公共结构
    ServerInfo4To5 serverInfo4To5 = 101;
}

message TencentPayInfoProtoBuf {
    string sessionId = 1;
    string sessionType = 2;
    string openkey = 3;
    string pf = 4;
    string pfkey = 5;
}

message EnterGameHomeRt {
    int64 worldId = 1; //服务器id
    int64 serverTime = 3; //服务器时间
    string playerName = 2; //玩家名称
    repeated int32 achievementExchangeRewards = 7; // 已经兑换的奖励
    ResourceInfoRt res = 13; //资源信息
    YieldChange yields = 14; //资源总产量
    StoreLimitChange storageLimit = 15; //存储上限
    repeated InnerCityInfo innerCityInfo = 16; //内城建筑
    repeated DetailedQueryHerosInFo detailedQueryHerosInFo = 17; //武将信息
    PhotoViewInfo photoInfo = 19; // 头像
    int32 photoProtoId = 20; //玩家头像对应的武将模版ID
    repeated BagInfo bagInfo = 21; //背包物品信息
    int32 guideStep = 26; //新手引导步骤
    repeated int32 finishGuidelineId = 28; // 被动触发的已经完成的新手引导id

    string msdkOpenId = 29;
    repeated ChargeBuffInfo chargeBuff = 68; // 充能buff
    repeated ResearchInfo researchs = 69; // 玩家的科技信息    ---改查询 1053
    repeated QueueInfo queueInHome = 70; // 队列
    repeated QueueInfo hide = 71; // 不显示的队列 服务器排查用
    int32 vipLv = 78; //vip等级
    int32 vipExp = 79; //vip经验
    int32 kingLv = 83; //君主等级
    int32 kingExp = 84; //君主经验
    int64 mainHeroId = 91; // 玩家领主ID
    OnlineRewardInfo onlineRewardInfo = 111; // 玩家在线礼包信息
    repeated int32 newItem = 137; // 图书馆新图鉴  新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
    int32 nowUnitTaskId = 145; // 章节任务进度

    int32 buyStrengthNum = 147; //今日购买体力次数
    int32 lastBuyStrengthTime = 148; //上次购买体力时间
    int32 noReadFightInfoNum = 149; //未读战报数
    int32 jjcReportNum = 150; // 未读战报数量
    repeated GiftBagInfo giftBagInfos = 153; // 礼包购买信息          ---改查询
    repeated MonthCardInfo monthCardInfos = 154; // 月卡信息
    repeated LoginGiftInfo loginGiftInfo = 155; // 登录礼信息
    repeated GrowthFundInfo growthFundInfo = 156; // 成长基金信息
    repeated HomeActivityInfo activityInfo = 157; // 活动信息         ---改查询
    repeated ChatRoom chatRoomInfos = 159; // 聊天室信息
    int32 storyStep = 160; //剧情引导步骤
    repeated EffectInfo effects = 161;
    repeated ActionQueue homeActionQueues = 162; //行为队列
    repeated RedPointInfo homeRedPointInfos = 163; //红点信息
    repeated BuildingView homeBuildingViews = 164; //玩家服建筑视图状态
    repeated PrivateChatUnreadInfo unreadInfos = 165;
    int32 lastCasinoFreeTime = 166; //赌场上次免费时间
    int32 casinoFreeCount = 167; //赌场免费次数
    int32 serverOffsetTime = 168; //服务器偏移秒数
    repeated Task homeTasks = 169; //章节任务
    repeated ActivityEnterTimeInfo homeEnterTimeInfo = 170; // 活动开放时间
    repeated LotteryInfo activityLotteryInfos = 171;
    repeated SurpriseGiftPackage surpriseGiftPackages = 172; // 惊喜礼包
    int32 payCount = 175; // 玩家充值次数
    repeated IntToIntKV dragonEggs = 176; //龙蛋
    repeated Dragon dragons = 177; //所有的龙
    int32 lastGetVipDayTime = 178; // 玩家上次领取VIP礼包时间
    int64 payUsdAmount = 179; // 玩家充值额度，并非真实充值额度，而是充值礼包的美元档位总和(单位：美分)
    repeated IntToIntKV medals = 181; //勋章信息 勋章类型-勋章等级
    repeated ForcePlan plans = 182; //军团预设
    repeated string paySteps = 183; //购买过的钻石档位
    repeated Appreciations appreciations = 184; // 玩家局部犒赏令任务 如果玩家毫无进度 服务器不会发
    string payNotice = 185; // 支付弹窗内容
    repeated LongToIntKV superLotteryDiscountTimes = 186; //高级招募模板Id-上次8折十连胜时间
    repeated int32 buyVipGifts = 187; // 钻石购买普通VIP特权礼包的情况,VIP等级list
    int32 nowResearchTaskId = 188; // 科研目标进度
    int32 nowEquipTaskId = 189; // 装备目标进度
    int32 lastEverydayFreeRewardTime = 190; // 上次领取每日免费礼包时间
    repeated ClubCardInfo clubCardInfos = 191; // 会员卡数据
    repeated BuffVo countryBuffs = 192; // 玩家的全国buff集合
    int64 instanceTime = 193;
    int64 allianceBagScore = 194; // 玩家联盟仓库积分
    int32 chooesId = 195; // 玩家挑选的领主方案 lordChooes.xml表ID
    repeated NowPurchaseActivity nowPurchaseActivitys = 196;
    repeated GuideInfoVo GuideInfoVos = 197; // 引导数据
    string nickName = 198; //玩家昵称
    int32 refreshData = 200; //是否刷新数据 0、否 1、是
    int32 breakthroughLv = 201; //飞升等级
    int32 exchangeBreakthroughCount = 202; //本日兑换飞升修为次数
    repeated DiamondInfoChangeVo diamondInfo = 203; // 玩家特定途径获得钻石的记录
    int32 payNum = 204; // 充值积分总额
    repeated PhotoInfo photos = 205; // 拥有头像信息
    SkinInfo nowSkin = 206; // 当前皮肤,若当前无皮肤则不会赋值,里面默认值都会是0
    int32 autoPveStartTime = 207; // 挂机开始时间
    int32 wineHallFreeCount = 208; // 酒馆免费次数 todo 废弃
    int32 wineHallNextFreeTime = 209; // 酒馆下次免费时间  todo 废弃
    int32 sysTaskCount = 210; //全部频道聊天次数
    int32 sysTalkRefTime = 211; //系统频道聊天次数刷新时间
    int32 sysTalkLast = 212; //系统频道上次聊天时间
    int32 worldTalkLast = 213; //世界频道上次聊天时间
    repeated LongToStringKV prisonReward = 214; // 玩家id -> 悬赏
    OpenBigCityRt bigCityInfo = 215; // 整个内城数据
    int32 huoyueduValue = 216; // 活跃度值
    repeated TotalPayRewardInfo totalPayRewardInfo = 217; // 累充奖励数据
    int32 huoyueduCastleLv = 218; // 本次活跃度是几级的城堡领取的
    int64 allianceBossNextFightTime = 219; // 联盟boss下次可战斗时间
    BuildingSchoolInfo buildingSchoolInfo = 220; // 新建筑学院信息
    BuildingAlchemyInfo buildingAlchemyInfo = 221; // 新建筑炼金所信息
    BuildingElementInfo buildingElementInfo = 222; // 新建筑元素塔信息
    int64 innerCityFatigueValue = 223; // 内城建筑工人疲劳值
    int32 innerCityFatigueRefreshTime = 224; // 内城建筑工人疲劳值刷新时间
    repeated InnerCityMapCell innerCityMap = 225; // 内城地图
    int32 nowEffectNum = 226; // 剩余可捐献次数
    int32 lastEffectTime = 227; // 上次结算可捐献次数时间
    int64 currentLayoutId = 228; // 当前布局Id
    repeated IntToLongKV allDecoration = 229; // 全部装饰建筑,建筑类型-唯一id
    map<int32, SkinInfo> usingSkin = 230; // 当前皮肤,若当前无皮肤则不会赋值,里面默认值都会是0
    int32 moveStateCount = 231; // 玩家迁州次数
    repeated IntToIntKV giftTypesFreeRewards = 232; // 领取各种奇奇怪怪的每日奖励的数据 key=giftTypes表ID value是上次领取的时间
    repeated IntToIntKV serverActivities = 233; // 配置的活动 key=购买活动表ID value是开始时间
    int32 continueGetVipExpDay = 234; //连续领取vip经验的天数
    int32 lastGetVipExpTime = 235; //上次领取vip经验的时间（实际应该记录的是上次可领取的时间点）
    repeated SlgBarracksQueueInfo currentSlgBarracksQueueInfo = 236;
    repeated IntToIntKV barracksWelcome = 237; // 兵营首次造兵固定士兵数量时间是否用掉,建筑类型->0或1，非0表示用掉了
    repeated int32 heroSharedEquipments = 264; // 英雄共享装备(配置表唯一id)
    int32 lastGetTimingGiftTime = 265; // 上次领取时间礼包时间
    LordTalentData lordTalentData = 267; // 领主天赋
    repeated IntToIntKV vipDayReward = 269; // 可领取的每日经验(不含当前等级),vip等级->生成的时间
    repeated ChatBubbleInfo allChatBubbleInfo = 270; // 拥有的所有聊天气泡
    int32 chatBubble = 271; // 当前聊天气泡
    int32 haveOfflineMsg = 272; //是否有离线消息
    repeated IntToIntKV platformBans = 273;
    repeated int32 usedPropBuildingType = 274; // 使用过建筑道具的装饰建筑类型
    repeated DiamondConsumeVo diamondConsume = 275; // diamondConsume表购买info
    int64 surveyId = 276; // 已经回答过的问卷ID
    LordEquipInfo lordEquipInfo = 277; // 领主装备信息
    repeated int32 timedPackagedDraw = 278; // 定时礼包已领取时间戳,可能是前一天的时间戳
    OnlineHeroInfo onlineHeroInfo = 279; // 玩家在线活动信息
    PlayerLordSkinInfo playerLordSkinInfo = 280; //玩家皮肤
    repeated string sid = 281; // 已经回答过的问卷ID

    // 进游戏特殊准备的一些显示用的数据(精简数据)
    GetChatInfoEasy getChatInfoEasy = 282;
    QueryFriendRt queryFriendRt = 283;
    QueryBuyGiftPackageInfoRt queryBuyGiftPackageInfoRt = 284;
    PurcaaseActivityRedPointRt purcaaseActivityRedPointRt = 285;
    repeated QueryTaskEasy QueryTaskEasys = 286;
    MerchantShipQueryEasy merchantShipQueryEasy = 287;
    repeated LongToLongKV assistInfo = 288;
    repeated LongToLongKV allianceChatAssistInfo = 289;
    repeated ExchangeInfo exchangeInfo = 290;
    FestivalReward FestivalReward = 291;
    map<int32, int32> personalShopNextRefreshTime = 292; // 专属个人商店下次刷新时间
    repeated DiamondInfoChangeVo propQuickInfo = 293; // 玩家特定途径获得加速道具的记录

    RandomEventDataInfo randomEventDataInfo = 301; // 内城随机事件数据
    HeroAppointInfo heroAppointInfo = 302; // 英雄委任数据
    int32 userLastPayTime = 303; // 用户上次充值时间(不区分礼包/紫钻)
    int32 lastPayTencentMoneyTime = 304; // 用户上次充值紫钻时间 @Deprecated
    int32 userPayTencentMoneyNum = 305; // 用户紫钻充值数 @Deprecated
    int32 payNoticeGiftPackageId = 306; // 进游戏礼包奖励保留
    int32 leaveAllianceCount = 307; // 玩家离帮次数
    int32 nextJoinAllianceTime = 308; // 下次可加入联盟时间
    int32 payNum4Task = 309; // 排除特定充值项目、用于充值活动任务的充值积分总额

    int64 allianceJourneyOpen = 310; // 当前盟主征途是否开启
    int32 allianceJourneyDraw = 311; // 当前盟主征途大奖领取时间,0表示未领取

    int64 heroRecommendEliBox = 315; // 英雄推荐三消宝箱,非0已领取
    int64 heroRecommendSlgBox = 316; // 英雄推荐slg宝箱,非0已领取

    DinosaurQueryRt dinosaurInfo = 317; // 恐龙信息
    int32 radarTimeBeginning = 318;   // 雷达在线奖励开始领取的时间戳起点
    int32 radarTimeProtoId = 319;     // 雷达在线奖励正在进行的配置id
    uint64 vipExpireTime = 320;        // vip 过期时间
    string configStr = 321;
}

message LoginSDKBind {
    int32 sdkType = 1; // SDK类型 0 设备登录 1 内网登录 4 googleplay 5 facebook
    string sdkOpenId = 2; // SDK 提供的平台账号。在绑定消息 LoginSDKBinding 中，传入空字符串则为解绑
    string sdkUserName = 3; // SDK 用户名
}

// msgType = 7
// 客户端 -> 服务器
// 获取绑定信息
message LoginSDKBindInfo {
}

message LoginSDKBindInfoRt {
    repeated LoginSDKBind bind = 1; // 所有绑定信息
}

// msgType = 8
// 客户端 -> 服务器
// 绑定
message LoginSDKBinding {
    LoginSDKBind bind = 2; // 绑定需求
}

message LoginSDKBindingRt {
    int32 rt = 1; // 操作结果
    repeated LoginSDKBind bind = 2; // 所有绑定信息
}

message ExchangeInfo {
    int32 exchangeId = 1;
    int32 exchangeNum = 2;
}

message HeroAppointInfo {
    repeated IntToLongKV appoint = 1;
}

message RandomEventDataInfo {
    repeated RandomEventInfo randomEventInfo = 1;
}

message RandomEventInfo {
    int64 id = 1; // 事件唯一Id
    int32 protoId = 2; // 事件模板id
    int32 resSingleWarProtoId = 3; // 绑定的资源点
    int32 eliminatePass = 4; // 三消战斗通过
    int32 slgPass = 5; // slg战斗通过
    int32 drawed = 6; // 已被领取
    int32 fortune = 7; // 天降鸿运倍率
    repeated int32 questProtoId = 8; // 前置任务
}

message MerchantShipQueryEasy {
    int32 refreshTime = 1; // 下次刷新的时间点
    int32 leftTimes = 2; // 剩余可手动刷新次数
}


message QueryTaskEasy {
    int32 taskType = 1; // 任务类型
    int32 goingNum = 2; // 正在进行中的数量
    int32 canRewardNum = 3; // 可以领奖的任务数量
}

message GetChatInfoEasy {
    repeated ChatInfo chatInfos = 1; // 进游戏仅需两条最新消息
}

// 聊天气泡信息
message ChatBubbleInfo {
    int32 protoId = 1; // 模板id
    int32 expire = 2; // 过期时间
    int32 gainTime = 3; // 获得时间
}

message LordTalentData {
    repeated IntToIntKV talentCd = 2; // 天赋技能上次释放时间
    int32 currentPage = 3; // 当前使用的天赋页
    repeated LordTalentPage page = 4; // 天赋页
}

message LordTalentPage {
    int32 page = 1; // 天赋页序号
    repeated IntToIntKV talent = 2; // talentId -> level
}

message SlgBarracksQueueInfo {
    int32 makeSoldierId = 1; // 士兵模板ID
    int64 makeNum = 2; // 正在造兵数量
    int32 makeStart = 3; // 造兵开始时间
    int32 makeEnd = 4; // 造兵结束时间

    int64 upNum = 5; // 正在升阶数量
    int32 upStart = 6; // 升阶开始时间
    int32 upEnd = 7; // 升阶结束时间
    int32 upSrcProtoId = 8; // 升阶前模板id
    int32 upDestProtoId = 9; // 升阶后模板id

    int32 beHelpedTimes = 10; // 被帮助次数
    int32 todayBeHelpedTimes = 11; // 今日被帮助次数

    string makeCancelFullBack = 12; // 造兵全部取消应当返还的资源
    string upCancelFullback = 13; // 升阶全部取消应当返还的资源
    int64 buildingId = 14; // 建筑id
}

message InnerCityMapCell {
    int32 x = 1;
    int32 y = 2;
    int32 bigType = 3; // 1.内城建筑(全部),2.pve城池(只有已占领的)
    int32 smallType = 4; // 对应的各个单元的模板id
    int64 id = 5;
}

// 新建筑学院信息
message BuildingSchoolInfo {
    repeated IntToIntKV lvInfo = 1;
}
// 新建筑炼金所信息
message BuildingAlchemyInfo {
    repeated IntToIntKV lvInfo = 1;
}
// 新建筑元素塔信息
message BuildingElementInfo {
    repeated IntToIntKV lvInfo = 1;
}

// msgType = 6
// 客户端 -> 服务器
// 检测屏蔽字
message CheckWord {
    string text = 1;
    int32 checkType = 2; // 场景类型
    int64 extendId = 3; // 扩展id

    PrivateChatInfoPb privateChatInfoPb = 4; // 1006私聊场景的时候要传入
}

// 在私聊场景的时候要带数据上报所需数据
message PrivateChatInfoPb {
    string recvAccount = 1; // (接受者用户账号)=XXX&
    string recvRoleName = 2; // （接受者角色名）=XXX&
    string recvRolePicUrl = 3; // （接受者角色头像）=XXX&
    string recvAreaId = 4; // (接受者1:微信 2:手Q 2 3:游客）=XXX&
    int32 recvPlatId = 5; // (接受者玩家平台id。 0 : IOS 1: andriod 2: PC 1000: 其它）  =XXX&
    int64 recvWorldId = 6; // (接受者针对分区分服的游戏填写分区id。不分区则填写0） =XXX&
    int64 recvRoleId = 7; // (接受者角色id。有）=XXX&
    int32 recvRoleLevel = 8; // (接受者角色等级）=XXX&
}

message CheckWordRt {
}

// msgType = 9
// 客户端 -> 服务器
// 检测屏蔽字
message QueryStateRank {
}

message QueryStateRankRt {
    repeated IntToIntKV stateRank = 1; // 我在各州的排名
}

// msgType = 10
// 客户端 -> 服务器
// 选主武将
message ChooseMainHero {
    int32 chooseId = 1; // heroSelect表的唯一ID
    int32 lanType = 2;
}

message ChooseMainHeroRt {
    int32 x = 1;
    int32 y = 2;

    int32 times = 3; // 竞技场剩余战斗次数
    int32 lastJjcCountTime = 4; //上次竞技场令牌回复时间
    int32 jjcMaxScore = 5; // 竞技场历史最高
    int32 myJjcScore = 6; // 我的竞技场积分
    string jjcTimeReward = 7; // 竞技场累计奖励 (是奖励格式转成的字符串)
    HeroTrainInfo heroTrainInfo = 9; //英雄训练所信息
    PlayerEnemySoliderInfo playerEnemySoliderInfo = 10; //贼兵信息
    int32 bornState = 11;
    int32 bornStateFirstChoose = 12; // 玩家出生时选的出生州
    int32 bornHeroFirstChoose = 13; // heroSelect表的唯一ID
    repeated IntToLongKV slgSoldier = 14; // 当前兵营里的兵
    EnergySpecialInfo energySpecialInfo = 15; // 特殊体力信息
}

// msgType = 14
// 客户端 -> 服务器
// 运营登录
message WebLogin {
    string token = 1; // 登录令牌，网页登录接口返回
    int32 areaId = 2; // 目标区号
}

message WebLoginRt {
    int32 exist = 2;
}

// msgType = 15
// 客户端 -> 服务器
//新版出征消息
message Walk {
    int32 runType = 1; //打人、打怪、占领地、占领城、运输资源、采集、驻扎、增援、参与集结
    int32 aimsX = 3; //目的地X
    int32 aimsY = 4; //目的地Y
    int64 targetId = 7; //目标玩家/集结Id
    repeated int64 dragonIds = 8; //上阵的巨龙Id
    repeated WalkForceArraySite arrayInfo = 9;
    int32 autoFight = 10; //是否是自动战斗，目前仅用于猎魔，该情况下，服务器会修正带兵数量
}

message WalkForceArraySite {
    int32 site = 1;
    int64 heroId = 2; // 英雄id
    int32 rsNum = 3; // 预备兵数量

    //其他人的英雄使用，正常情况的不需要赋值

    int64 heroPower = 14;
    HeroInformationForProperties heroInformationForProperties = 21;
}

message BattleSolider {
    int32 protoId = 1; //配置ID
    int32 num = 2; //参战士兵人数
}

message WalkRt {
    int32 errorCode = 2;
    int32 limit = 3; // 新的增援上限
    int64 groupId = 4;
}

// msgType = 16
// 客户端 -> 服务器
// 运输资源
message TransportResource {
    int64 tarPlayerId = 1; //目标玩家Id
    string res = 2; //资源信息（只能是金、铁、石、木、粮）
}


message TransportResourceRt {
    int32 errorCode = 2;
    int64 groupId = 3;
    string realCostRes = 4;
}

// msgType = 18
// 客户端 -> 服务器
// 侦查
message WalkScout {
    int32 aimsX = 1; //目的地X
    int32 aimsY = 2; //目的地Y
    int32 runType = 3; //侦查行军类型
    int64 targetId = 4;
    int32 queueId = 5; //队列Id
    int32 autoStation = 6; //是否自动驻扎
    repeated IntToIntKV posList = 12;
}

message WalkScoutRt {
    int32 errorCode = 2;
    int64 groupId = 3;
}

// msgType = 17
// 客户端 -> 服务器
// 查看玩家的个人信息
message PersonalPower {
    int64 playerId = 1;
}

message PersonalPowerRt {
    PlayerInFo playerInFo = 2;
    repeated BagInfo bagInfo = 4; //背包物品信息
    repeated HeroInfo heroInfo = 5; // jjc布阵信息
}

message PlayerInFo {
    string name = 1; // 玩家名称
    string shortName = 2; // 玩家简称
    int64 id = 3; // 玩家ID
    int64 allianceId = 4; // 联盟ID
    string allianceName = 5; // 联盟名称
    string allianceShortName = 6; // 联盟简称
    repeated int32 positions = 7; // 联盟职位
    int32 photoProtoId = 8; // 头像
    int64 fightValue = 9; // 战斗力
    int32 kingLv = 10; // 君主等级
    int32 kingExp = 11; // 君主经验
    int32 vipLv = 12; // vip等级
    int32 currentPos = 13; // 当前官职
    int32 mainHeroStarLv = 14; // 领主星级
    int32 mainHeroAdvLv = 15; // 领主阶级
    int64 killSoliderNum = 16; // 杀敌数
    int32 isMyFriend = 17; // 是否是我的好友
    int32 isMyBlackFriend = 18; // 是否是我的黑名单
    int32 mainHeroProtoId = 19; // 领主模版
    int32 jjcScore = 20;
    int32 heroNum = 21; // 玩家英雄数量
    int32 innerCityNum = 22; // 内城城池数
    int32 outerCityNum = 23; // 外城城池数
    int32 belongState = 24; // 所属洲
    int32 areaNo = 25; // 玩家所在的区号
    PhotoViewInfo photoInfo = 26; // 头像
    int32 nowUnitTaskId = 27; // 章节任务进度
    int32 lordEquipOpen = 28; // 领主装备是否开启
    int32 castleLv = 30; // 内城主堡等级
    LordEquipInfo lordEquipInfo = 31; // 领主装备信息
    int32 currentSkinId = 32; // 领主当前皮肤
    int32 lordEquipInfoSwitch = 33;//玩家执行官装备是否展示0否1是
    int32 lordEquipStoneOpen = 34;//领主装备徽章是否开启
}

message MyPrisonInfo {
    int64 playerId = 1; // 囚禁我的领主的玩家ID
    int32 photoId = 2; // 囚禁我的领主的玩家头像
    string allianceShortName = 3; // 囚禁我的领主的玩家联盟简称
    string playerName = 4; // 囚禁我的领主的玩家名称
    int32 x = 5; // 囚禁我的领主的玩家X
    int32 y = 6; // 囚禁我的领主的玩家Y
    int32 areaNo = 7; // 囚禁我的领主的玩家Z
    int64 ransom = 8; // 赎金
    int64 rewardGold = 9; // 赏金
    int32 belongState = 10; // 所属洲
}

// msgType = 19
// 客户端 -> 服务器
// 添加坐标
message AddMark {
    int32 aimsX = 1;
    int32 aimsY = 2;
    int32 areaNo = 3; // 服务器区号
    int32 group = 4; // 分组类型
    string name = 5; // 名字
    int64 ticket = 6; // 验证屏蔽字票据
}

message AddMarkRt {
    MarkInfo markInfo = 2;
}

// msgType = 20
// 客户端 -> 服务器
// 删除坐标
message DelMark {
    int64 id = 1; // 标记点唯一ID
}

message DelMarkRt {
    int64 id = 2; // 标记点唯一ID
}

// msgType = 21
// 客户端 -> 服务器
// 请求时间
message FetchServerTime {
    int64 reqTime = 1;
}

message FetchServerTimeRt {
    int64 reqTime = 2;
    int64 time = 3;
    string timeZoneName = 4; //时区名字
    int32 timeZoneValue = 5; //时区偏移值
}

// msgType = 22
// 客户端 -> 服务器
// 找离我最近的指定等级魔物坐标
message SelectMonster {
    int32 monsterLv = 1;
}

message SelectMonsterRt {
    int32 x = 2;
    int32 y = 3;
}

// msgType = 23
// 客户端 -> 服务器
// 找离我最近的指定等级的遗迹坐标
message SelectRelic {
    int32 relicLv = 1; //等级
}

message SelectRelicRt {
    int32 x = 2;
    int32 y = 3;
}

// msgType = 24
// 客户端 -> 服务器
// 找离我最近的指定等级的地块
message SearchMapCell {
    int32 state = 1;
    int32 cellType = 2; //地块类型  魔物-2  巢穴-3  资源田-28
    int32 protoType = 3; // 配置类型 同类地块类型的二级区分  资源田-[]
    int32 objType = 4; //对象类型 魔物类型(废弃)
    int32 level = 5; // 地块等级
    int32 x = 10;
    int32 y = 11;
    int32 num = 12;
}

message SearchMapCellRt {
    repeated MapCell mapCells = 2;
}

message MapCell {
    int32 protoId = 1;
    int32 x = 2;
    int32 y = 3;
}

// msgType = 25
// 客户端 -> 服务器
// 请求版本信息
message FetchVersion {
}

message FetchVersionRt {
    string cfgVersion = 1; // 服务器配置版本
}

// msgType = 26
// 客户端 -> 服务器
// 实时检测改名
message CheckPlayerName {
    string name = 1;
    int32 nameType = 2; // 1-玩家名字  2-玩家昵称  3-巨龙名字检测 4-部队预设名字检测 5-旗帜名字检测
}

message CheckPlayerNameRt {
    int32 errorType = 2;
}

// msgType = 27
// 客户端 -> 服务器
// 改名
message ChangePlayerName {
    string name = 1;
    int64 ticket = 2; // 验证屏蔽字票据
}

message ChangePlayerNameRt {
    int32 errorCode = 1;
    string name = 2;
}

message SimplePlayerInfo {
    int64 playerId = 1;
    string name = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
    int32 photoProtoId = 6;
    int64 fightValue = 7;
    int32 jjcScore = 8;
    int32 areaNo = 9;
    int32 x = 10;
    int32 y = 11;
    int32 belongState = 12; // 所在联盟所属洲
    int32 vipLv = 13;
    PhotoViewInfo photoInfo = 14;
}

// msgType = 29
// 客户端 -> 服务器
// 批量查询玩家信息
message BatchPlayerSimpleInfoQuery {
    repeated int64 playerIds = 1;
}

message BatchPlayerSimpleInfoQueryRt {
    repeated SimplePlayerInfo playerInfo = 1;
}

// msgType = 30
// 客户端 -> 服务器
// VIP商店商品查询
message VipShipQuery {

}

message VipShipQueryRt {
    int32 refreshTime = 2; // 下次刷新的时间点
    repeated MerchantShipRecord records = 3;
}

// msgType = 31
// 客户端 -> 服务器
// VIP商店商品兑换
message VipShipExchange {
    int32 gridId = 1; // 格子Id
    int32 num = 2; // 购买数量
}

message VipShipExchangeRt {
}

// msgType = 32
// 客户端 -> 服务器
// 商船查询
message MerchantShipQuery {
}

message MerchantShipQueryRt {
    int32 refreshTime = 2; // 下次刷新的时间点
    repeated MerchantShipRecord records = 3;
    int32 friendDegree = 4; // 好感度
    int64 spendDegree = 5; // 每日消费总额
    int32 lastRefreshTime = 6; // 上次手动刷新的时间
    int32 leftTimes = 7; // 剩余可手动刷新次数
}

message MerchantShipRecord {
    int32 gridId = 1; // 格子Id
    int32 shipItemId = 2; // shipRefresh表Id
    int32 leftBuyNum = 3; // 剩余可兑换数量
    int32 giftPackageId = 4; // 当前这个格子是不是礼包模式
    int32 buyTime = 5; // 购买的时间 0表示没买过
}

// msgType = 33
// 客户端 -> 服务器
// 商船兑换
message MerchantShipExchange {
    int32 gridId = 1; // 格子Id
}

message MerchantShipExchangeRt {
    int32 friendDegree = 2;
    int64 spendDegree = 3;
    int32 giftPackage = 4; // 本次购买是否刷新出了个礼包 giftpackageid或者0
}

// msgType = 34
// 客户端 -> 服务器
// 领取商城好感度奖励
message GetShipFriendReward {
}

message GetShipFriendRewardRt {
}

// msgType = 35
// 客户端 -> 服务器
// 藏兵设置
message CaveConfig {
    int32 protoId = 1; // 藏兵配置的模板ID，主要是时间
    int32 holdKing = 2; // 保存君主，0：不保存，1：保存
    repeated CaveSoldier soldiers = 3; // 要保存的士兵信息
}

message CaveSoldier {
    int32 soldierType = 1; // 士兵类型
    int32 soldierNum = 2; // 士兵数
}

message CaveConfigRt {
}

// msgType = 36
// 客户端 -> 服务器
// 藏兵召回
message CaveCancel {

}

message CaveCancelRt {
}

// msgType = 40
// 客户端 -> 服务器
// 大地图外观显示
message ShowMap {
}

message ShowMapRt {
    repeated ShowMapInfo infos = 2; //显示信息
}

// msgType = 41
// 客户端 -> 服务器
// 查询城墙守军信息
message QueryCastleDefInfo {
}
message QueryCastleDefInfoRt {
    WalkForceInfo walkForceInfo = 3; // 派遣武将
}

//MsgType = 42
// 客户端 -> 服务器
// 设置城墙守军信息
message SetCastleDef {
    WalkForceInfo walkForceInfo = 2; // 派遣武将
}

message SetCastleDefRt {
}

// msgType = 43
// 客户端 -> 服务器
// 设置守城自动补兵
message SetCastleDefAutoRecover {
    int32 autoRecover = 1;
    int32 recoverNum = 2;
}

message SetCastleDefAutoRecoverRt {
}

message SkinInfo {
    int32 skinType = 1; // skinId
    int32 star = 2;
    int32 isUse = 3; // 0 未使用 1 使用
    int32 overTime = 4; // 过期时间
    int32 type = 5; // 类型
}

message SkinSimpleInfo {
    int32 skinId = 1;
    int32 star = 2;
    int32 anonymous = 3;
}

// msgType = 45
// 客户端 -> 服务器
// 切换皮肤
message ChangeSkin {
    int32 skinType = 1;
}

message ChangeSkinRt {
}

// msgType = 46
// 客户端 -> 服务器
// 强化皮肤
message StrengSkin {
    int32 skinType = 1; //皮肤类型
    int32 useNum = 2; //使用数量
}

message StrengSkinRt {
    int32 skintype = 2;
    int32 isSuccess = 3; //1 成功 0 失败
}

// msgType = 47
// 客户端 -> 服务器
// 游戏内钻石商店购买城堡皮肤
message BuySkin {
    int32 skinGetId = 1; // skinGet表ID
}

message BuySkinRt {
    SkinInfo skins = 1; // 皮肤信息
}

// msgType = 50
// 客户端 -> 服务器
// 建造建筑
message CreateInnerCity {
    int64 cityId = 1; // 城池ID
    int32 positionIndex = 2; // 建筑的坑位索引
    int32 innerCityType = 3; // 建筑类型
    int32 createType = 4; // 1正常 2秒建筑
    int32 x = 5;
    int32 y = 6;
}

message CreateInnerCityRt {
    int64 buildingId = 1;
}

// msgType = 51
// 客户端 -> 服务器
// 建筑位置解锁
message UnlockInnerCity {
    int64 cityId = 1; // 城池ID
    int64 innerCityId = 2; // 建筑实例唯一ID
}

message UnlockInnerCityRt {
    int32 errorCode = 2;
}

// msgType = 52
// 客户端 -> 服务器
// 建筑升级
message UpInnerCity {
    int64 cityId = 1; // 城池ID
    int64 innerCityId = 2; // 建筑实例唯一ID
    int32 lvUpType = 3; // 升级类型 1-普通  2-秒
}

message UpInnerCityRt {
}

// msgType = 53
// 客户端 -> 服务器
// 建筑取消升级
message CancelUpInnerCity {
    int64 cityId = 1; // 城池ID
    int64 innerCityId = 2; // 建筑实例唯一ID
}

message CancelUpInnerCityRt {
}

// msgType = 54
// 客户端 -> 服务器
// 快速购买临时队列时长
message QuickBuyExtendsQueue {
    int64 innerCityId = 1; // 本次购买是想尝试升级的建筑实例唯一ID
    int32 propsId = 2; // 选择购买的道具id
    int32 num = 3; // 选择购买的道具数量
}

message QuickBuyExtendsQueueRt {
}

// msgType = 55
// 客户端 -> 服务器
// 建筑取消拆除
message CancelDestroyInnerCity {
    int64 cityId = 1; // 城池ID
    int64 innerCityId = 2; // 建筑实例唯一ID
}

message CancelDestroyInnerCityRt {
}

// msgType = 58
// 客户端 -> 服务器
// 收集建筑资源
message CollectBuildingRes {
    repeated int32 buildingTypes = 2; // 建筑类型列表
}

message CollectBuildingResRt {
}

message InnerCityInfo {
    int32 innerCityType = 1; // 建筑类型
    int64 innerCityId = 2; // 建筑唯一ID
    int32 startTime = 3; // 开始时间
    int32 completeTime = 4; // 完成时间
    int32 state = 5; // 状态  1 正常 2 升级中 3 拆除中 4 锁定中
    int32 positionIndex = 6; // 建筑的坑位索引
    int32 lv = 7; // 建筑等级
    int64 helpId = 8; // 帮助ID
    int32 helpNum = 9; //帮助过的玩家人数
    int32 lastCollectTime = 10; //上次收集时间
    int32 eliminateTime = 11; // 三消战斗胜利时间,0表示没打过
}

message BuildingView {
    int32 buildingType = 1; // 建筑类型
    int32 viewState = 9; //视图状态
    int32 viewChangeTime = 10; //视图切换结束时间
    int32 nextViewState = 11; // 当前建筑视图结束后的下一个建筑视图
}

// msgType = 60
// 客户端 -> 服务端
// 立即刷新云游商人
message RefreshMerchantShipAtOnce {
}

message RefreshMerchantShipAtOnceRt {
}

// msgType = 61
// 客户端 -> 服务端
// 建造装饰性建筑
message CreateInnerCityDecorationObj {
    int64 cityId = 1;
    int32 buildType = 2;
    repeated IntToIntKV pos = 3; // 道具id非0时只能填1个
    int32 propProtoId = 4; // 道具id,普通建造填0
}
message CreateInnerCityDecorationObjRt {
    repeated InnerCityMapCell newObj = 1;
}

// msgType = 62
// 客户端 -> 服务端
// 拆除装饰性建筑
message DestroyInnerCityDecorationObj {
    int32 buildType = 1;
    repeated IntToIntKV pos = 3;
}
message DestroyInnerCityDecorationObjRt {
}

// msgType = 63
// 客户端 -> 服务端
// 移动内城建筑
message MoveInnerCityBuilding {
    int64 buildingId = 1;
    int32 newX = 2;
    int32 newY = 3;
}
message MoveInnerCityBuildingRt {
}

// msgType = 65
// 客户端 -> 服务端
// 移动装饰性建筑
message MoveInnerCityDecorationObj {
    int32 buildType = 1;
    repeated IntToIntKV remove = 2; // 移除的坐标
    repeated IntToIntKV create = 3; // 新建的坐标
}
message MoveInnerCityDecorationObjRt {
}

// 布局信息
message LayoutInfo {
    int64 id = 1; //
    repeated InnerCityMapCell cell = 2;
    int32 advancedDecorationSpecialProtoId = 3;
}
// msgType = 66
// 客户端 -> 服务端
// 查询布局
message QueryLayout {
}
message QueryLayoutRt {
    repeated LayoutInfo layout = 1;
}
// msgType = 67
// 客户端 -> 服务端
// 布局拷贝,会直接覆盖掉目的布局的全部内容
message CopyLayout {
    int64 srcLayout = 1; // 源布局,0表示当前地图
    int64 destLayout = 2; // 目的布局, 0表示新建
}
message CopyLayoutRt {
    int64 destLayoutId = 1; // 目的布局id
}
// msgType = 68
// 客户端 -> 服务端
// 编辑布局全量
message EditLayout {
    LayoutInfo layoutInfo = 1;
    int32 startOpeTime = 2; //前端记录玩家开始编辑布局的时间戳, 单位毫秒
}
message EditLayoutRt {
}
// msgType = 69
// 客户端 -> 服务端
// 应用布局
message ApplyLayout {
    int64 layout = 1;
}
message ApplyLayoutRt {
    int32 lackType = 1; // 缺失类型
    int32 lackProtoId = 2; // 缺失模板
    int64 lackId = 3; // 缺失 id
}

// msgType = 70
// 客户端 -> 服务端
// 将装饰建筑直接从建筑背包移到当前布局中
message InnerCityDecorationObjDistribute {
    int64 id = 1;
    int32 x = 2;
    int32 y = 3;
}

message InnerCityDecorationObjDistributeRt {
}

// msgType = 71
// 客户端 -> 服务端
// 将装饰建筑直接从当前布局中移到建筑背包
message InnerCityDecorationObjPackUp {
    repeated int64 buildingId = 2; // 注意必须是同一种装饰建筑
}

message InnerCityDecorationObjPackUpRt {
}

// msgType = 72
// 客户端 -> 服务端
// 布局功能开启
message LayoutFunctionOpen {
}

message LayoutFunctionOpenRt {
    repeated InnerCityMapCell newObj = 1;//新增装饰性建筑到建筑背包
}

// msgType = 81
// 客户端 -> 服务端
// 英雄委任委任或者撤销委任
message HeroAppointAppoint {
    int32 protoId = 1; // 英雄委任位置模板Id
    int64 heroId = 2; // 英雄id, 0表示移除该位置的英雄
}

message HeroAppointAppointRt {
}

// msgType = 82
// 客户端 -> 服务端
// 英雄委任一键委任
message HeroAppointAutoAppoint {
}

message HeroAppointAutoAppointRt {
    repeated LongToIntKV appoint = 1 [deprecated = true]; // 废弃
    repeated IntToLongKV before = 2; // 一键委任之前的全部数据,格式：格子模板id->英雄id,0表示空(可能会不发)，下同
    repeated IntToLongKV after = 3; // 一键委任之后的全部数据(当前数据),
}

message LuckyDiscountShopInfo {
    int32 actId = 1; // purchaseActivityProtoId
    int32 refLast = 2; // 最后1次刷新时间,初值为0
    int32 times = 3; // 今日已刷新次数
    repeated IntToIntKV item = 4; // 刷出的商品,luckyDiscountShopId->购买次数
}
// msgType = 90
// 客户端->服务端
// 幸运折扣商店查询
message LuckyDiscountShopQuery {
}
message LuckyDiscountShopQueryRt {
    LuckyDiscountShopInfo luckyDiscountShopInfo = 1;
}

// msgType = 91
// 客户端->服务端
// 幸运折扣商店刷新
message LuckyDiscountShopRefresh {
}
message LuckyDiscountShopRefreshRt {
    LuckyDiscountShopInfo luckyDiscountShopInfo = 1;
}

// msgType = 92
// 客户端->服务端
// 幸运折扣商店购买
message LuckyDiscountShopBuy {
    int32 itemId = 1;
}
message LuckyDiscountShopBuyRt {
}

// msgType = 103
// 客户端 -> 服务器
// 测试战斗
message TestSlgFight {
    int32 atkProtoId = 1;
    int32 defProtoId = 2;
}

message TestSlgFightRt {
    SlgFightReport slgReport = 6;
}

// msgType = 104
// 客户端 -> 服务器
// 详细战报请求
message GetDetailFightInfo {
    int64 playerId = 1;
    int64 reportId = 2; //战报ID
    int64 fightDetailId = 3; //战报详情Id
    int32 slgFight = 4; //是否slg战斗
}

message GetDetailFightInfoRt {
    int64 reportId = 2; //战报ID
    int32 reportType = 3;
    SlgFightReport slgReport = 6;
    string monsterFight = 7; // 三消魔物战json战报
}

message SlgFightReport {
    SlgFightGroup atkGroup = 1;
    SlgFightGroup defGroup = 2;
    int32 result = 3;
    repeated SlgFightRecord records = 4;
}

message SlgFightGroup {
    repeated SlgFightUnit units = 2;
}

message SlgFightUnit {
    int32 armyType = 1;
    repeated SlgHero heros = 5;
    repeated SlgSoldier soldiers = 6;
    repeated SlgSoldier leftSoldiers = 7;
}

message SlgFightRecord {
    int32 round = 1;
    repeated IntToLongKV atkSoldiers = 2; //兵种类型-当前数量
    repeated IntToLongKV defSoldiers = 3; //兵种类型-当前数量
}

message SlgReport {
    SlgGroup atkGroup = 1;
    SlgGroup defGroup = 2;
    int32 result = 3;
    repeated SlgRecord records = 4;
    int32 multiFight = 5;
    int32 isAtkCity = 6;
}

message SlgGroup {
    int32 groupId = 1;
    repeated SlgUnit units = 2;
    int64 wallHp = 3;
    int64 leftWallHp = 4;
}

message SlgUnit {
    int32 unitId = 1;
    int64 playerId = 2;
    string playerName = 3;
    string allianceName = 4;
    repeated SlgHero heros = 5;
    repeated SlgSoldier soldiers = 6;
    repeated SlgSoldier leftSoldiers = 7;
}

message SlgHero {
    int32 protoId = 1;
    int32 level = 2;
}

message SlgSoldier {
    int32 id = 1;
    int64 num = 4;
}

message SlgRecord {
    int32 round = 1;
    SlgRecordNormalAtk normalAtkRecord = 2;
    SlgRecordLaunchSkill launchSkillRecord = 3;
    SlgRecordDirectEffect directEffect = 4;
    SlgRecordBuffTakeEffect buffTakeEffect = 5;
}

message SlgRecordNormalAtk {
    int32 atkGroupId = 1;
    int32 defGroupId = 2;
    repeated IntToLongKV unitHurtNums = 3;
    int64 wallHurtNum = 4;
    int32 wallHurtRate = 5;
    int32 launchId = 6;
}

message SlgRecordLaunchSkill {
    int32 launchGroupId = 1;
    int32 skillId = 3;
    int32 launchId = 4; //技能发动Id,产生的效果由该Id关联
}

message SlgRecordDirectEffect {
    int32 launchGroupId = 1;
    int32 targetGroupId = 2;
    int32 skillEffectId = 3;
    int32 launchId = 4;

    SlgRecordDirectEffectHurt hurtEffect = 10; //伤害效果
    SlgRecordDirectEffectCure cureEffect = 11; //治疗效果
    SlgRecordDirectEffectReleaseBuff releaseBuffEffect = 12; //释放buff
    SlgRecordDirectEffectCleanBuff cleanBuffEffect = 13; //驱散buff
    SlgRecordDirectEffectChangeMorale changeMoraleEffect = 14; //增/减怒气
}

message SlgRecordDirectEffectHurt {
    repeated IntToLongKV unitHurtNums = 1;
    int64 wallHurtNum = 2;
    int32 wallHurtRate = 3;
}

message SlgRecordDirectEffectCure {
    repeated IntToLongKV unitCureNums = 1;
}

message SlgRecordDirectEffectReleaseBuff {
    int32 buffId = 1;
}

message SlgRecordDirectEffectCleanBuff {
    repeated int32 buffIds = 1;
}

message SlgRecordDirectEffectChangeMorale {
    int32 changeMorale = 1;
}

message SlgRecordBuffTakeEffect {
    int32 groupId = 1;
    int32 buffId = 2;
    int32 leftRound = 3; //剩余回合数
    int32 leftCount = 4; //剩余次数
    int32 launchId = 5;

    int32 launchUnitId = 10; //释放buff的unit组
    SlgHero launchSkillHero = 11; //释放buff的英雄

    repeated int64 paramater = 20; //参数
}

// msgType = 105
// 客户端 -> 服务器
// 获取英雄战战报记录（测试用）
message GetHeroFightReport {
    repeated HeroFightHeroInfo atkHeros = 1; //攻击方英雄信息
    repeated HeroInfoInOnceFight defHerosInOnceFight = 2; //攻击方英雄信息
}

//一场战斗中的英雄数据
message HeroInfoInOnceFight {
    repeated HeroFightHeroInfo heros = 1;
}

//英雄战英雄信息
message HeroFightHeroInfo {
    int32 protoId = 1; //英雄Id
    int32 lv = 2; //英雄等级
    int32 rank = 3; //英雄爵位
    int32 star = 4; //英雄星级
    int32 pos = 5; //英雄位置 (限定1-9)
    repeated int32 uniqueSkillList = 6; //大招技能列表（最多一个技能生效）
    repeated int32 activeSkillList = 7; //主动技能列表（最多只有前两个技能生效）
    repeated int32 passiveSkillList = 8; //被动技能列表
}


message GetHeroFightReportRt {
    repeated HeroFightReport report = 2; //战报内容
}

//英雄战报结构
message HeroFightReport {
    repeated FightEntity entitys = 1; //所有战斗单位
    repeated FightRecord records = 2; //战斗请求记录
    int32 fightResult = 3; //战斗结果
    repeated FightStatistics statistics = 4; //统计数据
    repeated OperateRecord operateRecords = 5; //操作记录
}

//操作记录
message OperateRecord {
    int32 frame = 1;
    int32 entityId = 2;
    int32 launchUniqueSkill = 3;
    int32 resetLaunchUniqueSkillFlag = 4;
}

//战斗统计
message FightStatistics {
    int32 recordKey = 1;
    int32 recordValue = 2;
}

//战斗实体对象
message FightEntity {
    int64 id = 1; //唯一ID
    repeated IntProperty intPropertys = 2; //int属性值
}

//int属性值
message IntProperty {
    int32 propertyType = 1; //属性类别
    int64 propertyValue = 2; //属性值
}

//array属性值
message ArrayProperty {
    int32 propertyType = 1; //属性类别
    repeated IntProperty intPropertys = 2; //int属性值
}

//战斗记录
message FightRecord {
    int32 frame = 1; //帧
    int64 senderId = 2; //发送者Id
    int64 receiverId = 3; //接受者Id
    FightRequest request = 4; //请求内容
}

//战斗行为请求
message FightRequest {
    int32 behaviorType = 1; //行为类别
    repeated IntProperty intPropertys = 2; //int属性值
    repeated ArrayProperty arrayPropertys = 4; //array属性值
    repeated FightEntity entitys = 5; //生成的战斗单位
}

// msgType = 106
// 客户端 -> 服务器
// 查看别人的分享战报
message GetShareBattle {
    int64 battleInfoId = 1; // 战报ID
    int64 worldId = 2; // 战报所在的服务器id
    int64 reportOwner = 3; // 拥有这份战报的玩家id
}

message GetShareBattleRt {
    BattleReportInfo reports = 2; // 战报内容
}

// msgType = 107
// 客户端 -> 服务器
// 查看区服的一些信息
message QueryServerInfo {
    int32 strategy = 1; // 1 查询所有， 2 根据worldId查询对应partition, 3 根据partition查询对应worldId

    repeated int64 worldId = 11;
    repeated int32 partitionId = 21;
}

message QueryServerInfoRt {
    map<int64, int32> worldIdPartitionMapping = 11;
    map<int32, int64> partitionWorldIdMapping = 12;
}

// msgType = 108
// 客户端 -> 服务器
// 切换世界视野
message ChangeWorldWatch {
    int64 worldId = 1; //世界Id
    int32 areaId = 2; //区服Id
}

message ChangeWorldWatchRt {
    ServerInfo serverInfo = 2;
}

// msgType = 109
// 客户端 -> 服务器
// 获取所有服务器信息
message GetAllServerInfo {
}

message GetAllServerInfoRt {
    repeated ServerInfo allServerInfo = 2;
}

// msgType = 110
// 客户端 -> 服务器
// 鼠标拖动刷新周围格子信息
message NewShowNearMap {
    int32 x = 1;
    int32 y = 2;
    int32 isForce = 3; //是否强制刷新(0-否 1-是)-客户端从战斗中切出来的时候会强制刷新,不然会因为坐标移动太小服务器不给刷
    int32 allOpenFog = 4; //是否需要全部开启的迷雾格子
}

message NewShowNearMapRt {
    repeated NewEveryLandInfo lands = 2; //格子信息
    repeated RemoveXY removeXY = 3;
    repeated WalkRobot walkRobots = 4; //当前格子有行军小人存在
    repeated WalkRobot removeWalks = 6; //删除的行军线
    repeated WalkRobot walkInfos = 5; // 以该点为起点或终点的行军线
    repeated IntToIntKV openFogs = 7; //开启的迷雾格子
}

message NewEveryLandInfo {
    int32 x = 1;
    int32 y = 2;
    int32 gridX = 3;
    int32 gridY = 4;
    int32 cellType = 5; // 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 11-召唤boss 12-尸体资源地 13-活动boss 14-属地 15-世界奇观 25-藏兵洞

    ResMineLandInfo resMineLandInfo = 6; // 资源矿地块信息
    BossLandInfo bossLandInfo = 7; //魔物地块信息
    CastleLandInfo castleInfo = 10; //城池地块信息
    WonderLandInfo wonderInfo = 11; //奇观地块信息
    ResPointLandInfo resPointLandInfo = 14; //资源点信息
    AllianceFortressLandInfo allianceFortressLandInfo = 15; // 联盟建筑地块信息
    WorldCheckPointLandInfo worldCheckPointLandInfo = 16; //关卡地块信息
    StationLandInfo stationLandInfo = 17; //废弃 驻扎地块信息
    MilitaryShelterLandInfo militaryShelterLandInfo = 18; //藏兵洞地块信息
    MapBuffLanInfo mapBuffLanInfo = 19; //地图buff点信息
    DockLanInfo dockLanInfo = 20; //码头信息
    MapNpcLanInfo mapNpcLanInfo = 21; //地图npc信息
    AllianceResLandInfo allianceResLandInfo = 22; //联盟资源点
    ResCollectLandInfo resCollectLandInfo = 23; //资源采集点
    RelicLandInfo relicLandInfo = 24; //遗迹巢穴信息
    MonsterPvpLandInfo monsterPvpLandInfo = 25; //新的魔物信息
    ArmyActivityLandInfo armyActivityLandInfo = 26; // 平判之战出怪点
    LordStationLandInfo lordStationLandInfo = 27; //领主部队地块信息
    HieronLandInfo hieronLandInfo = 28; //神庙地块信息
    WorldWonderLandInfo worldWonderLandInfo = 29; //奇观地块信息
    PollutedLandInfo pollutedLandInfo = 30; //污染之地信息
    CannonLandInfo cannonLandInfo = 31; // 日月王城炮塔
    SummonLandInfo summonLandInfo = 32; // 圣女
    FestivalRewardInfo festivalRewardInfo = 33; //七日boss
    NpcCityLandInfo npcCityLandInfo = 34; // npc城池信息
    BattleFieldWonderLandInfo battleFieldWonderLandInfo = 35; // 战场奇观
    BattleFieldCannonLandInfo battleFieldCannonLandInfo = 36; // 战场炮塔
    BattleFieldCityLandInfo battleFieldCityLandInfo = 37; // 战场城池
    AllianceMineLandInfo allianceMineLandInfo = 38; // 联盟超级矿
}

// 联盟超级矿
message AllianceMineLandInfo {
    AllianceMineSimpleInfo mineInfo = 1;
    repeated int64 farmIds = 2;

    int32 tileId = 100; // (客户端使用)
}


// 战场奇观
message BattleFieldWonderLandInfo {
    int32 wonderStatus = 1; //奇观状态 1、和平 2、备战 3、争夺
    int32 statusOverTime = 2; //奇观冒烟冒火状态结束时间

    int64 playerId = 11; // 归属的玩家ID
    string playerName = 12; // 城池归属 玩家名
    PhotoViewInfo photoInfo = 13; // 头像

    int64 allianceId = 21; // 联盟ID
    string allianceName = 22; // 联盟名称
    string allianceShortName = 23; // 联盟简称

    int32 occTime = 31; // 占领时间

    int32 tileId = 100; // (客户端使用)
}

// 战场炮塔
message BattleFieldCannonLandInfo {
    int32 wonderStatus = 1; // 状态 同奇观状态 1、和平 2、备战 3、争夺
    int32 cannonProtoId = 2; // 配置Id

    int64 playerId = 11; // 归属的玩家ID
    string playerName = 12; // 城池归属 玩家名
    PhotoViewInfo photoInfo = 13; // 头像

    int64 allianceId = 21; // 联盟ID
    string allianceName = 22; // 联盟名称
    string allianceShortName = 23; // 联盟简称

    int32 belongState = 31;
    int32 nextAtkTime = 32; // 下次炮击时间
    int32 atkCount = 33; // 已经发射的炮击次数
    int32 occTime = 34; // 占领时间

    int32 tileId = 100; // (客户端使用)
}

// 战场城池
message BattleFieldCityLandInfo {
    int32 cityProtoId = 2; // 配置Id

    int64 playerId = 11; // 归属的玩家ID
    string playerName = 12; // 城池归属 玩家名
    PhotoViewInfo photoInfo = 13; // 头像

    int64 allianceId = 21; // 联盟ID
    string allianceName = 22; // 联盟名称
    string allianceShortName = 23; // 联盟简称

    int32 tileId = 100; // (客户端使用)
}

// npc城池信息
message NpcCityLandInfo {
    int32 npcId = 1;
    int32 npcKilled = 2; // npc是否已击杀
    int32 state = 3; // 当前状态 0、和平中  2、战争中
    int32 stateOverTime = 4; // 状态结束时间 0代表无限

    int32 applyType = 11;
    repeated int32 chooseTime = 12;

    int64 belongAllianceId = 20; // 归属的联盟Id，npc为0
    string belongAllianceName = 21; // 联盟名称
    string belongAllianceShortName = 22; // 联盟简称

    int64 occupyingAllianceId = 40; // 正在占领的联盟id
    string occupyingAllianceName = 41; // 联盟名称
    string occupyingAllianceShortName = 42; // 联盟简称
    int32 occupyTime = 43;

    int32 tileId = 100; // (客户端使用)
}

// 日月王城炮塔地块信息
message CannonLandInfo {
    int32 wonderStatus = 1; // 状态 同奇观状态 1、和平 2、备战 3、争夺
    int32 cannonProtoId = 2; // 配置Id
    int64 playerId = 3; // 归属的玩家ID
    string playerName = 4; // 城池归属 玩家名
    int64 allianceId = 5; // 联盟ID
    string allianceName = 6; // 联盟名称
    string allianceShortName = 7; // 联盟简称
    int32 belongState = 10;
    int32 nextAtkTime = 11; // 下次炮击时间
    int32 atkCount = 12; // 即将发射的炮击次数 刚占领下来的时候是1
    int32 occTime = 13; // 占领时间

    int32 tileId = 100; // (客户端使用)
}

message PollutedLandInfo {
    int32 monsterType = 1; // 1-小怪 2-中怪 3-boss
    int32 slgMonsterId = 2;
    int32 eliminationMonsterId = 3;
    int32 x = 4;
    int32 y = 5;
    int64 leftHp = 6;
    int32 isSlgFight = 8;
    int32 pollutedProId = 9;
    int64 monsterId = 10; //怪物唯一id
    int32 tileId = 11;
    int32 isInArmy = 12;
    int64 pollutedId = 13;
    int64 totalHp = 14;
    int64 endTime = 15;
    int32 maxNormalMonsterNum = 16;
}

message WorldWonderLandInfo {
    int32 wonderId = 1; //奇观配置Id
    int32 occupyStartTime = 2; // 占领开始计算的时间
    int64 allianceId = 3; // 占领联盟ID
    string allianceName = 4; // 占领联盟名字
    int32 npcDie = 6; // 守军是否已经被击杀过
    int32 tileId = 8;
}

message HieronLandInfo {
    int32 status = 1; //神庙显示状态 0-未开启、 1-保护状态、 2-防御占领状态、 3-攻击占领状态
    int32 statusEndTime = 2; //状态结束时间
    string allianceName = 3; // 联盟名称
    string allianceShortName = 4; // 联盟简称
    int32 hieronId = 5;
    string firstReward = 6;
    int64 allianceId = 7;
    int32 tileId = 8;
    repeated IntToIntKV effects = 9; // 效果
    int64 soilderNum = 10; //士兵上线
}

// 平判之战出怪点
message ArmyActivityLandInfo {
    int64 allianceId = 1;
    string allianceName = 2;
    int32 chooseLv = 3;

    int32 tileId = 100; // (客户端使用)
}

// 联盟boss信息
message AllianceNewBossAreaInfo {
    int32 isOpen = 1;
    int32 fightNum = 2;
    int32 endTime = 3;
    int64 ticket = 4;
    int32 summonLevel = 5; //新加字段, 玩家个人已经召唤的联盟boss等级
}

//魔物信息
message MonsterPvpLandInfo {
    int64 id = 1;
    int32 bossId = 2;
    int32 overTime = 3; //消失时间
    int64 belongPlayerId = 4; // 所属玩家,0为无
    int32 teamId = 5;

    int32 tileId = 100; // (客户端使用)
}

//资源采集点信息
message ResCollectLandInfo {
    int32 protoId = 1;
    int64 resNum = 2;

    int64 farmPlayerId = 11;
    int64 farmAllianceId = 12;
    int64 farmGroupId = 13;
    repeated IntToStringKV rareReward = 14;

    int32 tileId = 100; // (客户端使用)
}

//遗迹巢穴地块信息
message RelicLandInfo {
    int64 id = 1;
    int32 protoId = 2;
    int32 overTime = 3; //消失时间
    int64 allianceId = 4;
    string shortName = 5;

    int32 tileId = 100; // (客户端使用)
}

//圣女地块信息
message SummonLandInfo {
    int64 id = 1;
    int32 protoId = 2;
    int32 overTime = 3; //消失时间
    int64 allianceId = 4;
    string shortName = 5;
    int64 playerId = 6;
    int32 attackNum = 7; //攻击人数
    int32 chainsNum = 8; //锁链数量
    repeated LongToIntKV atkRecord = 9;

    int32 tileId = 100; // (客户端使用)
}
message FestivalRewardInfo {
    int64 id = 1;
    int32 protoId = 2;
    int32 overTime = 3; //消失时间
    int64 allianceId = 4;
    string shortName = 5;
    int64 playerId = 6;
    int32 attackNum = 7; //攻击人数
    int64 bloodNum = 8; //boss血量
    repeated LongToIntKV atkRecord = 9;
    int64 fullNum = 10; //boss总血量

    int32 tileId = 100; // (客户端使用)
}
//联盟资源点信息
message AllianceResLandInfo {
    int32 allianceResId = 1;

    int64 allianceId = 11;
    string allianceShortName = 12;
    int32 belongState = 13; // 归属州

    int32 tileId = 100; // (客户端使用)
}

//地图npc信息
message MapNpcLanInfo {
    int32 mapNpcId = 1; //地图npcId
    int32 nextRefTime = 2; //下次刷新时间

    int32 explored = 3; // 是否探索过 0 - 否  1 - 是
    int32 farmStartTime = 4;
    int32 farmEndTime = 5;
    int32 taskStatus = 6; // 任务状态

    int64 remainHp = 7;
    int64 totalHp = 8;

    int32 tileId = 100; // (客户端使用)
}

//地图码头信息
message DockLanInfo {
    int32 dockId = 1; //码头配置Id
    int32 inDockNum = 2; //进驻码头的部队数量
    repeated DockShipInfo shipInfo = 3; //船只信息

    int32 tileId = 100; // (客户端使用)
}

//码头船只信息
message DockShipInfo {
    int64 groupId = 4;
    int64 playerId = 5; // 玩家ID
    string playerName = 6; // 城池归属 玩家名
    int32 photoId = 7; //玩家头像id
    int64 allianceId = 8; // 联盟ID
    string allianceName = 9; // 联盟名称
    string allianceShortName = 10; // 联盟简称
    int32 belongState = 11; // 归属州
}

//地图buff点信息
message MapBuffLanInfo {
    int32 mapBuffId = 1; // buff点配置Id
    int32 refTime = 3; //刷新时间
    int32 farmed = 4; //是否已经采集过

    int32 farmStartTime = 5; //采集开始时间
    int32 farmEndTime = 6; //采集结束时间
    int64 playerId = 7; // 玩家ID
    int64 allianceId = 8; // 联盟ID
    int64 groupId = 9; //行军组id

    int32 iconType = 10;
    int32 iconOverTime = 11;

    int32 runFromX = 15;
    int32 runFromY = 16;

    int32 tileId = 100; // (客户端使用)
}

//藏兵洞地块信息
message MilitaryShelterLandInfo {
    int64 playerId = 3; // 归属的玩家ID
    int64 groupId = 4; // 部队id
    int32 shelterEndTime = 5; // 藏兵结束的时间
    string playerName = 6; // 城池归属 玩家名
    int32 photoId = 7; //玩家头像id
    int64 allianceId = 8; // 联盟ID
    string allianceName = 9; // 联盟名称
    string allianceShortName = 10; // 联盟简称
    int32 belongState = 11; // 归属州

    int32 tileId = 100; // (客户端使用)
}

//领主驻扎部队信息
message LordStationLandInfo {
    LordStationForceInfo forceInfo = 1;

    int32 forceNum = 2; //地块上的部队数量，包含上面的部队

    int32 tileId = 100; // (客户端使用)
}

message LordStationForceInfo {
    PlayerNameInfo playerInfo = 1;
    int64 groupId = 2; //行军组Id
    int64 stationTime = 3; //开始驻扎时间

    int32 runFromX = 15;
    int32 runFromY = 16;
    int32 lordState = 17;
    int32 inEliminate = 18; // 处于三消中
    int32 informationId = 19;
    int32 currentSkinId = 20; // 领主皮肤
}

//驻扎地地块信息
message StationLandInfo {
    int64 playerId = 1; // 归属的玩家ID
    string playerName = 2; // 城池归属 玩家名
    PhotoViewInfo photoInfo = 4; // 头像
    int64 allianceId = 5; // 联盟ID
    string allianceName = 6; //联盟名字
    string allianceShortName = 7; // 联盟简称
    int32 belongState = 8; //归属州
    int64 groupId = 9; //行军组Id
    int32 nextActionTime = 10; //下次行动时间
    int32 buffId = 11; //部队采集到的BuffId
    int32 buffOverTime = 12; //buff消失时间

    int32 iconType = 13;
    int32 iconOverTime = 14;

    int32 runFromX = 15;
    int32 runFromY = 16;

    int32 wipeOut = 17; //是否已经全军覆没
    int32 nextDecisionTime = 18; //下次决策行动时间
    int64 killPlayerId = 20; // 击杀部队的玩家Id
    string killPlayerName = 21; // 击杀部队的玩家名
    int32 killPlayerPhotoId = 22; //击杀部队的玩家头像id
    int64 killPlayerAllianceId = 23; // 击杀部队的玩家联盟ID
    string killPlayerAllianceName = 24; // 击杀部队的玩家联盟名称
    string killPlayerAllianceShortName = 25; // 击杀部队的玩家联盟简称
    int32 killPlayerBelongState = 26; //击杀部队的玩家势力

    int32 runType = 30;
    int32 queueId = 31;

    int32 tileId = 100; // (客户端使用)
}

// 关卡地块信息
message WorldCheckPointLandInfo {
    int32 atkOverTime = 1; //攻击结束时间
    int64 playerId = 3; // 归属的玩家ID
    string playerName = 4; // 城池归属 玩家名
    int64 allianceId = 5; // 联盟ID
    string allianceName = 6; // 联盟名称
    string allianceShortName = 7; // 联盟简称
    int32 haveNpc = 8; //是否与NPC 0否 1是
    int32 status = 9; //状态 1、和平 3、冒烟 4、冒火
    int32 statusOverTime = 10; //奇观冒烟冒火状态结束时间
    int64 firstOccupyAllianceId = 11; //首次占领的联盟Id
    int32 onWord = 12; // 建筑是否生效 0-否 1-是
    int32 belongState = 13;

    AllianceFortressLandInfo allianceFortressLandInfo = 21; // 老的占领者信息

    int32 tileId = 100; // (客户端使用)
}

// 联盟据点地块信息
message AllianceFortressLandInfo {
    string allianceName = 1;
    string allianceShortName = 2;
    AllianceBuildVo allianceBuildVo = 3; // 这个不给部队
    int32 flagColor = 4;
    int32 flagStyle = 5;
    int32 flagEffect = 6;
    int32 belongState = 7;
    int32 tpFlag = 8; // 是否是该联盟的回城点
    AllianceNewBossAreaInfo bossInfo = 9;
    int32 lastInviteTime = 10; // 上次发送邀请时间
    AllianceColosseumInfo colosseumInfo = 11; // 召唤的联盟斗兽场boss信息

    int32 tileId = 100; // (客户端使用)
}

// 资源点信息
message ResPointLandInfo {
    int32 resPointId = 1; // 资源点配置Id
    int32 canFarm = 2; //能否采集
    int32 disappearTime = 3; //资源地消失时间
    int32 farmed = 4; //是否已经采集过

    int32 farmStartTime = 5; //采集开始时间
    int32 farmEndTime = 6; //采集结束时间
    int64 playerId = 7; // 玩家ID
    int64 allianceId = 8; // 联盟ID
    int64 groupId = 9; //行军组id

    int32 iconType = 10;
    int32 iconOverTime = 11;

    int32 runFromX = 15;
    int32 runFromY = 16;

    int32 currentSkinId = 17;

    int32 tileId = 100; // (客户端使用)
}

// 魔物地块信息
message BossLandInfo {
    int32 bossId = 1; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
    int64 bossHp = 2; // 血量 (合并allianceBossHp字段,根据BossId计算血量，再计算比例)
    int32 disappearTime = 3; // 召唤类魔物消失时间（取代allianceOverTime）
    int32 unlockTime = 4; // 魔物解锁时间
    int64 playerId = 5; // 归属的玩家ID
    string playerName = 6; // 城池归属 玩家名
    int32 photoId = 7; //玩家头像id
    int64 allianceId = 8; // 联盟ID
    string allianceName = 9; // 联盟名称
    string allianceShortName = 10; // 联盟简称
    int32 belongState = 11;
    int64 uniqueId = 12;
    repeated AutoHurtPlayerInfo players = 13;
    int32 tileId = 100; // (客户端使用)
}

// 自动猎杀魔物玩家信息
message AutoHurtPlayerInfo {
    int32 fromX = 1; // 起点
    int32 fromY = 2; // 起点
    int64 groupId = 3; // 行军组id
    int64 playerId = 4; // 玩家id
    int64 allianceId = 5; // 联盟ID
}

// 玩家城池地块信息
message CastleLandInfo {
    int64 playerId = 1; // 归属的玩家ID
    string playerName = 2; // 城池归属 玩家名
    int64 allianceId = 3; // 联盟ID
    string allianceName = 4; // 联盟名称
    string allianceShortName = 5; // 联盟简称
    int32 lv = 6; // 等级
    int32 currentPos = 7; //当前官职
    int32 castleStatus = 8; //城堡状态 1、和平  3、冒烟 4、冒火
    repeated IntToIntKV coverOverTime = 9; //城堡保护罩结束时间
    int32 skinType = 11; //皮肤类型
    int32 skinLv = 12; //皮肤等级
    int32 jjcScore = 13;
    int32 showFlag = 14; // 0 不显示  1 显示
    int32 fightState = 15; //战斗状态 0、不在战斗中 1、等待战斗确认 2、战斗中
    int32 fightStateOverTime = 16; //战斗状态结束时间
    LanFormat flagName = 17; // 旗帜内容
    int32 flagReadType = 18; // 读取方式  1-读lan 2-直接读内容
    int64 flagUpdatePlayerId = 19; // 修改旗帜玩家Id
    repeated int32 designation = 20; //称号
    int32 mainPlayerFlag = 21; // 我是否是盟主0-否 1-是
    int32 belongState = 22;
    int32 tpFlag = 23; // 是否是该联盟的回城点
    PhotoViewInfo photoInfo = 24; // 头像
    int32 nowUnitTaskId = 25; // 章节任务进度
    int32 noWalkBuffOverTime = 26; // 禁锢buff的结束时间
    int64 power = 27; // 战力
    map<int32, SkinSimpleInfo> usingSkin = 30; // 类型， 皮肤信息

    int32 tileId = 100; // (客户端使用)
}

// 奇观地块信息
message WonderLandInfo {
    int32 wonderStatus = 1; //奇观状态 1、和平 2、备战 3、争夺
    int32 statusOverTime = 2; //奇观冒烟冒火状态结束时间
    int64 playerId = 3; // 归属的玩家ID
    string playerName = 4; // 城池归属 玩家名
    int64 allianceId = 5; // 联盟ID
    string allianceName = 6; // 联盟名称
    string allianceShortName = 7; // 联盟简称
    int32 haveNpc = 8; //是否与NPC 0否 1是
    int32 onWord = 9; // 建筑是否生效 0-否 1-是
    int32 belongState = 10;
    int32 tpFlag = 11; // 是否是该联盟的回城点
    int32 npcDie = 14; // 守军是否已经被击杀过
    int32 occTime = 15; // 占领时间

    AllianceFortressLandInfo allianceFortressLandInfo = 21; // 老的占领者信息

    int32 tileId = 100; // (客户端使用)
}

//资源矿
message ResMineLandInfo {
    int32 resId = 1;
    int32 status = 2; //状态 1、和平 2、争夺 3、冒烟 4、冒火
    int32 statusOverTime = 3; //奇观冒烟冒火状态结束时间
    int64 playerId = 4; // 归属的玩家ID
    string playerName = 5; // 城池归属 玩家名
    int64 allianceId = 6; // 联盟ID
    string allianceName = 7; // 联盟名称
    string allianceShortName = 8; // 联盟简称
    int32 haveNpc = 9; //是否与NPC 0否 1是
    int32 onWord = 10; // 建筑是否生效 0-否 1-是
    int32 belongState = 11; // 所在联盟所属洲

    AllianceFortressLandInfo allianceFortressLandInfo = 21; // 老的占领者信息

    int32 tileId = 100; // (客户端使用)
}

message CellPrisonInfo {
    int32 prisonCount = 1; // 被关玩家数量
    int64 rewardGold = 2; // 总赏金 - 废弃
    string rewardSum = 3; // 总的赏金
    repeated int64 prisonedPlayerId = 4;
}

// msgType = 111
// 客户端 -> 服务器
// 查询地块
message QueryCell {
    int32 posX = 1;
    int32 posY = 2;
}

message QueryCellRt {
    int32 cellType = 2; //地块类型 1、采集地 2-普通魔物 4、玩家城 5、奇观  6、占领地 9、据点 11-召唤魔物 12-尸体资源地（暂无） 15-世界奇观 25-藏兵洞
    CastleCell castle = 3; //玩家城信息
    FarmCell farm = 4; //采集信息
    OccupyCell occupy = 5; //占领信息
    WonderCell wonderCell = 7; //奇观信息
    CallBossCell callBossCell = 9; //召唤魔物信息
    ActivityBossCell activityBossCell = 10; //活动魔物信息
    AllianceFortressLandInfo allianceFortressLandInfo = 14; // 联盟建筑地块信息
    WorldCheckPointCell worldCheckPointCell = 15; //关卡地块信息
    ResCell resCell = 16; //资源矿地块信息
    int32 callBossFightCount = 17; // 召唤魔物的话这个字段表示我战斗了的次数
    ResCollectCell resCollectCell = 20; //资源田
    LordForceCell lordForceCell = 21; //领主部队地块信息
    HieronCell hieronCell = 22; // 神庙信息
    WorldWonderCell worldWonderCell = 23;
    ResMonsterCell resMonsterCell = 24; // 资源怪Npc信息
    CannonCell cannonCell = 25; // 日月王城炮塔信息
    NpcCityCell npcCityCell = 26; // npc城池信息
    AllianceMineCollectCell allianceMineCollectCell = 27; // 联盟超级矿
}

message AllianceMineCollectCell {
    AllianceMineSimpleInfo minfInfo = 1;
    int64 allianceId = 2;
    string allianceName = 3;    // 所属联盟名
    int32 overTime = 4;         // 矿的消失时间

    int64 weight = 11;          // 自己部队负重
    int64 farmedNum = 12;       // 自己已采集到的量
    int32 farmSpeed = 13;       // 自己采集速度/h
    int32 farmBalanceTime = 14; // 自己采集上次结算时间

    repeated MassForce farmForces = 21; // 采集部队信息
    map<int64, CollectSimpleForceInfo> farmForceMap = 22;

    message CollectSimpleForceInfo {
        int64 weight = 1;           // 部队负重
        int64 farmedNum = 2;        // 已采集到的量
        int32 farmSpeed = 3;        // 采集速度/h
        int32 farmBalanceTime = 4;  // 采集上次结算时间
    }
}

// npc城池信息
message NpcCityCell {
    int32 npcCityId = 1; // 配置id
    AllianceOccupyInfo firstOccupyInfo = 2; // 首占信息[Deprecated]
    repeated WorldPlayerRankInfo killRankInfo = 3; // 首杀信息
    repeated WorldPlayerRankInfo tearDownRankInfo = 4; // 拆迁信息[Deprecated]
    AllianceOccupyInfo occupyingInfo = 5; // 正在占领的联盟信息
    AllianceOccupyInfo belongInfo = 6; // 归属的联盟信息

    int32 applyType = 11;
    repeated int32 chooseTime = 12;
    int32 state = 13; // 当前状态 0、免战 2、攻打中
    int32 stateOverTime = 14; // 状态结束时间 0代表无限

    repeated NeutralCityQueryRt.NeutralCityRegisterInfo registerVO = 15; // 我报名的
}

// 联盟占领信息
message AllianceOccupyInfo {
    int64 allianceId = 1; //联盟id
    string shortName = 2; //联盟名字
    string name = 3; //联盟名字
    int32 lan = 4; // 联盟语言
    int32 flagColor = 5; // 联盟旗帜的颜色
    int32 flagStyle = 6; // 联盟旗帜的样式
    int32 flagEffect = 7; // 联盟旗帜图案
    int32 occupyTime = 8; //时间
}

// 日月王城炮塔信息
message CannonCell {
    int32 cannonProtoId = 1; // 配置Id
    int32 wonderStatus = 2; // 状态  同奇观状态
    PlayerNameInfo belongInfo = 3; //奇观归属者信息
    int64 groupId = 4; //占领的奇观行军组Id
    int64 commandPlayerId = 5; //指挥官玩家Id
    int32 maxReinforceNum = 6; //最大集结数量
    repeated MassForce forces = 7; //同联盟玩家，可查询到集结部队信息
    int32 nextAtkTime = 8; // 下次炮击时间
    int32 atkCount = 9; // 即将发射的炮击次数 刚占领下来的时候是1
    int32 occTime = 10; // 占领时间
}

//玩家名称信息
message PlayerNameInfo {
    int64 playerId = 1; //玩家ID
    string playerName = 2; //玩家名称
    int64 allianceId = 3; //联盟ID
    string allianceName = 4; //联盟名称
    string allianceShortName = 5; //联盟简称
    int32 playerPhoto = 6; //玩家头像
    int32 posX = 7; //城位置X
    int32 posY = 8; //城位置Y
    int32 flagColor = 9; //旗帜的颜色模版ID
    int32 flagStyle = 10; //旗帜的样式模版ID
    int32 flagEffect = 11; //旗帜的图案模版ID
    int32 mainHeroProtoId = 12; //领主武将模板Id
    int64 worldId = 13; // 玩家所在世界服ID
    int32 areaNo = 14; // 玩家所在区服ID
    int64 allianceWorldId = 15; // 玩家联盟所在世界服ID
    int32 allianceAreaNo = 16; // 玩家联盟所在区服ID
    int32 allianceLan = 17; //联盟语言
    int32 jjcScore = 18;
    int64 power = 19; //实力
    int32 belongState = 20; // 所在联盟所属洲
    PhotoViewInfo photoInfo = 21; // 头像
    int64 kingLv = 22; //指挥官等级
}

message LordForceCell {
    repeated LordStationForceInfo forces = 1;
}

message ResCollectCell {
    int32 protoId = 1;
    int64 resNum = 2;

    int64 groupId = 10; //采集部队Id
    int64 weight = 11; //部队负重
    int64 farmedNum = 12; //已采集到的量
    int32 farmSpeed = 13; //采集速度/h
    int32 farmBalanceTime = 14; //采集上次结算时间

    int64 belongAllianceId = 20; //地块归属联盟
    string belongAllianceShortName = 21; //地块归属联盟名字
    PlayerNameInfo farmPlayerInfo = 22; //采集者信息
}

message ResCell {
    int32 resId = 1; //资源矿Id
    int32 status = 2; // 资源矿状态 1、和平 2、争夺 3、冒烟 4、冒火
    int32 warStartTime = 3; // 开始争夺时间，和平时期指示下次争夺时间
    int32 warOverTime = 4; // 结束争夺时间，跟随部队占领
    PlayerNameInfo belongInfo = 6; //资源矿归属者信息
}

//关卡地块信息
message WorldCheckPointCell {
    int32 protoId = 1; //模板Id
    int32 atkOverTime = 2; //攻击结束时间
    PlayerNameInfo belongInfo = 6; //奇观归属者信息
}

//召唤魔物信息
message CallBossCell {
    string playerName = 1; // 玩家名
    string allianceShortName = 2; // 联盟简称
    int32 bossId = 8; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
    int64 bossHp = 9; // 血量 (合并allianceBossHp字段,根据BossId计算血量，再计算比例)
    int32 disappearTime = 10; // 召唤类魔物消失时间（取代allianceOverTime）
    int32 unlockTime = 11; // 魔物解锁时间
    int32 playerPhotoId = 13; // 玩家头像
}

//活动魔物信息
message ActivityBossCell {
    int32 bossId = 8; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
    int64 bossHp = 9; // 血量 (合并allianceBossHp字段,根据BossId计算血量，再计算比例)
    int32 disappearTime = 10; // 活动魔物消失时间（取代allianceOverTime）
    int32 unlockTime = 11; // 魔物解锁时间

    repeated WalkGroup groups = 20; //正在打魔物的部队
}

//玩家城信息
message CastleCell {
    PlayerNameInfo info = 1; //玩家名称信息
    int32 vipLv = 6; //vip等级
    int32 photoId = 7; //头像ID
    int64 power = 8; //实力值
    int64 killer = 9; //击杀数
    int32 buildingLv = 10; //大使馆等级
    int32 alliancePos = 11; //联盟阶级
    int32 office = 12; //国家官职
    int64 revengeTargetId = 13; // 复仇对象的玩家Id
    int32 flagLockOverTime = 14; // 旗帜锁定期限
}

//采集信息
message FarmCell {
    PlayerNameInfo info = 1; //玩家名称信息
    int64 groupId = 2; //行军组Id
    int32 leftPickUpCount = 3;
}

//占领信息
message OccupyCell {
    CastleCell castle = 1; //玩家城信息
    int64 groupId = 2; //行军组Id
    repeated HeroForWalk heros = 3; //英雄信息
    repeated SoliderForWalk soliders = 4; //士兵信息
}

//奇观信息
message WonderCell {
    int32 wonderId = 1; //奇观配置Id
    int32 wonderStatus = 2; // 奇观状态 1、和平 2、争夺 3、冒烟 4、冒火
    int32 warStartTime = 3; // 开始争夺时间，和平时期指示下次争夺时间
    int32 warOverTime = 4; // 结束争夺时间，跟随部队占领
    int32 peaceTimeLength = 5; // 和平时间长度
    PlayerNameInfo belongInfo = 6; //奇观归属者信息
    int64 groupId = 7; //占领的奇观行军组Id
    int64 commandPlayerId = 8; //指挥官玩家Id
    int32 maxReinforceNum = 9; //最大集结数量
    repeated MassForce forces = 10; //同联盟玩家，可查询到集结部队信息
    int32 amnestyCount = 11; //剩余天下大赦次数
    int32 haveOccupyNum = 12; //已占领奇观数
    int32 npcDie = 13; // 是否有NPC
}

// 资源怪npc信息
message ResMonsterCell {
    int32 unitId = 1;
    int32 nowFight = 2;
    int32 chance = 3;
    int32 overTime = 4;
    int32 robId = 5; // 坑位
    int32 buyChance = 6; // 今日购买次数
}

//奇观信息
message WorldWonderCell {
    int32 wonderId = 1; //奇观配置Id
    int32 occupyStartTime = 2; // 占领开始计算的时间
    int64 allianceId = 3; // 占领联盟ID
    string allianceName = 4; // 占领联盟名字
    int32 applyFlag = 5; // 我们联盟是否报名
    int32 npcDie = 6; // 守军是否已经被击杀过
}

message HieronCell {
    int32 hieronId = 1; //神庙配置Id
    int32 hieronStatus = 2; // 神庙显示状态 0-未开启、 1-保护状态、 2-防御占领状态、 3-攻击占领状态、 4-空闲状态
    int32 hieronStatusEndTime = 3; // 状态结束时间
    PlayerNameInfo belongInfo = 6; //神庙归属者信息
    int64 groupId = 7; //占领的神庙行军组Id
    int32 maxReinforceNum = 9; //最大集结数量
    repeated MassForce forces = 10; //同联盟玩家，可查询到集结部队信息
    repeated IntToIntKV effects = 11; // 效果
    string firstReward = 12; // 首次占领的奖励
    string mainName = 13; // 车头的名字
    string allianceName = 14; // 占领联盟名字
}

//奇观npc信息
message WonderNpcSoliderInfo {
    int32 unitArrayId = 1;
    repeated IntToLongKV npcHp = 2; //位置-血量
    int64 power = 3; //实力
}

// msgType = 112
// 客户端 -> 服务器
// 查询联盟所有的行军线
message QueryAllianceWalkLine {
}

message QueryAllianceWalkLineRt {
    repeated WalkRobot walkInfos = 2;
}

// msgType = 113
// 客户端 -> 服务器
// 领取任务奖励
message GetTaskReward {
    int64 taskId = 1; //任务ID
}

message GetTaskRewardRt {
    int64 taskId = 2; //任务ID
}

// msgType = 114
// 客户端 -> 服务器
// 完成某些无关紧要的任务,收到此消息就算完成
message TaskGossipFinish {
    int32 gossipType = 1; // 区分的类型
}

message TaskGossipFinishRt {
}

// msgType = 119
// 客户端 -> 服务器
// 新手引导
message GuideFin {
    int32 type = 1; // 新手引导类型(0-强制引导  1-被动引导)
    int32 guideId = 2; // 被动触发的新手引导模板id
}

message GuideFinRt {
    int32 type = 2; // 新手引导类型(0-强制引导  1-被动引导)
    int32 guideId = 3; // 被动触发的新手引导模板id
}

// msgType = 120
// 客户端 -> 服务器
// 领取章节任务奖励
message GetUnitTaskReward {
    int32 unitTaskId = 1; // 章节ID
}
message GetUnitTaskRewardRt {
    int32 unitTaskId = 2; // 章节ID
    string rewards = 3; // 领取到的全部奖励含任务奖励和章节自身的奖励
}

// msgType = 121
// 客户端 -> 服务器
// 剧情引导
message StoryStepChange {
    int32 storyStepId = 1; // 剧情ID切换
}

message StoryStepChangeRt {
    int32 storyStepId = 2;
}

// msgType = 130
// 客户端 -> 服务器
// 联盟章节任务查询
message AllianceUnitTaskQuery {
}

message AllianceUnitTaskQueryRt {
    int32 allianceCurrentUnit = 1; // 联盟当前所在章
    int32 allianceCurrentUnitFinish = 2; // 联盟当前章是否完成(完成最后1章时才会非0)
    int64 allianceUnitTaskProcess = 3; // 联盟当前章节任务进度

    repeated AllianceUnitRewardRec allianceUnitRewardRec = 11; // 已经发放奖励的联盟章节
    int32 noticeUnit = 12; // 应当显示奖励特效的章节,0为无需显示,查询一次后会直接清零
}

message AllianceUnitRewardRec {
    int32 protoId = 1; // 章节模板id
    int32 step = 2; // 发奖时玩家在联盟中的职位模板id
}

// msgType = 140
// 客户端 -> 服务端
// 盟主征途大奖领取
message AllianceJourneyDraw {
}
message AllianceJourneyDrawRt {
    int32 allianceJourneyDraw = 1; // 盟主征途大奖领取时间
}

// msgType = 175
// 客户端 -> 服务器
// 出售装备
message SellEquip {
    repeated SellVo sellVos = 1; // 要卖掉的
}

message SellVo {
    int64 equipId = 1; // 要卖掉的ID
    int64 equipNum = 2; // 要卖掉的数量
}

message SellEquipRt {
}

// msgType = 176
// 客户端 -> 服务器
// 回购装备
message RestoreEquip {
    int64 equipId = 1; // 要回购的装备的ID
}

message RestoreEquipRt {
}

// msgType = 183
// 客户端 -> 服务器
// 合成道具
message ItemCompound {
    int32 compoundPropId = 1; // 合成表ID
    int32 num = 3; // 合成个数
}

message ItemCompoundRt {
}

// msgType = 184
// 客户端 -> 服务器
// 拆分道具
message ItemSplit {
    int32 compoundPropId = 1; // 拆分表的ID
    int32 num = 2; // 拆分个数
}

message ItemSplitRt {
}

// msgType = 200
// 客户端 -> 服务端
// 查看玩家标签
message PlayerTagSet {
    int32 type = 1; //0中立(等同于删除),1敌对,2友好
    int64 playerId = 2;
}
message PlayerTagSetRt {
}

// msgType = 201
// 客户端 -> 服务端
// 设置联盟标签
message AllianceTagSet {
    int32 type = 1; //0中立(等同于删除),1敌对,无友好
    int64 allianceId = 2;
}
message AllianceTagSetRt {
}

// msgType = 230
// 客户端 -> 服务端
// 新建筑学院升级
message BuildingSchoolUpgrade {
    int32 tecId = 1;
}
message BuildingSchoolUpgradeRt {
}

// msgType = 231
// 客户端 -> 服务端
// 新建筑炼金所升级
message BuildingAlchemyUpgrade {
    int32 tecId = 1;
}
message BuildingAlchemyUpgradeRt {
}

// msgType = 232
// 客户端 -> 服务端
// 新建筑元素塔升级
message BuildingElementUpgrade {
    int32 tecId = 1;
}
message BuildingElementUpgradeRt {
}

// msgType = 240
// 客户端 -> 服务端
// 定时礼包查询
message TimedPackageQuery {
}

message TimedPackageQueryRt {
    repeated int32 draw = 1; // 今日已领取的全部时间戳,秒
}

// msgType = 241
// 客户端 -> 服务端
// 定时礼包领取
message TimedPackageDraw {
}

message TimedPackageDrawRt {
    repeated int32 draw = 1; // 今日已领取的全部时间戳,秒
}

// msgType = 295
// 客户端 -> 服务器
// 消息一键已读
message ReadAllChatMsg {
}

message ReadAllChatMsgRt {
}

// msgType = 296
// 客户端 -> 服务器
// 删除陌生人的聊天窗口和聊天消息
message DelStrangerChat {
    int64 playerId = 1; // id
}

message DelStrangerChatRt {
}

// msgType = 297
// 客户端 -> 服务器
// 打开陌生人的聊天窗口
message OpenNewChatWindow {
    int64 playerId = 1; // id
}

message OpenNewChatWindowRt {
}

// msgType = 298
// 客户端 -> 服务器
// 切换聊天窗口
message ChangeChatWindow {
    int64 playerIdNew = 1; // new私聊id
    int64 roomIdNew = 2; // new聊天室id
}

message ChangeChatWindowRt {
}

// msgType = 299
// 客户端 -> 服务器
// 修改聊天室信息
message ChangeRoomInfo {
    int64 roomId = 1; // 聊天室id
    string newName = 2; // 新名字
    int64 ticket = 3; // 验证屏蔽字票据
}

message ChangeRoomInfoRt {
    int64 roomId = 2; // 聊天室id
    string newName = 3; // 新名字
}

// msgType = 300
// 客户端 -> 服务器
// 发送GM命令
message SendChat {
    int32 type = 1; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
    int64 playerId = 2; // 聊天对象
    string message = 3; // 聊天对象内容
    int32 messageType = 4; // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭 7-分享坐标
}

message SendChatRt {
    string rtMsg = 1;
}

// msgType = 301
// 客户端 -> 服务器
// 发送聊天信息
message SendChatMsg {
    int32 type = 1; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
    int64 playerId = 2; // 聊天对象
    int64 easyFightInfoId = 6; //简单战报id
    int64 roomId = 9; // 聊天室id

    int32 messageType = 50; // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭 7-坐标 8-系统通知 9-运输 10-五古龙活动通知 11-英雄训练邀请 12-请求帮助资源线 13-魔物猎杀排行
    Notice message = 51; // 内容
    int64 ticket = 52; // 验证屏蔽字票据

    SimpleMassInfo massInfo = 100; // 集结信息

    SharePosInfo sharePosInfo = 102; //分享的位置信息

    SimplePollutedArmyInfo pollutedArmyInfo = 103; // 污染之地发起队伍消息
}

message SendChatMsgRt {
    string errorLan = 1;
    int32 errorCode = 11;
    int64 banEndTime = 12;
    int64 coolEndTime = 13;
}

// msgType = 302
// 客户端 -> 服务器
// 不需要任何链接状态的一些查询
message NoSessionQuery {
    int32 type = 1; // 1:查询区服，2:查询角色[roles], 4:查询角色[findRoles] ， 组合做或运算

    string sdkType = 21;
    string sdkOpenId = 22;

    string openId = 41;
    string adSetChannel = 42; // 注册广告渠道
    int32 lanType = 43; // 注册语言类型 @Deprecated
    int32 clientType = 44; // 注册设备
    int32 timezone = 45; // 时区(要转换成整数，如孟买5.5则取整=5)
    int32 clientLang = 46; // 客户端设备语言

    string worldId = 100;
    string clientIp = 101; //客户端Ip 有channel赋值
    string countryCode = 102;
    // 下面的是channel转发的时候补全的
    string innerClientIp = 103;
}

message Maple302VO {
    repeated LoginPlayerVo loginPlayerVos = 1;
    int64 nowPlayWorldId = 2;
}

message LoginPlayerVo {
    int32 castleLv = 1;
    string name = 2;
    int32 photoId = 3;
    ServerInfo serverInfo = 4;
}

message Role302VO {
    int32 ret = 1;
    string openId = 2;
    repeated FindRoleVo roles = 3;
    int64 naviWorldId = 4; // 导航目标区服
    int32 naviPartitionId = 5; //  导航目标区服的展示区服ID
}


message NoSessionQueryRt {
    int32 rt = 2;
    Maple302VO mapleInfo = 3;
    Role302VO roleInfo = 4;
}

// msgType = 304
// 客户端 -> 服务器
// 生成聊天室
message GetChatRoom {
    string name = 1;
    int64 ticket = 2; // 验证屏蔽字票据
}

message GetChatRoomRt {
}


message ChatRoomGeneral {
    int64 roomId = 1;
    int64 lastChatTime = 2; // 这个聊天室最新的聊天时间
}

// msgType = 305
// 客户端 -> 服务器
// 翻译
message Translation {
    string info = 1; // 要翻译的内容
    string targetLan = 2; // 要翻译的成的语言
    int64 chatInfoId = 3; // 内容行ID
}

message TranslationRt {
    string resultInfo = 2; // 翻译答案
    string sourceLanguage = 3; // 源语言类型
    int64 chatInfoId = 4; // 内容行ID
}

// msgType = 306
// 客户端 -> 服务器
// 查询openId关联的好友
message QueryOpenIdRelatedPlayers {
    string openId = 1;
    string tokenId = 2;
    int32 os = 3; // 腾讯登录的时候要携带的字段
    int32 channelid = 4; // 渠道id (腾讯登录的时候要携带的字段)
}

message QueryOpenIdRelatedPlayersRt {
    repeated SimplePlayerVo players = 2;
    int32 code = 3;
}

// msgType = 307
// 客户端 -> 服务器
// msdk后台请求
message MSDKBackendRequest {
    int32 type = 1; // 请求的msdk类型 eg.1:查询openId关联的好友
    string openId = 2; // 用户唯一标识
    string tokenId = 3; // 用户登录态
    int32 os = 4; // 腾讯登录的时候要携带的字段
    int32 channelid = 5; // 渠道id (腾讯登录的时候要携带的字段)
    int32 task_id = 6; // [微信必填]任务 id，向微信申请时获得
    int32 count = 7; // [手Q必填]期待拉取好友的个数，建议填写 20
    string achievements = 8; // 成就上报
    string fopenid = 9; // 【同玩好友必填】接收分享的同玩好友的 openid
    string sopenid = 10; // 【邀请未注册好友必填】未注册好友 sopenid
    string extra = 11; // 【必填】透传手Q侧的分享模板 extraJson, 去掉json的注释和空白符，必需进行 urlencode 返回参数
}

message MSDKBackendRequestRt {
    repeated SimplePlayerVo players = 2;
    int32 code = 3;
    string uid = 4;
}

// msgType = 308
// 客户端 -> 服务器
// openid转uid
message Openid2uid {
    string openId = 2;      // 用户唯一标识
    string tokenId = 3;     // 用户登录态
    int32 channelid = 4;    // 渠道id (腾讯登录的时候要携带的字段)
    int32 os = 5;
}

message Openid2uidRt {
    int32 code = 2;
    string msdkOpenId = 3;
}

// msgType = 309
// 客户端 -> 服务器
// 转让群主
message ChatRoomAppoint {
    int64 roomId = 1; // 转让的群id
    int64 playerId = 2; // 新群主id
}

message ChatRoomAppointRt {
}

// msgType = 312
// 客户端 -> 服务器
// 群员退出群组聊天（彻底的离开聊天室）
message QuitChatRoom {
    int64 roomId = 1;
}

message QuitChatRoomRt {
}

// msgType = 313
// 客户端 -> 服务器
// 查询联盟频道的聊天内容信息 (弃用)
message AllianceMessage {
    int64 messageId = 1; // id
}

message AllianceMessageRt {
    repeated AllianceChatMessage allianceChatMessage = 2;
}

// msgType = 314
// 客户端 -> 服务器
// 查询组内成员
message QueryGroupMembers {
    int64 groupId = 1; // id
}

message QueryGroupMembersRt {
    repeated GroupMember groupMember = 2;
}

message GroupMember {
    int64 playerId = 1; // 玩家id
    string playerName = 2; // 玩家名字
    string playerShortName = 3; // 玩家昵称
    string allianceShortName = 4; //
    int32 protoId = 5; // 头像ID
    int32 vipLv = 6; // vip等级
    int32 areaNo = 7; // 区服Id
    int64 fightValue = 8; // 战斗力
    int32 belongState = 9;
    int32 photoFrameProtoId = 10;//头像框id
}

// msgType = 315
// 客户端 -> 服务器
// 新增讨论组人员（对服务器没有批量加，客户端模拟批量）
message AddGroupChatMember {
    int64 roomId = 1;
    int64 playerId = 2; // id
}

message AddGroupChatMemberRt {
    GroupMember newMember = 2;
}

// msgType = 316
// 客户端 -> 服务器
// 删除讨论组人员（对服务器没有批量，客户端模拟批量）
message DelGroupChatMember {
    int64 groupId = 1;
    int64 playerId = 2; // id
}

message DelGroupChatMemberRt {
    int64 playerId = 2; // id
}

// msgType = 317
// 客户端 -> 服务器
// 删除讨论组
message DelGroupChat {
    int64 groupId = 1;
}

message DelGroupChatRt {
}

// msgType = 319
// 客户端 -> 服务器
// 获取指定聊天内容
message GetChatInfo {
    int32 chatType = 1; // 0世界 1国家 2联盟 3跟好友聊天  4群聊
    int64 lastEndId = 2; //上次请求的内容的最大下标
    int64 roomId = 3; // 聊天频道是聊天室时候的id
    int64 playerId = 4; // 私聊的时候的玩家id
    int32 requireWindow = 5; // 请求窗口信息 0、默认 不请求 1、请求
}

message GetChatInfoRt {
    repeated ChatInfo chatInfos = 2;
    int32 chatType = 3; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
    ChatRoom room = 4;
    FriendInfo friend = 5;
}

message ChatInfo {
    int64 id = 1; // 唯一ID
    int32 type = 2; //  聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
    int32 realType = 3; // 真正的消息类型，用于在全部频道中区分
    int32 isSystem = 4; // 是否是系统发布:0-玩家发布  1-系统发布
    int64 sendTime = 5; // 发送时间
    int64 chatRoomId = 6; // 聊天室Id
    int64 talkToId = 7; // 我的聊天对象id

    int64 playerId = 21; // 玩家ID
    string player = 22; // 说话者名字
    string playerShortName = 23; // 玩家昵称
    int32 playerIcon = 24; //废弃 头像模板id
    int32 jjcScore = 25; // jjcScore
    int64 allianceId = 26; //联盟Id
    string allianceName = 27; // 联盟名称
    string allianceShortName = 28; // 联盟简称
    string alliancePositions = 29; // 所属联盟官位
    int32 belongState = 30;
    repeated int32 designation = 31; //称号
    PhotoViewInfo photoInfo = 32; // 头像
    int32 office = 33; //官职Id
    int32 vipLv = 34; // vip等级
    int32 areaNo = 35; // 服务器编号
    int64 fightValue = 36; //战斗力
    int32 chatBubble = 37; // 聊天气泡
    string channelId = 38; // 登录渠道
    int32 clientType = 39; // 登录设备
    uint64 vipExpireTime = 40; // vip过期时间戳

    int32 messageType = 50; // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭 7-坐标 8-系统通知 9-运输 10-五古龙活动通知 11-英雄训练邀请 12-请求帮助资源线 13-魔物猎杀排行
    Notice message = 51; // 内容

    SimpleMassInfo massInfo = 100; // 集结信息
    SharePosInfo sharePosInfo = 102; //分享的位置信息
    ChatShareBattleReport chatReport = 103; //战报信息
    HeroTrainInvite trainInvite = 104; //邀请英雄训练信息
    WorldActivityRankInfo worldActivityRankInfo = 107; //天下大势排行信息
    SimplePollutedArmyInfo pollutedArmyInfo = 108; // 污染之地发起队伍消息
    AssistDropInfo assistDropInfo = 109; // 掉落了特殊道具信息

    int32 silence = 200; //是否静默
}

// 掉落了特殊道具
message AssistDropInfo {
    repeated IntToLongKV dropProps = 1;
    int32 propsId = 2;
    int32 propsNum = 3;
}

message SharePosInfo {
    int32 x = 25; // 坐标x
    int32 y = 26; // 坐标y
    int32 shareAreaNo = 28; //分享的区服
    string shareName = 29; //分享的名字
}

message WorldActivityRankInfo {
    int32 worldActivityId = 1;
    repeated WorldActivityPlayInfo playInfo = 2;
}

message WorldActivityPlayInfo {
    int32 rank = 1;
    int64 allianceId = 2;
    string allianceShortName = 3;
    int32 belongState = 5;
    int64 num = 4;
}

message ResWalkHelpInfo {
    int64 walkId = 1; //行军线Id
    int64 playerId = 2; //玩家Id
    string playerName = 3; //玩家名称
    int32 actionType = 4; //行为类型 1、请求帮助提示 2、已帮助提示
    int64 helpId = 5; //帮助唯一id
    int32 belongState = 6;
}

message ChatShareBattleReport {
    int64 reportId = 1;
    int64 playerId = 2; //战报归属玩家Id
    BattleReportInfo reportContent = 3;
}

//英雄训练邀请
message HeroTrainInvite {
    string invitePlayerName = 1; //邀请者玩家名称
    int32 cardId = 2; //训练卡Id
    int32 cardOverTime = 3; //训练卡到期时间
}

// 聊天的分享战报
message SimpleFightReport {
    int32 reportType = 1; // 魔物,集结战报,侦察等,参考下面的reportType
    string mainPlayer = 2; // 左边人的名字
    string mainPlayerAlliance = 3; // 左边人的联盟
    int32 atkOrDef = 4; // 攻击或防守 0进攻 1防守 3杀死魔物
    string targetName = 5; // 右边魔物或者对手的名字
    string allianceOrLv = 6; // 右边魔物等级或者对手的联盟名
    int64 reportId = 7; // report战报id
    int32 mainIconId = 8; // 左边人头像模板
    int32 iconId = 9; // 右边人头像模板
    int32 monsterId = 10; // 魔物模板Id
    int64 world = 11; // 战报所在的服务器id
    int32 belongState = 12; // 联盟所属洲
}

message SimpleMassInfo {
    int64 massId = 1; // 集结id
    int32 cellType = 2;
    int32 protoId = 3;
    string name = 4;
    PhotoViewInfo photoInfo = 11;
}

message SimplePollutedArmyInfo {
    int64 pollutedArmyId = 1; // 队伍id
    int64 pollutedId = 2; // 污染之地id
    int32 cellType = 3;
    int32 pollutedProtoId = 4;
    int32 x = 5;
    int32 y = 6;
    int32 memberLimit = 7; // 队伍最大人员数量
    int32 memberNum = 8; // 队伍当前人数
}

message ChatRoom {
    int64 chatRoomId = 1;
    string chatRoomName = 2;
    repeated int32 memberIcons = 3; //  聊天室4个成员的头像作为聊天室的头像
    int32 memberNum = 4; //  聊天室人数
    int64 playerId = 5; // 群主id
    int64 lastTalkTime = 6; //废弃 最后一次消息时间
    int64 lastReadTime = 7; // 最后一次读取时间 只有3188和新增聊天室时候有效
}

// msgType = 320
// 客户端 -> 服务器
// 获取最新的聊天记录
message GetLastChatInfo {
    int32 chatType = 1; // 0世界 1国家 2联盟 3跟好友聊天  4群聊
    repeated int64 targetIds = 2; //聊天目标对象，不超过3个
}

message GetLastChatInfoRt {
    repeated ChatInfo chatInfos = 2;
}

// msgType = 321
// 客户端 -> 服务器
// 拉入黑名单
message InBlack {
    int64 blackPlayerId = 1;
}

message InBlackRt {
    FriendInfo blackPlayerInfo = 2; // 黑名单信息
}

// msgType = 322
// 客户端 -> 服务器
// 移除黑名单
message OffBlack {
    int64 blackPlayerId = 1;
}

message OffBlackRt {
    int64 blackPlayerId = 2;
}

// msgType = 323
// 客户端 -> 服务器
// 点赞联盟聊天
message AssistAllianceChat {
    int64 chatId = 1;
}

message AssistAllianceChatRt {
    int64 chatId = 1;
}

// msgType = 360
// 客户端 -> 服务器
// 定点迁城
message MoveCity {
    int32 x = 1; // 玩家选中 迁移地X（地基）
    int32 y = 2; // 玩家选中 迁移地Y（地基）
    int32 moveType = 4; // 迁城类型 1、定点迁城 2、领地迁城 3、新手迁城 4-回城迁城 5-迁州迁城
    int32 state = 5;
}

message MoveCityRt {
    int32 x = 3; //迁移地址目标
    int32 y = 4;
}

// msgType = 361
// 客户端 -> 服务器
// 被清理的玩家重新上线安排坐标
message ClearPlayerEnterGame {
}

message ClearPlayerEnterGameRt {
    int32 x = 3; // 新坐标
    int32 y = 4;
}

// msgType = 362
// 客户端 -> 服务器
// 查询迁城坐标362
message QueryMoveCity {
    int32 moveType = 1;
    int32 checkX = 2;
    int32 checkY = 3;
}

message QueryMoveCityRt {
    int32 x = 1;
    int32 y = 2;
    int32 errorCode = 3;
}

//====================================邮件=============================================
// msgType = 450
// 客户端 -> 服务器
// 查询所有邮件
message AllMails {
    int32 mailTabType = 1; //邮件标签类型 1、系统邮件 2、联盟邮件 3、收藏邮件 5、普通战斗邮件 6、竞技场战斗邮件
    int64 lastMailId = 3; // 最后一封邮件id
}

message AllMailsRt {
    repeated MailSimpleInfo mailInfo = 2; //邮件
}

message MailSimpleInfo {
    int64 mailId = 1;
    int32 readType = 2;
    string title = 3;
    repeated string titleParms = 4;
    string content = 5;
    repeated string contentParms = 6;
    int64 sendTime = 7; // 时间+id倒序排序
    int32 mailStatus = 8;
    int32 mailType = 9; //邮件具体类型，用于显示小图标
    string playerName = 10; //发送者名字
    int32 iconId = 11;  // 图标
    string attach = 12; //邮件附件
    int64 claimRewardTime = 13; //邮件附件过期时间
    string extend1 = 21; // 扩展字段 当前用于关联军事设施战报

    MailSimpleInfoForMilitaryPlace militaryPlaceInfo = 100; // 军事设施信息
}

message MailSimpleInfoForMilitaryPlace {
    int32 protoId = 1;
    int32 x = 2;
    int32 y = 3;
    int64 allianceId = 4;
    string allianceShortName = 5;

    repeated int64 atkPlayerIds = 11;
    repeated int64 defPlayerIds = 12;
}

// msgType = 451
// 客户端 -> 服务器
// 阅读邮件
message ReadMail {
    int32 mailTabType = 1;
    repeated int64 mailId = 2; // 邮件id   //支持多个，以适用竞技场战报，正常只能一个
}

message ReadMailRt {
    repeated MailInfo mailInfo = 1;
    MailNum newMailNum = 2; //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 452
// 客户端 -> 服务器
// 邮件一键已读
message ReadAllMail {
    int32 mailTabType = 1; //邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
}

message ReadAllMailRt {
    MailNum newMailNum = 2; //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 453
// 客户端 -> 服务器
// 领取附件
message DrawMail {
    int32 mailTabType = 1;
    int64 mailId = 2; // 邮件id
}

message DrawMailRt {
}

// msgType = 454
// 客户端 -> 服务器
// 附件一键领取
message DrawAllMail {
    int32 mailTabType = 1; //邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
}

message DrawAllMailRt {
    MailNum newMailNum = 2; //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
    repeated int64 drawMailIds = 3; // 领取的具体id
}

// msgType = 455
// 客户端 -> 服务器
// 删除邮件
message DelMail {
    int32 mailTabType = 1;
    int64 mailId = 2; // 邮件id
}

message DelMailRt {
}

// msgType = 456
// 客户端 -> 服务器
// 批量删除邮件
message BatchDelMail {
    int32 mailTabType = 1; //邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
    int32 selectAll = 2; //是否全选 0、否 1、是
    repeated int64 mailIds = 3; //排除的邮件Id
}

message BatchDelMailRt {
    MailNum newMailNum = 2; //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 457
// 客户端 -> 服务器
// 邮件收藏（无取消收藏的功能）
message MailSign {
    int32 mailTabType = 1;
    int64 mailId = 2;
}

message MailSignRt {
}

// msgType = 458
// 客户端 -> 服务器
// 发送联盟邮件
message SendAllianceMail {
    MailTitleAndCon mailTitleAndCon = 1; //邮件信息
    int64 ticket = 2; // 验证屏蔽字票据
}

message SendAllianceMailRt {
}

message MailNum {
    int32 mailTabType = 1; //邮件类型
    int32 unDrawNum = 2; //未领取数量
    int32 unReadNum = 3; //未读数量
    int32 unReadOrUnDrawNum = 4; //未读或未领取的数量
    int32 allNum = 5; //总数量
}

// msgType = 459
// 客户端 -> 服务器
// 查询邮件数量信息
message QueryMailNumInfo {
}

message QueryMailNumInfoRt {
    repeated MailNum newMailNum = 2; //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 460
// 客户端 -> 服务器
// 取消邮件收藏
message MailUnSign {
    int64 mailId = 1;
}

message MailUnSignRt {
}

//=================================================================================
// msgType = 500
// 客户端 -> 服务器
// 查询联盟排行首页
message QueryAllianceRankFirst {
}

message QueryAllianceRankFirstRt {
    repeated QueryAllianceRankFirstVo queryAllianceRankFirstVos = 2;
}

// msgType = 501
// 客户端 -> 服务器
// 查询排行首页
message QueryRankFirst {
    bool needCrossServer = 1; // 是否需要全球数据
}

message QueryRankFirstRt {
    repeated QueryRankFirstVo queryRankFirstVos = 2;
    repeated QueryAllianceRankFirstVo queryAllianceRankFirstVos = 3;
}

message QueryRankFirstVo {
    int32 rankType = 1;
    WorldPlayerRankInfo rankInfo = 2;
    QueryRankInfoRt myRankInfo = 3;
    int32 subType = 4; // 查找范围 1-全球 2-本服
}

message QueryAllianceRankFirstVo {
    int32 rankType = 1;
    QueryAllianceRankVo queryAllianceRankVos = 2; // 排行内容
    int32 subType = 3; // 查找范围 1-全球 2-本服
    QueryAllianceRankVo myRankVos = 4; // 我的数据
}

message WorldPlayerRankInfo {
    QueryRankInfoRt queryRankInfoRt = 1;
    int64 worldId = 2;
    int32 areaNo = 3;
    int64 changTime = 4;
}

// msgType = 502
// 客户端 -> 服务器
// 查询排行
message QueryRank {
    int32 type = 1; //1-个人势力排行 2-杀敌排行榜 3-竞技场排行 4-魔物积分排行榜
    int32 page = 2;
    int32 num = 3;
    int32 subType = 4; // 查找范围 1-全球 2-本服
}

message QueryRankRt {
    QueryRankInfoRt myRankInfo = 2;
    repeated WorldPlayerRankInfo rankInfo = 3;
    int32 page = 4;
    int32 type = 5;
}

// msgType = 503
// 客户端 -> 服务器
// 查询开服战力排行
message QueryOpenServerFightValueRank {
    repeated TypeAndRange rank = 1; // 活动id, 类型传配置表rank
    repeated TypeAndRange stage = 2; // 活动阶段, 类型传配置表stage
}

message TypeAndRange {
    int32 type = 1; // 类型
    int32 indexStart = 2; // 索引起始, 从0开始
    int32 indexEnd = 3; // 索引结束
}

message OpenServerFightValueRankInfo {
    int64 playerId = 1;
    int64 score = 2; // 排行依据
    int32 rank = 3; // 排名第几,从1开始
    string name = 4;
    string nickName = 5;
    int32 photoId = 6;
    string allianceShortName = 7;
    int64 allianceId = 8;
    int32 belongState = 9;
    int32 jjcScore = 10;
    PhotoViewInfo photoInfo = 11;
}

message ActivityRankInfo {
    int32 rankActivityProtoId = 1;
    repeated OpenServerFightValueRankInfo activityRank = 2;
    repeated ActivityStageRankInfo activityStageRankInfo = 3;
    int32 overTime = 4; // 结束时间
    int64 score = 5; // 我的分数
}

message ActivityStageRankInfo {
    int32 rankActivityProtoId = 1;
    repeated OpenServerFightValueRankInfo activityStageRank = 2;
    int32 overTime = 3; // 结束时间
    int64 score = 4; // 我的阶段排行分数
}

message QueryOpenServerFightValueRankRt {
    repeated ActivityRankInfo activityRankInfo = 1;
}

// msgType = 504
// 客户端 -> 服务器
// 查询开服战力排行礼包
message QueryOpenServerFightValueDropBag {
    repeated int32 rankActivityProtoId = 1;
}
message BoughtBagInfo {
    int32 protoId = 1;
    repeated IntToIntKV info = 2;
}
message QueryOpenServerFightValueDropBagRt {
    repeated BoughtBagInfo boughtBagInfo = 1; // 已经买了哪些礼包,模板id ->礼包模板id,已购买次数
}

// msgType = 505
// 客户端 -> 服务器
// 购买开服战力排行礼包
message BuyOpenServerFightValueDropBag {
    int32 rankActivityProtoId = 1;
    int32 dropBagProtoId = 2;
}
message BuyOpenServerFightValueDropBagRt {

}

message SignData {
    int32 protoId = 1; // signMonth模板id
    repeated int32 bagDraw = 2; // 已经领取掉的累计签到奖励
    repeated IntToIntKV dayList = 3; // 第X天签到方式,key:第x天(起始1)，value:签到方式,1-签到,2-补签
}

// msgType = 506
// 客户端 -> 服务器
// 排行榜中的slg部队详情
message QuerySlgDetailOnRank {
    int32 rankType = 1;
    int64 playerId = 2;
}

message QuerySlgDetailOnRankRt {
    repeated SoldierForce soldierMap = 2;       // 兵种
    repeated IntToIntKV buffMap = 3;            // buff
    repeated SlgHeroForce slgHeroForces = 4;    // 英雄

    message SlgHeroForce {
        int64 heroId = 1;
        int32 protoId = 2;
        int32 lv = 3;
        int32 awake = 4;
    }
}

// msgType = 510
// 客户端 -> 服务器
// 签到查询信息
message SignQuery {
    int32 protoId = 1;
}
message SignQueryRt {
    SignData signData = 1;
}

// msgType = 511
// 客户端 -> 服务器
// 签到签到
message SignActive {
    int32 day = 1; // 要签哪一天,今天是正常签到,之前是补签
    int32 protoId = 2;
    int32 way = 3;
}

message SignActiveRt {
    int32 day = 1; // 就是发来的day
    int32 way = 2; // 签到方式:1-签到,2-补签
}

// msgType = 512
// 客户端 -> 服务器
// 签到领取宝箱
message SignDrawBox {
    int32 day = 1; // 宝箱对应的天数
    int32 protoId = 2;
}

message SignDrawBoxRt {
}

// 大圣堂信息
message RebirthPalaceInfo {
    int32 lastRefreshTime = 1; // 信仰值最后的更新时间
    int64 score = 2; // 最后1次刷新时的信仰值
    repeated IntToLongKV soldier = 3; // 需要消耗信仰值复活的士兵
    repeated IntToLongKV freeSoldier = 4; // 免费复活的士兵
}

// msgType = 610
// 客户端 -> 服务端
// 查询大圣堂
message RebirthPalaceQuery {
}

message RebirthPalaceQueryRt {
    RebirthPalaceInfo rebirthPalaceInfo = 1;
}

// msgType = 611
// 客户端 -> 服务端
// 免费治疗
message RebirthPalaceFreeRebirth {
    repeated IntToLongKV soldier = 1; // 免费治疗的士兵
}

message RebirthPalaceFreeRebirthRt {
}

// msgType = 612
// 客户端 -> 服务端
// 付费治疗
message RebirthPalaceRebirth {
    repeated IntToLongKV soldier = 1; // 免费治疗的士兵
    repeated IntToIntKV props = 2; // 花费的道具
}

message RebirthPalaceRebirthRt {
    RebirthPalaceInfo rebirthPalaceInfo = 1;
}

// msgType = 620
// 客户端 -> 服务端
// 英雄训练营查询
message HeroTrainCampQuery {
}

message HeroTrainCampGridInfo {
    int32 grid = 1; // 格子编号
    int64 heroId = 2; // 英雄唯一id
    int32 lastCd = 3; // 上次取出英雄的时间(0表示从未用过)
    int32 heroOriginLv = 4; // 英雄原始等级
}

message HeroTrainCampQueryRt {
    repeated HeroTrainCampGridInfo grid = 1;
}

// msgType = 621
// 客户端 -> 服务端
// 英雄训练营格子上放英雄或者取下英雄
message HeroTrainCampGridOccupyOrRelease {
    int32 grid = 1;
    int64 heroId = 2; // 0表示取下英雄,但不允许直接替换
}

message HeroTrainCampGridOccupyOrReleaseRt {
    int32 lastCd = 1; // 此格子上次取出英雄的时间
}

// msgType = 622
// 客户端 -> 服务端
// 英雄训练营格子cd清除
message HeroTrainCampGridCdClear {
    int32 grid = 1;
}

message HeroTrainCampGridCdClearRt {
}


// msgType = 640
// 客户端 -> 服务端
// 英雄推荐宝箱领取
message HeroRecommendBoxDraw {
    int32 type = 1; // 1:三消宝箱,2:slg宝箱
}
message HeroRecommendBoxDrawRt {
}

// msgType = 670
// 客户端 -> 服务器
// 武将合成
message HeroCompound {
    int32 heroId = 1; // 要合成的武将模板ID
    int32 from = 2; //碎片来源 1、手动碎片合成 2、招募 3、礼包
}

message HeroCompoundRt {
}

// msgType = 699
// 客户端 -> 服务器
// 查询好友申请
message QueryFriendApply {
}

message QueryFriendApplyRt {
    repeated FriendApply friendApplys = 2; // 加我为好友的人信息
}

// msgType = 700
// 客户端 -> 服务器
// 查询好友信息 最好只查询一次
message QueryFriend {
}

message QueryFriendRt {
    repeated FriendInfo friendInfos = 3; // 好友信息
    repeated FriendInfo strangerInfos = 5; // 陌生人信息(数据的结构和好友的一样而已)
    repeated FriendInfo blackPlayerInfo = 6; // 黑名单信息
    repeated ChatRoom rooms = 7; //聊天室信息
}

// msgType = 701
// 客户端 -> 服务器
// 加好友
message MakeFriend {
    int64 tarPlayerId = 1; // 好友ID
}

message MakeFriendRt {
    string errorLan = 1;
}

// msgType = 702
// 客户端 -> 服务器
// 删除好友
message RemoveFriend {
    repeated int64 tarPlayerId = 1; // 好友id
}

message RemoveFriendRt {
}

message FriendInfo {
    int64 playerId = 1; // 玩家id
    string name = 2; // 玩家名字
    int32 photoId = 3; // 对应的头像id
    PhotoViewInfo photoViewInfo = 4;
    int64 fightValue = 5; // 预留- 战斗力
    int32 vipLv = 8;
    int32 areaNo = 9;
    string allianceShortName = 10;
    int64 lastTalkTime = 12; //废弃 和我最后一次的聊天时间
    int64 lastReadTime = 13; // 和我最后一次的阅读时间
    string shortName = 15; // 玩家昵称
    int32 jjcScore = 16; // todo no PhotoViewInfo
    int32 offlineTime = 17; //上次离线时间，如果在线，该值为0
    int32 belongState = 18; // 废弃
    int32 trustNum = 19; //托管数量 废弃
    ChatInfo chatInfos = 20;
    string openId = 30;
    int32 castleLv = 31;
    string channelId = 33; // 登录渠道
    int32 clientType = 34; // 登录设备
}

// msgType = 709
// 客户端 -> 服务器
// 查询玩家
message QueryPlayerByName {
    string playerName = 1; // 查询玩家名字
    int32 filterSelf = 2; // 是否包含自己 0否1是
    int64 ticket = 3; // 验证屏蔽字票据
}

message QueryPlayerByNameRt {
    repeated QueryPlayerByNameVo queryPlayerByNameVos = 2; // 查询的个人信息
}

message QueryPlayerByNameVo {
    int64 playerId = 1; //好友信息
    string playerName = 2; //群组信息
    int32 photoId = 3; // 头像图标id
    int32 vipLv = 4; //
    int32 areaNo = 5; //
    string allianceShortName = 6; //联盟简称
    string shortName = 8; //
    int64 fightValue = 9; // 战斗力
    int32 belongState = 10;
    PhotoViewInfo photoInfo = 11; // 头像图标id
}

// msgType = 710
// 客户端 -> 服务器
// 同意或拒绝别人的添加好友请求
message HandleFriendApply {
    int64 tarPlayerId = 1; // 玩家ID：个人， 0:一键
    int32 type = 2; // 1：同意，0：拒绝
}

message HandleFriendApplyRt {
    string errorLan = 1;
}

// msgType = 711
// 客户端 -> 服务器
// 竞技场信息查询
message JjcQueryInfo {
}

message JjcQueryInfoRt {
    int32 myScore = 2; // 我的积分
    int32 times = 3; // 挑战剩余次数
    int32 maxScore = 4; // 历史最高积分
    JjcChallengeInfo challenge = 10; // 对手
    repeated HeroPos heroInfo = 12; //我的进攻英雄信息
    repeated HeroPos defHeroInfo = 13; //我的防守英雄信息
    int64 nextRefreshTime = 17; // 上一次次数回复时间
    int64 dragonId = 18; //自己的布阵的龙Id
    int32 nextFreeRefTime = 19; // 下次免费刷新对手的时间戳
}

// 竞技场挑战对手信息
message JjcChallengeInfo {
    int32 score = 1; // 对手积分
    int64 playerId = 2; // 玩家ID
    string playerName = 3; // 玩家名字
    int64 aid = 4; // 联盟ID
    string aName = 5; // 联盟名称
    string aShortName = 6; // 联盟简称
    int32 photoProtoId = 7; // 头像ID
    int64 power = 8; // 实力值
    int32 protoRobotId = 9; // 机器人模板id
    repeated JjcHeroGenral jjcHeros = 10; // 对方武将数据
    int32 mainHeroId = 11; // 主英雄模板id
    int32 kingLv = 12; // 君主等级
    Dragon dragon = 13; // 防守方龙数据
    int32 winChangeScore = 14; // 战斗胜利增加积分
    int32 loseChangeScore = 15; // 战斗失败增加积分
    int32 belongState = 16;
}

// msgType = 712
// 客户端 -> 服务器
// 刷新竞技场挑战对手
message JjcRefreshChallenge {
}

message JjcRefreshChallengeRt {
    JjcChallengeInfo challenge = 2; // 对手
    int32 nextFreeRefTime = 3; // 下次免费刷新对手的时间戳
}

// msgType = 714
// 客户端 -> 服务器
// 领取奖励
message JjcGetRewards {
    repeated int32 ids = 1; // 奖励模版ID
}

message JjcGetRewardsRt {
    repeated int32 ids = 2; // 奖励模版ID
}

// msgType = 715
// 客户端 -> 服务器
// 打开竞技场商店
message JjcOpenShop {
}

message JjcOpenShopRt {
    repeated JjcShopInfo nowInfos = 2; // 本赛季商品信息
    repeated JjcShopInfo hisInfos = 3; // 历史赛季商品信息
}

message JjcShopInfo {
    int32 id = 1; // 商品ID (arenaShop.xml.id)
    int32 type = 2; // 类型：1-道具 2-武将卡
    int32 protoId = 3; // 道具ID或模版ID
    int32 num = 4; // 数量
    int32 resType = 5; // 购买货币类型
    int32 resCost = 6; // 购买货币价格
    int32 isBuy = 7; // 是否已经购买 1-已购买 0-未购买
}

// msgType = 718
// 客户端 -> 服务器
// 领取累计时间奖励
message GetTimeReward {
}

message GetTimeRewardRt {
}

// msgType = 719
// 客户端 -> 服务器
// 开始竞技场挑战对手
message BeginJjcFight {
}

message BeginJjcFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
    JjcChallengeInfo challenge = 3; // 对手
}

// msgType = 720
// 客户端 -> 服务器
// 结算竞技场挑战对手
message JjcFight {
    pb4battle.EliminateFight eliminateFight = 3; // 战斗情况
    int32 fightResult = 4; // 挑战结果
}

message JjcFightRt {
    int32 scoreChange = 2; // 分数变化 负数就是输了
    string reward = 3; //奖励信息
    repeated HeroInfoForReport heroInfos = 4; //英雄信息
    int32 oppScoreChange = 5; // 别人的分数变化 负数就是输了
}

// msgType = 721
// 客户端 -> 服务器
// 主动退出竞技场战斗
message JjcFightExit {
}

message JjcFightExitRt {
}

// msgType = 722
// 客户端 -> 服务器
// 购买竞技场挑战次数
message BuyJjcCount {
}

message BuyJjcCountRt {
    int32 nowCounts = 2; // 购买后次数
}


message JjcHeroGenral {

    int32 pos = 6; // 站位
    int64 heroPower = 7; // 武将战斗力
    int64 hp = 8; // 剩余血量
    int32 die = 9; // 是否死亡 0-否 1-是
    int64 hpLimit = 13; // 上限血量
    HeroInformationForProperties heroInformationForProperties = 19;
}

// msgType = 724
// 客户端 -> 服务器
// 查询某玩家竞技场防守阵容
message SelectJjcDefForce {
    int32 selectRank = 1; // 要查询的名次
}

message SelectJjcDefForceRt {
    int32 jjcDefForceNpcTeamId = 3; //机器人的配置,unitTeam表ID
    repeated JjcHeroGenral jjcHeros = 4; // 对方武将数据
    int64 fightValue = 5; //战斗力
    int64 defPlayerId = 6; //玩家Id
    Dragon dragon = 7; // 防守方龙数据
}

// msgType = 725
// 客户端 -> 服务器
// 领取排名累计奖励
message GetRankGold {
}

message GetRankGoldRt {
}

// 商品信息
message ShopItemInfo {
    int32 id = 1; // 槽位id
    int32 protoId = 2; // 模板id
    int32 haveBought = 3; // 是否购买过 0 没买过  1买过
}

// msgType = 726
// 客户端 -> 服务器
// 查看竞技场商品信息
message GetJjcShopInfo {
}

message GetJjcShopInfoRt {
    int64 refreshTime = 2; // 上次的刷新时间 毫秒时间戳
    int32 times = 3; // 刷新的次数
    repeated ShopItemInfo items = 4; // 商店各项商品信息
}

// msgType = 727
// 客户端 -> 服务器
// 购买竞技场商品信息
message BuyJjcItem {
    int32 id = 1; // 购买的槽位商品id
}

message BuyJjcItemRt {
}

// msgType = 728
// 客户端 -> 服务器
// 刷新竞技场商品信息
message RefreshJjcShopItem {

}

message RefreshJjcShopItemRt {
    int32 times = 2; // 刷新的次数
    repeated ShopItemInfo items = 3; // 商店各项商品信息
}

// msgType = 729
// 客户端 -> 服务器
// 兑换竞技场商品信息
message ExchangeJjcAchievementReward {
    repeated int32 ids = 1; // 奖励模版ID
}

message ExchangeJjcAchievementRewardRt {
    repeated int32 ids = 2; // 奖励模版ID
}

// msgType = 740
// 客户端 -> 服务器
// 获取vip奖励
message GainVipReward {
    int32 vipLv = 1; // vip等级
}

message GainVipRewardRt {
}

// msgType = 741
// 客户端 -> 服务器
// 购买普通VIP特权礼包 用钻石买的
message BuyNormalVipGift {
    int32 vipLv = 1; // 要买的特权礼包的VIP档位
}

message BuyNormalVipGiftRt {
}

// msgType = 742
// 客户端 -> 服务器
// Vip升级(现在的爵位升级)
message UpVipLevel {
}

message UpVipLevelRt {
}

// msgType = 743
// 客户端 -> 服务器
// 每日VIP经验领取
message RewardVipDayReward {
}

message RewardVipDayRewardRt {
}

message RadarTaskInfo {
    int64 id = 1;
    int32 protoId = 2; //
    int32 overTime = 3; // 过期时间(仅对未完成的有效, 0表示永远有效)
    int32 finishTime = 4; // 完成时间(0表示未完成)
    int32 drawTime = 5; // 领取时间(0表示未领取)
    int32 x = 6; // 坐标x(-1表示无坐标)
    int32 y = 7; // 坐标y(-1表示无坐标)
    int32 createTime = 8; // 创建时间
    int32 teamId = 9;
}

message RadarStorageInfo {
    int32 level = 1;    // 雷达探测等级 @废弃
    int32 progress = 2; // 当前剩余的探测次数
    int32 lastRefreshTime = 3;
    int32 remainTaskCount = 4; // 剩余可以做任务的次数


    int32 nextRefreshTime = 11;             // 下次刷新所有次数的时间
    int32 nowTaskStorageProgress = 12;      // 当前可用次数存储的进度值
    repeated RadarTaskInfo radarTask = 13;            // 雷达任务
    int64 nextRefreshStrengthTime = 14;     // 下次刷新实力验证任务的时间
}

message VirtualMapItem {
    IntToIntKV pos = 1;
    int32 protoId = 2; // 探测表的id
    int64 taskId = 3; // 绑定的任务id
    int32 extraProtoId = 4;
    int32 teamId = 5;
}

// msgType = 780
// 客户端 -> 服务器
// 雷达搜索
message RadarSearch {
    RadarOpt opt = 1;

    enum RadarOpt {
        Query = 0;
        Search = 1;
    }
}
message RadarSearchRt {
    repeated RadarTaskInfo radarTask = 11; // 雷达任务
    repeated EliminateMonsterOnMap itemOnMap = 12; // 雷达刷出的仅自己可见cell
    RadarStorageInfo storage = 13;
}

// msgType = 781
// 客户端 -> 服务器
// 雷达--打开
message RadarSearchOpen {
    // pass
}
message RadarSearchOpenRt {
    int64 nowTimeMillis = 2;
    int32 drawTaskNum = 3;                  // 领取过多少个任务的奖励
    int32 radarLv = 4;                      // 雷达等级
    int32 strengthLv = 5;                   // 实力等级
    int32 lastStrengthTask = 6;             // 上一次创建的实力验证任务
    int32 nextRefreshTime = 7;              // 下次刷新所有次数的时间
    int32 nowTaskStorageProgress = 8;       // 当前可用次数存储的进度值 19/20 10
    int32 lastRefreshTime = 9;              // 上次更新次数的时间  @Deprecated
    bool meetKillCdt = 10;                  // 是否达到升级前置条件
    repeated RadarTaskInfo radarTask = 11;  // 雷达任务
    repeated EliminateMonsterOnMap itemOnMap = 12; // 雷达刷出的仅自己可见cell @Deprecated
    RadarTaskInfo strengthTask = 13;        // 实力验证任务
    repeated RadarItemOnMap radarItem = 14; // 雷达刷出的仅自己可见cell
    int64 nextRefreshStrengthTime = 15;     // 下次刷新实力验证任务的时间
}

// msgType = 782
// 客户端 -> 服务器
// 雷达任务验证(支持实力验证任务)
message RadarTaskVerify {
    int64 taskId = 1;
}

message RadarTaskVerifyRt {
    int32 valid = 1; // 0-无效,1-有效
    int64 nowTimeMillis = 7; // 当前时间毫秒
}

// msgType = 783
// 客户端 -> 服务器
// 雷达攻击三消怪物开始战斗
message RadarEliminateMonsterAtkStart {
    WalkForceInfo walkForceInfo = 9;
    int32 posX = 2;
    int32 posY = 3;
}

message RadarEliminateMonsterAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 784
// 客户端 -> 服务器
// 雷达攻击三消怪物完成
message RadarEliminateMonsterAtkFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message RadarEliminateMonsterAtkFinishRt {
}


// msgType = 785
// 客户端 -> 服务端
// 领取雷达任务奖励
message RadarTaskDraw {
    int64 id = 1; // 领取的任务
}

message RadarTaskDrawRt {
}

// msgType = 786
// 客户端 -> 服务端
// 雷达出城引导搜索
message RadarGuide {
}

message RadarGuideRt {
    IntToIntKV pos = 1; // k、v均不小于0表示搜索成功
}

// msgType = 787
// 客户端 -> 服务端
// 雷达领取实力验证任务
message RadarStrengthTaskDraw {
    int64 id = 1; // 实力任务id
}
message RadarStrengthTaskDrawRt {
}

// msgType = 788
// 客户端 -> 服务端
// 雷达升级
message RadarUpgrade {
    LvUpType opt = 1; // 升级的类型，当前只支持实力升级

    enum LvUpType {
        RADAR = 0;
        STRENGTH = 1;
    }
}

message RadarUpgradeRt {
    string resVo = 2;
}

// msgType = 789
// 客户端 -> 服务端
// 雷达任务完成--拼图
message RadarTaskComplete {
    int64 id = 1;
}

message RadarTaskCompleteRt {
}

// msgType = 802
// 客户端 -> 服务器
// 联盟创建
message AllianceCreate {
    string allianceName = 1; //联盟名称
    string allianceShortName = 2; //联盟简称
    int32 allianceLan = 3; //联盟语种
    int32 flagColor = 4; // 联盟旗帜的颜色
    int32 flagStyle = 5; // 联盟旗帜的样式
    int32 flagEffect = 6; // 联盟旗帜图案
    int64 ticket = 7; // 验证屏蔽字票据
    string manifesto = 8; //联盟宣言
    int32 createType = 9; // 创建类型 1-普通资源消耗 2-紫钻
}

message AllianceCreateRt {
}

// msgType = 803
// 客户端 -> 服务器
// 获取一个联盟随机名
message QueryAllianceRandName {
    int32 randType = 1; // 1- 随机联盟名 2- 随机玩家名
}

message QueryAllianceRandNameRt {
    string allianceName = 1; //随机到的名字 字段名是以前的 不修改了
}

// msgType = 804
// 客户端 -> 服务器
// 根据联盟ID申请加入联盟
message AllianceJoinById {
    int64 allianceId = 1; //联盟ID
}

message AllianceJoinByIdRt {
    int64 allianceId = 2; //联盟ID
    int64 quitTime = 3; //如果返回805，该字段为玩家上次退出联盟的时间戳
}

// msgType = 805
// 客户端 -> 服务器
// 玩家取消加入联盟申请
message AllianceJoinCancel {
    int64 allianceId = 1; //联盟ID
}

message AllianceJoinCancelRt {
    int64 allianceId = 2; //联盟ID
}

// msgType = 806
// 客户端 -> 服务器
// 处理加入联盟申请
message AllianceDealJoinReq {
    int64 reqPlayerId = 1; //待处理玩家ID
    int32 reqType = 2; //1-同意加入；2-拒绝加入
}

message AllianceDealJoinReqRt {
    int64 reqPlayerId = 2; //处理后玩家ID；
    int32 reqType = 4; //1-同意加入；2-拒绝加入
}

// msgType = 807
// 客户端 -> 服务器
// 设置允许申请联盟的势力最低值
message AllianceSetPowerLimit {
    int64 powerLimit = 1; //设置允许申请联盟的战力
    int64 canAddPower = 2; //设置可自动加入的战力
}

message AllianceSetPowerLimitRt {
    int64 powerLimit = 2; //设置允许申请联盟的战力
    int64 canAddPower = 3; //设置可自动加入的战力
}

// msgType = 808
// 客户端 -> 服务器
// 查询可加入联盟列表
message AllianceQueryList {
    string allianceName = 1; // 联盟名字或者简称
    int32 allianceLan = 2; // 所选语言
    int32 isFill = 3; // 是否尽可能补满50个  0 - 否 1 - 是
    int64 ticket = 4; // 验证屏蔽字票据
}

message AllianceQueryListRt {
    repeated AllianceQueryListInfo alliances = 2; //联盟列表
}

message AllianceQueryListInfo {
    int64 id = 1; //联盟ID
    string name = 2; //联盟名称
    string shortName = 3; //联盟简称
    int32 reservePlayers = 7; //当前招收人数
    int64 powerValue = 9; //联盟势力值
    int32 operate = 11; //可进行操作：0-申请加入；1-取消申请
    int32 allianceLan = 12; // 所选语言
    int64 canAddPower = 13; // 可直接加入战斗力值
    int64 canReqPower = 14; // 可申请的战斗力值
    int32 flagColor = 15; //旗帜的颜色模版ID
    int32 flagStyle = 16; //旗帜的样式模版ID
    int32 flagEffect = 17; //旗帜的图案模版ID
    int64 alliancePower = 18; // 帮派战斗力
    int32 giftLv = 19; //礼物等级
    int32 areaNo = 20; // 区号
    int32 allianceLv = 21; // 联盟等级
    int32 powerCount = 22; // 领地数量
    int32 limitPlayers = 23; // 招收人数上限
    int32 belongState = 24; // 所属洲
    int64 allianceSoloScore = 25; // 联盟战分数
    int32 allianceUpLv = 26; // 联盟战活跃等级
    int32 allianceActivityProto = 27; // 现在套用的是哪个活跃度等级模板ID
    int32 newMemberActivityLv = 28;//新联盟活跃度联盟活跃度等级
}

// msgType = 809
// 客户端 -> 服务器
//
message AllianceQueryInfo {
    int64 allianceId = 1; // 联盟ID
    int32 logNum = 2; // 主页要显示的日志条数
}

message AllianceQueryInfoRt {
    int64 id = 2; //联盟ID
    string name = 3; //联盟名称
    string shortName = 4; //联盟简称
    int64 playerId = 5; //盟主ID
    string playerName = 6; //盟主名称
    int32 reservePlayers = 12; //当前招收人数
    int32 limitPlayers = 13; //招收人数上限
    int64 powerValue = 14; //当前势力值
    string manifesto = 21; //联盟宣言
    int64 lastManifesto = 22; //上次修改联盟宣言时间
    string description = 23; //联盟公告
    int32 relationShipId = 28; //联盟关系：1-友好；2-敌对；3-中立
    int32 rewards = 29; //奖池金额
    int64 powerLimit = 30; //允许加入联盟的最低战斗力
    int32 hasCountyCity = 33; //联盟是否有占领的郡城：0-没有；1-有
    int32 flagColor = 35; //旗帜的颜色模版ID
    int32 flagStyle = 36; //旗帜的样式模版ID
    int32 flagEffect = 37; //旗帜的图案模版ID
    int32 setRelationEndTime = 38; //联盟外交变更冷却结束时间
    int64 canAddLimit = 43; // 可以直接加入的战斗力 如果<0就表示没开启这个功能
    string biaoyu = 44; //联盟标语
    int32 allianceLan = 45; //联盟语种
    int32 allianceInAreaNo = 46; //联盟所属的服务器编号
    int32 occupyWonderCount = 47; //占领的奇观数量
    int32 isApply = 48; // 是否已经申请过这个帮了 0-否  1-是
    int32 giftLv = 49; //礼物等级
    int32 fightRank = 50; //实力排行
    string systemDescription = 51; // 系统联盟公告
    int32 allianceLv = 52;
    int64 allianceExp = 53;
    int32 powerCount = 54; // 领地数量
    int64 canApplyPower = 55; // 允许申请职位的战力
    int32 belongState = 56; // 所属洲
    int64 allianceSoloScore = 57; // 联盟战分数
    int32 allianceSoloState = 58; // 联盟战状态
    int32 allianceSoloStateChangeTime = 59; // 切状态时间
    int32 allianceSoloCd = 60; // 被查询联盟的宣战冷却
    int32 allianceUpLv = 61; // 联盟战活跃等级
    int64 allianceSoloOppAllianceId = 62; // 正在交战的联盟ID
    string allianceSoloOppAllianceName = 63; // 正在交战的联盟名字
    int32 allianceSoloOppAllianceState = 64; // 正在交战的联盟州
    int32 myAllianceSoloCd = 65; // 我自己联盟的宣战冷却
    int32 huoyueduValue = 69;
    int32 todayPeople = 70; // 今日0点的统计人数
    string mainPlayerOpenId = 71; // 联盟盟主的openid
    IntToIntKV recruit = 72; // 联盟招募， key 次数 value 下次可招募时间(默认0)
    repeated AllianceCalendarData calendars = 73; // 临近的日程
    int32 calendarNum = 74; // 正在进行中的日程总数
    repeated AllianceQueryLogInfo logs = 75; //联盟日志列表
    int32 autoRefTime = 76; // 联盟宝藏自动刷新倒计时
    int32 allianceActivityProto = 77; // 现在套用的是哪个活跃度等级模板ID
    int32 nowAllianceActivityProto = 78; // 此时数据计算出来的活跃度等级模板ID
    int32 newAllianceActivityLv = 79; //新联盟活跃度--联盟活跃度等级
}

// msgType = 810
// 客户端 -> 服务器
// 查询申请加入联盟的玩家信息
message AllianceQueryReqList {
}

message AllianceQueryReqListRt {
    int64 canAddPower = 2; // 可以直接加入的战斗力
    int64 powerLimit = 3; // 可申请的最低战斗力
    repeated AllianceQueryReqListInfo players = 4; //申请加入联盟的玩家列表
}

// msgType = 811
// 客户端 -> 服务器
// 玩家主动退出联盟
message AllianceQuit {
}

message AllianceQuitRt {
}

// msgType = 812
// 客户端 -> 服务器
// 从联盟中剔除玩家
message AllianceRemovePlayer {
    int64 removePlayerId = 1; //待剔除玩家ID
}

message AllianceRemovePlayerRt {
    int64 removePlayerId = 2; //剔除玩家ID
}

// msgType = 813
// 客户端 -> 服务器
// 修改联盟公告
message AllianceSetDescpt {
    string description = 1; //公告/标语内容
    int32 desType = 2; // 设置类型 1-公告  2-标语 3-宣言
    int64 ticket = 3; // 验证屏蔽字票据
}

message AllianceSetDescptRt {
    string description = 2; //公告/标语内容
    int32 desType = 3; // 设置类型 1-公告  2-标语
}

// msgType = 814
// 客户端 -> 服务器
// 任命玩家在联盟中职位/盟主转让
message AllianceSetPos {
    int64 setPlayerId = 1; //任命玩家ID
    repeated int32 position = 2; //任命职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

message AllianceSetPosRt {
    int64 setPlayerId = 2; //任命玩家ID
    repeated int32 positions = 3; //任命后的职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

// msgType = 815
// 客户端 -> 服务器
// 接受邀请加入联盟
message AllianceBeInvite {
    int64 mailId = 1; // 邀请邮件ID
}

message AllianceBeInviteRt {
}

// msgType = 816
// 客户端 -> 服务器
// 查询联盟成员信息
message AllianceQueryPlayer {
    int64 allianceId = 1; //要查询的帮派的ID
}

message AllianceQueryPlayerRt {
    int32 onlineQty = 2; //在线玩家数
    repeated AllianceQueryPlayerInfo players = 3; //联盟成员玩家列表
    int64 allianceId = 4; //要查询的帮派的ID
    repeated int64 dealPlayerId = 5; // 不跟随盟主的玩家IDS
    repeated int32 myApplyPos = 6; // 我申请的职位
    int64 canApplyPower = 1; // 可以申请职位的战斗力要求  < 0 表示未开启这个功能
}

// msgType = 817
// 客户端 -> 服务器
// 联盟解散
message AllianceDismiss {
}

message AllianceDismissRt {
}

// msgType = 818
// 客户端 -> 服务器
// 联盟回城请求界面
message AllianceTp {
}

message AllianceTpRt {
    int32 mainPlayerX = 1; // 帮主坐标
    int32 mainPlayerY = 2; // 帮主坐标
    int32 lastTime = 3; // 上次回城时间
    AllianceBuildVo allianceBuild = 4; //联盟建筑(只有据点跟奇观)
}

// msgType = 819
// 客户端 -> 服务器
// 设置跟随状态 不用传参数来 直接取反
message SetAllianceFollow {
    repeated int64 dealPlayerId = 1; // 操作的玩家们
}

message SetAllianceFollowRt {
}

// msgType = 820
// 客户端 -> 服务器
// 查询联盟日志
message AllianceQueryLog {
}

message AllianceQueryLogRt {
    repeated AllianceQueryLogInfo logs = 2; //联盟日志列表
}

// msgType = 821
// 客户端 -> 服务器
// 打开联盟召唤boss
message QueryAllianceCallBoss {
}

message QueryAllianceCallBossRt {
    int32 powerCount = 1;
    int64 yesterdayKillMonsterScore = 2; // 昨日帮派讨伐值
    int64 todayKillMonsterScore = 3; // 今天帮派讨伐值
    repeated AllianceCallBossProto allianceCallBossProtos = 4;
    repeated int32 nextBossRefTimes = 5; // 下次复活的时间S
}

message AllianceCallBossProto {
    int32 bossId = 1;
    int64 hp = 2;
    int32 unlockTime = 3; // 魔物解锁时间
    int32 x = 4;
    int32 y = 5;
    int32 nextBossRefTime = 8; // boss下次复活时间
    int32 bossFind = 9; // boss是否已经被找到
    int32 leaveTime = 10; // 魔物消失时间
}

// msgType = 822
// 客户端 -> 服务器
// 设置联盟官员申请战斗力
message AllianceSetApplyPower {
    int64 canApplyPower = 1; // 可以申请职位的战斗力要求  < 0 表示未开启这个功能
}

message AllianceSetApplyPowerRt {
}

// msgType = 823
// 客户端 -> 服务器
// 申请联盟官员
message ApplyAllianceOfficer {
    int32 applyId = 1; // 要申请的位置id
}

message ApplyAllianceOfficerRt {
}

// msgType = 824
// 客户端 -> 服务器
// 查询申请成为联盟官员列表
message QueryApplyAllianceOfficer {
}

message QueryApplyAllianceOfficerRt {
    repeated ApplyOfficerVo applyOfficerVos = 1;
    int64 canApplyPower = 2; // 允许申请职位的战力
}

message ApplyOfficerVo {
    int64 applyPlayerId = 1; // 申请者ID
    int32 applyOfficerId = 2; // 申请的职位
    int32 applyTime = 3; // 申请时间
}

// msgType = 825
// 客户端 -> 服务器
// 检测联盟名是否可用
message CheckAllianceName {
    string name = 1; // 检测名
    int32 nameType = 2; // 名字类型  1-名称 2-简称
}

message CheckAllianceNameRt {
    int32 errorType = 2;
}

// msgType = 826
// 客户端 -> 服务器
// 删除一条申请职位记录
message DeleteApplyAllianceOfficer {
    int64 applyId = 4; // 要删除的那条的玩家ID
}

message DeleteApplyAllianceOfficerRt {
}

// msgType = 835
// 客户端 -> 服务器
// 罢免玩家帮派职位
message AllianceRecallPos {
    int64 setPlayerId = 1; //罢免玩家ID
    int32 position = 2; //罢免职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

message AllianceRecallPosRt {
    int64 setPlayerId = 2; //罢免玩家ID
    repeated int32 positions = 3; // 罢免之后的职位列表
}

// msgType = 837
// 客户端 -> 服务器
// 更改联盟旗帜
message AllianceSetFlag {
    int32 color = 1; //旗帜的颜色模版ID
    int32 style = 2; //旗帜的样式模版ID
    int32 effect = 3; //旗帜的图案模版ID
}

message AllianceSetFlagRt {
}

// msgType = 838
// 客户端 -> 服务器
// 查询已申请联盟列表
message QueryApplyAllianceList {
}

message QueryApplyAllianceListRt {
    repeated AllianceQueryListInfo alliances = 2; //联盟列表
}

// msgType = 839
// 客户端 -> 服务器
// 打开联盟活跃度主界面
message QueryAllianceActivity {
}

message QueryAllianceActivityRt {
    int32 huoyueduValue = 1; // 联盟活跃度
    int32 allianceActivityProto = 2; // 现在套用的是哪个活跃度等级模板ID
    int32 todayPeople = 3; // 今日的人数峰值
    int32 myHuoyueduValue = 4; // 我今天活跃度
}

// msgType = 840
// 客户端 -> 服务器
// 检测是否拥有联盟 或者有申请记录 有的话报错 用于进入销号冷静期
message CleanrAllianceApplyList {
}

message CleanrAllianceApplyListRt {
}

// msgType = 841
// 客户端 -> 服务器
// 根据条件筛选出一个符合条件的联盟信息
message GetRecommendationAllianceInfo {
}

message GetRecommendationAllianceInfoRt {
    AllianceQueryListInfo alliances = 2; //联盟信息
}

// msgType = 846
// 客户端 -> 服务器
// 购买联盟福利支援礼包
message BuyAllianceGiftSupportBox {
    int32 giftId = 1;//购买的联盟福利支援礼包id
}

message BuyAllianceGiftSupportBoxRt {

}

// msgType = 847
// 客户端 -> 服务器
// 购买联盟福利支援礼包
message QueryAllianceGiftSupportBoxInfo {
    int32 giftId = 1;//购买的联盟福利支援礼包id
}

message QueryAllianceGiftSupportBoxInfoRt {
    AllianceGiftSupportBox info = 1;
}

//联盟福利支援礼包数据
message AllianceGiftSupportBox {
    int32 id = 2;//礼包id
    int32 buyTime = 3;//今日购买次数
}

// msgType = 895
// 客户端 -> 服务器
// 打开联盟外交界面,收到返回是1之后.如果界面有小红点,自己去掉
message AllianceOpenWaijiao {
    int64 allianceId = 1; //联盟ID
}

message AllianceOpenWaijiaoRt {
    repeated AllianceWaijiaoInfo allianceWaijiaoInfos = 2; //json
    int32 todayNum = 3; //玩家本日次数
}

message AllianceWaijiaoInfo {
    int32 flagColor = 1; //联盟旗帜的颜色
    int32 flagStyle = 2; //联盟旗帜的样式
    int32 flagEffect = 3; //联盟旗帜图案
    int64 aid = 4; //联盟名字
    string name = 5; //联盟ID
    string shortName = 6; //联盟简称
    int64 playerId = 7; //玩家ID
    string playerName = 8; //玩家名
    string playerPositions = 9; //玩家职位
    int32 createTime = 10; //发布时间
    string waijiaoInfo = 11; //内容
    int32 mapPltAreaNo = 12; //发表时所在区号
    int32 photoProtoId = 13; //头像
    string nickName = 14; //玩家昵称
    int64 waijiaoId = 15; // 留言唯一ID
    int32 jjcScore = 16;
    int32 belongState = 17; // 所属洲
    PhotoViewInfo photoInfo = 18;
}

// msgType = 896
// 客户端 -> 服务器
// 联盟外交
message WriteAllianceWaijiao {
    int64 allianceId = 1; //联盟ID
    string waijiaoInfo = 2; // 文本
    int64 ticket = 3; // 验证屏蔽字票据
}

message WriteAllianceWaijiaoRt {
    AllianceWaijiaoInfo allianceWaijiaoInfos = 2; //json
}

// msgType = 897
// 客户端 -> 服务器
// 设置联盟昵称
message AllianceNickName {
    string nickName = 1; // 昵称
    int32 beforeSign = 2; // 前置标记 0表示不设置
    int32 endSign = 3; // 后置标记 0表示不设置
}

message AllianceNickNameRt {
    string nickName = 2; // 昵称
}

// msgType = 898
// 客户端 -> 服务器
// 修改联盟名称/简称/语种
message SetAllianceName {
    int32 setType = 1; // 修改类型 1-名称  2-简称 3-语种
    string name = 2; // 要修改成的内容
    int64 ticket = 3; // 验证屏蔽字票据
}

message SetAllianceNameRt {
    int32 setType = 2; // 修改类型 1-名称  2-简称 3-语种
    string name = 3; // 要修改成的内容
}

// msgType = 899
// 客户端 -> 服务器
// 弹劾盟主
message AllianceImpeach {
}

message AllianceImpeachRt {
}

// msgType = 900
// 客户端 -> 服务器
// 邀请玩家加入联盟
message AllianceInvite {
    int64 playerId = 1; //邀请的玩家ID
}

message AllianceInviteRt {
}

// msgType = 901
// 客户端 -> 服务器
// 联盟礼物主界面
message AllianceGiftOpen {
    bool enabledDelete = 1;
}

message AllianceGiftOpenRt {
    AllianceBigGiftVo allianceBigGiftVo = 2; // 大礼物信息
    repeated AllianceGiftVo allianceGiftVos = 6; // 礼物列表
}

message AllianceBigGiftVo {
    int32 bigGiftId = 2; // 左侧大礼物ID
    int32 bigGiftExp = 3; // 左侧大礼物钥匙值
    int32 giftLv = 4; // 上侧的礼物等级
    int32 giftExp = 5; // 上侧的礼物经验
    repeated BigAllianceGift bigGiftResStrings = 7; // 玩家未领取大礼物数据
    int64 lastRefreshTime = 8;//上次联盟礼服钥匙刷新时间
}

message BigAllianceGift {
    int32 giftId = 1;
    int32 bigGiftLv = 2;
}

message AllianceGiftVo {
    int64 onlyId = 1; // 礼物唯一ID
    int32 giftId = 2; // 礼物模版ID
    int32 isGet = 3; // 是否已领取
    string giftInfo = 4; // 礼物内奖励
    int32 overTime = 5; // 过期秒数
    string lanId = 6;
    repeated string lanParams = 7;
}

// msgType = 902
// 客户端 -> 服务器
// 领取联盟礼物
message AllianceGiftGet {
    repeated int64 onlyId = 1; // 礼物唯一IDS
}

message AllianceGiftGetRt {
    repeated int64 onlyId = 1; // 礼物唯一IDS
    int32 addExp = 2;
    int32 addBigExp = 3;
    string resString = 4; // 获得的奖励
    repeated LongToStringKV giftRewards = 5; // 每个礼物对应的奖励
}

// msgType = 903
// 客户端 -> 服务器
// 一次性领取联盟大礼物宝箱
message AllianceBigGiftOpen {
}

message AllianceBigGiftOpenRt {
}

// msgType = 904
// 客户端 -> 服务器
// 清空过期/已领取的联盟礼物
message AllianceGiftDelete {
}

message AllianceGiftDeleteRt {
    repeated int64 delIds = 1; // 删除的礼物id
}

// msgType = 906
// 客户端 -> 服务器
// 打开联盟总动员主界面
message OpenAllianceCompetitionMain {
}

message OpenAllianceCompetitionMainRt {
    int32 rt = 1;
    int32 overTime = 2; // 活动结束时间
    int32 nowScore = 3; //当前积分
    int32 joinPlayerNum = 4; // 参与的玩家数量

    AllianceCompetitionInfo myQuest = 5; // 我的总动员信息
    repeated AllianceCompetitionQuest quests = 6; // 联盟总动员任务信息
    repeated PersonalCompetitionQuest personalQuests = 7; // 联盟总动员专属任务信息
    int32 nowCompetitionQuestProtoId = 8; // 当前正在进行的总动员任务配置id
    repeated AllianceOtherQuest others = 9;
    IntToIntKV myQuestTotal = 10; // 我的接收任务的次数. key 完成次数，value是接收次数
    int64 allianceAt = 11; // 加入联盟时间
    AllianceTask nowTask = 12; // 当前正在进行的任务
    uint32 personalRankIndex = 13; //在个人排名中的名次
    uint32 allianceRankIndex = 14; //联盟在联盟排名中的名次
}

message AllianceTask {
    int32 taskProtoId = 1; // 任务模板ID
    int32 competitionQuestProtoId = 2; // 联盟任务表
    int32 taskState = 3; // 任务状态 0-进行中 1-已完成 2-已领取奖励
    int64 taskFinish = 4; // 任务当前进度, 任务中间状态1
    int32 overTime = 5; // 任务过期时间 -1表示不限时
}

message AllianceCompetitionInfo {
    int64 allianceCompetitionId = 1; // 本次联盟总动员为哪个帮派效力
    int32 allianceCompetitionTicket = 2; // 当前是否拥有联盟总动员门票 0-无 1-有
    int64 allianceCompetitionScore = 3; // 我的联盟总动员积分
    int32 allianceCompetitionGetTaskNum = 6; // 可领任务次数
    int32 allianceCompetitionBuyTaskNum = 7; // 已购买任务次数
    int32 allianceCompetitionRankLv = 8; // 本次联盟总动员效力帮派的段位
    int32 allianceCompetitionRankId = 9; // 本次联盟总动员效力帮派的段位Id
    int32 allianceCompetitionReadyGetTaskNum = 10; //已接取的次数
    int32 allianceCompetitionTodayBuyTaskNum = 11; // 今日已购买任务次数
}

message AllianceOtherQuest {
    int32 questId = 1; // competitionQuest模板
    SimplePlayerInfo player = 4; // 该任务被领取玩家信息
}

message AllianceCompetitionQuest {
    int32 index = 1; // 任务排序
    int32 questId = 2; // 被领取之后就是0
    int32 refTime = 3; // 任务刷新倒计时,只有任务ID是0的时候这个才不为zeroTime
}

message PersonalCompetitionQuest {
    int32 index = 1; // 任务排序
    int32 questId = 2; // 被领取之后就是0
    int32 refTime = 3; // 任务刷新倒计时,只有任务ID是0的时候这个才不为zeroTime
    int32 canClaimNum = 4; // 专属任务今日剩余次数(每个位置不一样)
    int32 nowQuestId = 5; // 正在进行的专属任务
}

// msgType = 907
// 客户端 -> 服务器
// 打开联盟总动员领取奖励界面
message OpenAllianceCompetitionReward {
}

message OpenAllianceCompetitionRewardRt {
    int32 rt = 2;
    repeated int32 allianceCanReceived = 3; // 联盟积分奖励, 玩家可以领取的阶段
    repeated int32 personalCanReceived = 4; // 个人积分奖励, 玩家可以领取的阶段
    repeated int32 allianceReadyReceived = 5; // 联盟积分奖励, 玩家已经领取的阶段
    repeated int32 personalReadyReceived = 6; // 个人积分奖励, 玩家已经领取的阶段
}

// msgType = 908
// 客户端 -> 服务器
// 领取联盟总动员任务
message GetAllianceCompetitionQuest {
    int32 index = 1; // 任务排序
}

message GetAllianceCompetitionQuestRt {
    int32 rt = 2;
    int32 index = 3; // 任务排序
    int32 nowCompetitionQuestProtoId = 4; // 当前正在进行的总动员任务配置id
    int32 errorCode = 5;
    AllianceCompetitionQuest quests = 6; // 新增联盟总动员任务信息
}

// msgType = 909
// 客户端 -> 服务器
// 放弃联盟总动员任务
message RemoveAllianceCompetitionQuest {
    int32 index = 1; // 任务排序
}

message RemoveAllianceCompetitionQuestRt {
    int32 rt = 2;
}

// msgType = 910
// 客户端 -> 服务器
// 购买联盟总动员任务次数
message BuyAllianceCompetitionQuest {
}

message BuyAllianceCompetitionQuestRt {
    int32 rt = 2;
}

// msgType = 911
// 客户端 -> 服务器
// 领取任务奖励
message RewardAllianceCompetitionQuest {
    int32 index = 1; // 任务排序
}

message RewardAllianceCompetitionQuestRt {
    int32 rt = 2;
}

// msgType = 912
// 客户端 -> 服务器
// 有权限的人取消掉任务
message CancelAllianceCompetitionQuest {
    int32 index = 1; // 任务排序
}

message CancelAllianceCompetitionQuestRt {
    int32 rt = 2;
    int32 index = 3; // 任务排序
    int32 errorCode = 4;
}

// msgType = 913
// 客户端 -> 服务器
// 领取联盟总动员阶段奖励
message GetAllianceCompetitionReward {
    int32 allianceScore = 1; // 领取联盟积分档
    int32 personalScore = 2; // 领取个人积分档
}


message GetAllianceCompetitionRewardRt {
    int32 rt = 2;
    string resVo = 3;
}

// msgType = 914
// 客户端 -> 服务器
// 活动结束打开界面
message OpenAfterAllianceCompetition {
}

message OpenAfterAllianceCompetitionRt {
    int32 rt = 1;
    int32 beforeRankLv = 2; // 联盟参赛之前的段位
    int32 afterRankLv = 3; // 联盟参赛之后的段位
    int32 score = 4; // 本次参赛获取到的积分
}

// msgType = 915
// 客户端 -> 服务器
// 查询联盟内部数据排行榜
message QueryInAllianceRank {
    int32 rankType = 1; // 排行榜类型
}

message QueryInAllianceRankRt {
    repeated QueryInAllianceRankVo queryInAllianceRankVos = 2; // 排行内容
}

message QueryInAllianceRankVo {
    int64 playerId = 1; // 玩家ID
    string playerName = 2; // 玩家名字
    string playerNickName = 3; // 玩家昵称
    int64 areaNo = 4; // 玩家所处服务器
    int32 photo = 5; // 玩家头像
    repeated int64 value = 6; // 内容
    repeated int32 pos = 7; // 职位
    int64 power = 8; // 战斗力
    int32 curentPos = 9; // 官职
    int32 rank = 10; // 排名
    int32 anonymous = 11; // 匿名
    PhotoViewInfo photoInfo = 12; // 头像信息
}

// msgType = 916
// 客户端 -> 服务器
// 查询联盟数据排行榜
message QueryAllianceRank {
    int32 rankType = 1; // 排行榜类型  1-联盟战斗力  2-联盟杀敌数 3-联盟总动员帮派排行榜 4-联盟魔物积分排行
    int32 page = 2;
    int32 num = 3;
    int32 subType = 4; // 查找范围 1-全球 2-本服
}

message QueryAllianceRankRt {
    repeated QueryAllianceRankVo queryAllianceRankVos = 2; // 排行内容
    int32 page = 3;
    int32 myAllianceRank = 4; // 我帮派的排行  0表示不再前100
    int64 myAllianceScore = 5; // 我帮派的成绩
}

message QueryAllianceRankVo {
    int64 allianceId = 1; //联盟ID
    int32 flagColor = 2; //旗帜的颜色模版ID
    int32 flagStyle = 3; //旗帜的样式模版ID
    int32 flagEffect = 4; //旗帜的图案模版ID
    string allianceName = 5; //联盟名称
    string allianceShortName = 6; //联盟简称
    int64 value = 7; //内容
    int32 state = 8; //州标签
    int32 rank = 11;
    string mainPlayerName = 12; // 盟主名字
    int32 worldId = 13;         // 联盟所在world
}

// msgType = 917
// 客户端 -> 服务器
// 查询联盟内部数据首页排行榜
message QueryInAllianceFirstRank {
}

message QueryInAllianceFirstRankRt {
    repeated QueryInAllianceFirstRankVo queryInAllianceFirstRankVo = 3; // 排行内容
}

message QueryInAllianceFirstRankVo {
    int32 rankType = 1;
    QueryInAllianceRankVo queryInAllianceRankVos = 2; // 排行内容
    QueryInAllianceRankVo myVos = 3; // 我的数据
}

// msgType = 918
// 客户端 -> 服务器
// 查询占领的奇观信息
message QueryOccupyWonder {
}

message QueryOccupyWonderRt {
    repeated OccupyWonder occupyWonderInfo = 2; //奇观信息
    repeated OccupyWorldCheckPoint occupyWorldCheckPointInfo = 3; //关卡信息
    repeated OccupyRes occupyResInfo = 4; //资源矿信息
}

message OccupyWonder {
    int64 worldId = 1; //世界Id
    int32 areaNo = 2; //区号
    repeated int32 wonderIds = 3; //奇观配置Id
}

message OccupyWorldCheckPoint {
    int64 worldId = 1; //世界Id
    int32 areaNo = 2; //区号
    repeated int32 checkPointIds = 3; //关卡配置Id
}

message OccupyRes {
    int64 worldId = 1; //世界Id
    int32 areaNo = 2; //区号
    repeated int32 resIds = 3; //资源矿配置Id
}

// msgType = 919
// 客户端 -> 服务器
// 删除联盟外交留言
message RemoveAllianceWaijiao {
    repeated int64 removeIds = 1; // 要删除的留言IDS
}

message RemoveAllianceWaijiaoRt {
    repeated int64 removeIds = 2; // 真正删除掉的留言IDS
}

// msgType = 920
// 客户端 -> 服务器
// 打开联盟boss界面
message OpenAllianceBoss {
}

message OpenAllianceBossRt {
    AllianceBossVo allianceBossVo = 2;
    int32 fightCount = 3; // 可战斗次数
    int32 lastFightTime = 4; // 战斗次数上次变化时间
}

message AllianceBossVo {
    int32 bossId = 2;
    int32 level = 3;
    int64 nowHp = 4;
    int32 overTime = 5; // 当前BOSS消失时间
    int32 nextRefTime = 6; // 下个boss刷新时间
    int32 lastBossId = 7; // 上一次打的boss的id
    int32 lastBossState = 8; // 上一只boss状态 1-击杀 2-逃跑
    repeated AllianceBossHistoryRecord allianceBossHistoryRecords = 9;
    int64 totleHp = 10; // 总血量
    repeated QueryRankInfoRt rankInfo = 11; //前三名排行数据
}

message AllianceBossHistoryRecord {
    int64 playerId = 1;
    string playerName = 2;
    int64 damage = 3;
    int32 atkTime = 4;
    int32 belongState = 5; // 所属洲
}

// msgType = 921
// 客户端 -> 服务器
// 开打联盟boss
message BeginFightAllianceBoss {
    repeated pb4battle.EliminateItem eliminateItems = 1; // 要带进去的药
    repeated WalkForceArraySite arrayInfo = 2; // 派遣武将
}

message BeginFightAllianceBossRt {
    int64 nextFightTime = 1; // 下次可战斗时间
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 922
// 客户端 -> 服务器
// 联盟boss结算
message EndFightAllianceBoss {
    int32 fightResult = 1; //战斗结果
    pb4battle.EliminateFight eliminateFightInfos = 2; // 三消战斗战斗情况
}

message EndFightAllianceBossRt {
    int32 fightResult = 2; // 挑战结果,经过战斗服判定后的战斗结果
    int32 overTime = 3; // 结束时间
    int32 bossId = 4;
    int64 atkHurt = 5; // 造成的伤害
    int64 totleHp = 6; // 总血量
    int64 nowHp = 7; // 当前血量
}

// msgType = 923
// 客户端 -> 服务器
// 查看联盟boss排行榜
message AllianceBossRank {
}

message AllianceBossRankRt {
    repeated QueryRankInfoRt rankInfo = 2;
}

// msgType = 924
// 客户端 -> 服务器
// 道具兑换成领主经验
message ExchangeKingExp {
    int32 type = 1; // 操作标签 1-装备  2-道具
    repeated DonateAllianceBagVo donateAllianceBagVos = 2;
}

message DonateAllianceBagVo {
    int64 propsId = 1;
    int32 num = 2;
}

message ExchangeKingExpRt {
}

// msgType = 925
// 客户端 -> 服务器
// 打开联盟仓库
message OpenAllianceBag {
    int32 openType = 1; // 是否需要拿货品数据 0-否 1-是
}

message OpenAllianceBagRt {
    repeated OpenAllianceBagVo openAllianceBagVos = 2;
    int32 lvSet = 3; // 捐献品质最低要求
}

message OpenAllianceBagVo {
    int32 protoId = 1;
    int32 num = 2;
    int64 id = 3; // 服务器生成的唯一ID 用于兑换的时候传来唯一
}

// msgType = 926
// 客户端 -> 服务器
// 捐献东西给联盟仓库
message DonateAllianceBag {
    int32 type = 1; // 操作标签 1-装备  2-道具
    repeated DonateAllianceBagVo donateAllianceBagVos = 2;
    int32 lvSet = 3; // 捐献品质最低要求
}

message DonateAllianceBagRt {
}

// msgType = 927
// 客户端 -> 服务器
// 从联盟仓库兑换东西
message ExchangeAllianceBag {
    repeated OpenAllianceBagVo openAllianceBagVos = 1;
}

message ExchangeAllianceBagRt {
    int32 resultCode = 2;
}

// msgType = 928
// 客户端 -> 服务器
// 修改联盟仓库捐献要求
message ChangeAllianceBagSet {
    int32 lvSet = 1;
}

message ChangeAllianceBagSetRt {
}

// msgType = 929
// 客户端 -> 服务器
// 开打联盟boss
message AutoFightAllianceBoss {
    repeated WalkForceArraySite arrayInfo = 1; // 派遣武将
}

message AutoFightAllianceBossRt {
    int32 fightResult = 2; // 挑战结果,经过战斗服判定后的战斗结果
    int32 overTime = 3; // 结束时间
    int32 bossId = 4;
    int64 atkHurt = 5; // 造成的伤害
    int64 totleHp = 6; // 总血量
    int64 nowHp = 7; // 当前血量
    int64 mailExtendId = 8;
}

// msgType = 930
// 客户端 -> 服务器
// 跨服竞技场排名
message QueryJjcAllRank {
    int32 start = 1;
    int32 over = 2;
}

message QueryJjcAllRankRt {
    QueryJjcAllRankVo myInfo = 1;
    repeated QueryJjcAllRankVo vos = 2;
}

message QueryJjcAllRankVo {
    int32 rank = 1;
    int64 playerId = 2;
    string name = 3;
    string allianceShortName = 4;
    int32 photo = 5;
    int32 score = 6;
    int32 state = 7;
    int32 areaNo = 8;
}

// msgType = 931
// 客户端 -> 服务器
// 查询联盟科技主界面
message QueryAllianceEffect {
}

message QueryAllianceEffectRt {
    repeated AllianceEffectProto allianceEffectProtos = 1;
    int32 nowEffectNum = 2; // 剩余可捐献次数
    int32 lastEffectTime = 3; // 上次结算时间
    int64 todayNum = 4; // 今天获得的科技值
    repeated AllianceResEnum allianceResVos = 5; //占领的资源矿信息
    int32 todayDonateTime = 6; // 今日捐献次数
}

message AllianceEffectProto {
    int32 effectProtoId = 1; // 科技模板ID 是 researchId 字段 不是id字段
    int32 lv = 2; // 科技等级
    int64 exp = 3; // 科技经验
    int32 lvUpOverTime = 4; // 科技升级结束时间
    int32 firstFlag = 5; // 是否设定为优先升级
    int64 skillExp = 6; // 技能经验
    int32 skillOverTime = 7; // 技能失效时间
    int32 nextUseSkillTime = 8; // 下次可以技能捐献的时间时间
}

// msgType = 932
// 客户端 -> 服务器
// 升级联盟科技
message AllianceEffectLvUp {
    int32 effectProtoId = 1; // 科技模板ID 是 researchId 字段 不是id字段
}

message AllianceEffectLvUpRt {
    int32 lvUpOverTime = 1; // 科技升级结束时间
}

// msgType = 933
// 客户端 -> 服务器
// 捐献联盟科技
message AllianceDonate {
    int32 protoId = 1; // 科技模板ID 这个协议里要传ID字段
    int32 useType = 2; // 1-普通捐献 2-钻石捐献
    int32 donateType = 3; // 捐献目标 1-科研 2-技能
}

message AllianceDonateRt {
    int64 exp = 1; // 科技经验
    int64 beishu = 2; // 暴击倍数
}

// msgType = 934
// 客户端 -> 服务器
// 设置推荐的科技
message AllianceEffectFirstSet {
    int32 effectProtoId = 1; // 科技模板ID 是 researchId 字段 不是id字段
}

message AllianceEffectFirstSetRt {
}

// msgType = 935
// 客户端 -> 服务器
// 使用联盟科技技能
message UseAllianceEffect {
    int32 effectProtoId = 1; // 科技模板ID 是 researchId 字段 不是id字段
}

message UseAllianceEffectRt {
}

// msgType = 936
// 客户端 -> 服务器
// 领取联盟总动员专属任务
message GetAllianceCompetitionOwnQuest {
    int32 index = 1; // 任务排序
}

message GetAllianceCompetitionOwnQuestRt {
    PersonalCompetitionQuest personalQuests = 7; // 联盟总动员专属任务信息
}

// msgType = 937
// 客户端 -> 服务器
// 放弃联盟总动员任务
message RemoveAllianceCompetitionOwnQuest {
    int32 index = 1; // 任务排序
}

message RemoveAllianceCompetitionOwnQuestRt {
    PersonalCompetitionQuest personalQuests = 7; // 联盟总动员专属任务信息
}

// msgType = 938
// 客户端 -> 服务器
// 完成联盟总动员任务
message RewardAllianceCompetitionOwnQuest {
    int32 index = 1; // 任务排序
}

message RewardAllianceCompetitionOwnQuestRt {
    PersonalCompetitionQuest personalQuests = 7; // 联盟总动员专属任务信息
}

// msgType = 939
// 客户端 -> 服务器
// 刷新联盟总动员专属任务
message RefreshAllianceCompetitionOwnQuest {
    int32 index = 1; // 任务排序
}

message RefreshAllianceCompetitionOwnQuestRt {
    PersonalCompetitionQuest personalQuests = 7; // 联盟总动员专属任务信息
}

// msgType = 940
// 客户端 -> 服务器
// 查询联盟总动员专属任务
message QueryAllianceCompetitionTask {
}

message QueryAllianceCompetitionTaskRt {
    repeated AllianceCompetitionQuest quests = 2; // 联盟总动员任务信息
    repeated AllianceOtherQuest others = 3;
}

// msgType = 941
// 客户端 -> 服务器
// 查询邀请好友
message QueryInviteFriendInfo {
}

message QueryInviteFriendInfoRt {
    repeated SimplePlayerVo players = 2; // 被邀请的好友信息
    repeated string openIds = 3; // 已经发起邀请的openId
}

// msgType = 942
// 客户端 -> 服务器
// 发起邀请
message InitiateInvite {
    string openId = 1;
    string nickName = 2;
}

message InitiateInviteRt {
}

message BlessingBagWrapper {
    int32 bagId = 1;
    repeated RewardVO reward = 2;
    int64 leftNum = 3;  // 剩余数量

    message RewardVO {
        string ResVo = 1;   // 福袋对应的资源
        bool received = 2;  // 是否已经领取
        int32 taskProtoId = 3;
        int64 taskId = 4;
    }
}

message BlessingBagInfo {
    int32 bagId = 1;    // 福袋id
    int64 leftNum = 2;  // 剩余数量
    string ResVo = 3;   // 福袋对应的资源
    bool received = 4;  // 是否已经领取
    int32 taskProtoId = 5;
    int64 taskId = 6;
}

// msgType = 943
// 客户端 -> 服务器
// 领取联盟总动员阶段奖励
message ReceiveAllAllianceCmpttReward {
    // pass
}


message ReceiveAllAllianceCmpttRewardRt {
    int32 rt = 2;
    string resVo = 3;
}

// msgType = 944
// 客户端 -> 服务器
// 刷新联盟总动员任务
message RefreshAllianceCompetitionQuest {
    int32 index = 1; // 任务排序
}

message RefreshAllianceCompetitionQuestRt {
    AllianceCompetitionQuest quest = 2; // 联盟总动员任务信息
}


// msgType = 947
// 客户端 -> 服务器
// 查询平台能力封禁情况
message QueryPlatformAbility {
}

message QueryPlatformAbilityRt {
    repeated IntToIntKV bans = 2;
}

// msgType = 948
// 客户端 -> 服务器
// 查询平台好友赠礼情况
message QueryPlatformRewardStatus {
}

message QueryPlatformRewardStatusRt {
    repeated string openId = 2; // 已经赠送过的openId
}

// msgType = 949
// 客户端 -> 服务器
// 向平台好友赠礼
message SendPlatformFriendReward {
    string opendId = 1;
    string playerId = 2;
}

message SendPlatformFriendRewardRt {
    string resVo = 2;
}

// msgType = 950
// 客户端 -> 服务器
// 平台任务完成
message CompletePlatformMission {
    int32 type = 1; // 3:每日分享, 6: 福利礼包
    repeated string param = 2;
}

message CompletePlatformMissionRt {
}

// msgType = 951
// 客户端 -> 服务器
// 刷新平台特权
message RefreshPrivilege {
    int32 privilege = 1;
}

message RefreshPrivilegeRt {
}

// msgType = 952
// 客户端 -> 服务器
// 查询联盟数据排行榜
message QueryAllianceCompetitionRank {
    int32 page = 1;
    int32 num = 2;
}

message QueryAllianceCompetitionRankRt {
    repeated QueryAllianceRankVo queryAllianceRankVos = 2; // 排行内容
    int32 page = 3;
    int32 myAllianceRank = 4; // 我帮派的排行  0表示不再前100
    int64 myAllianceScore = 5; // 我帮派的成绩
}

// msgType = 1000
// 客户端 -> 服务器
// 开始三消战斗
message BeginEliminateFight {
    WalkForceInfo walkForceInfo = 1; // 战斗对象
    int64 targetId = 2; // 战斗的对手的id PVE有模板ID 打玩家有玩家ID 游戏无一对多
    BeginBigMapEliminateFightExtendInfo extendInfo = 3;
    int32 fightType = 4;
}

// 沙盘上的三消战一般会使用到这些额外的数据
message BeginBigMapEliminateFightExtendInfo {
    int32 posX = 1;
    int32 posY = 2;
    int64 groupId = 3;
}

message BeginEliminateFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 1; // 战斗需要的所有数据
    int64 targetId = 2; // 战斗的对手的id PVE有模板ID 打玩家有玩家ID 游戏无一对多
    BeginBigMapEliminateFightExtendInfo extendInfo = 3;
    int32 fightType = 4;
}

// msgType = 1001
// 客户端 -> 服务器
// 结算三消战斗
message EndEliminateFight {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightType = 2;
}

message EndEliminateFightRt {
    string rewardString = 1; // 战斗胜利奖励
    repeated EndFightHeroState endFightHeroState = 2;
    ResInstanceReward resInstanceReward = 3;
    int32 fightType = 4;

    // 不同的战斗有不同的模块数据需要返回
    JjcFightRt jjcFightRt = 11;
    CpTowerFinishFightRt cpTowerFinishFightRt = 12;
    EliminateDragonTreasureFinishRt eliminateDragonTreasureFinishRt = 13;
    EliminateInstanceAtkFinishRt eliminateInstanceAtkFinishRt = 14;
    PollutedFinishFightRt pollutedFinishFightRt = 15;
    EliminateRandomEventAtkFinishRt eliminateRandomEventAtkFinishRt = 16;
    EliminateWorldBossAtkFinishRt eliminateWorldBossAtkFinishRt = 17;
    EliminateEliteMonsterAtkFinishRt eliminateEliteMonsterAtkFinishRt = 18;
    EndFightBigCityRt endFightBigCityRt = 19;
    EndFightPveRobRt endFightPveRobRt = 22;
    EndSideTaskFightRt endSideTaskFightRt = 23;
    RadarEliminateMonsterAtkFinishRt radarEliminateMonsterAtkFinishRt = 24;
    FistivalBossFinishFightRt fistivalBossFinishFightRt = 25;
    EliminateChallengeFightRt eliminateChallengeFightRt = 26;
}

message EliminateChallengeFightRt {

}

// msgType = 1006
// 客户端 -> 服务器
// 更换领主
message UpdateMainHero {
    int64 heroId = 1; // 要换成的武将ID
}

message UpdateMainHeroRt {
    int64 heroId = 2; // 要换成的武将ID 就是新领主ID
}

// 英雄无敌版武将养成消息 1011 - 1020
// msgType = 1011
// 客户端 -> 服务器
// 武将升级
message InvincibleHeroLvUp {
    int64 heroId = 1; // 要升级的武将id
    repeated IntToIntKV props = 2; // 使用的道具,道具模板id -> 数量
}

message InvincibleHeroLvUpRt {
}

// msgType = 1012
// 客户端 -> 服务器
// 武将升星
message InvincibleHeroStarLvUp {
    int64 heroId = 1; // 要升级的武将ID
    repeated IntToIntKV res = 2; // 花费的资源,道具模板id->数量
}

message InvincibleHeroStarLvUpRt {
    int64 heroId = 2; // 要升级的武将ID
    int32 endTime = 3; // 升级完成时间 , 如果不需要时间,就传0
}

// msgType = 1013
// 客户端 -> 服务器
// 武将进阶
message InvincibleHeroSuperUp {
    int64 heroId = 1; // 要升级的武将ID
}

message InvincibleHeroSuperUpRt {
    int64 heroId = 2; // 要升级的武将ID
    int32 endTime = 3; // 升级完成时间 , 如果不需要时间,就传0
}

// msgType = 1014
// 客户端 -> 服务器
// 万能英雄碎片兑换
message HeroFragmentExchange {
    int32 propId = 1; // 万能英雄碎片模板id
    int32 num = 2; // 万能英雄碎片个数
    int32 targetPropId = 3; // 要兑换的英雄碎片的模板id
}

message HeroFragmentExchangeRt {
}

// msgType = 1015
// 客户端 -> 服务器
// 英雄一键升级查询
message HeroOneKyUpQuery {
    int64 heroId = 1; // 英雄唯一id
}

message HeroOneKyUpQueryRt {
    HeroOneKyUpResult result = 1; // 一键升级的结果
}

message HeroOneKyUpResult {
    int64 heroId = 1; // 英雄唯一id
    int32 heroProtoId = 2; // 英雄模板id
    int32 lv = 3; // 一键升级后英雄的等级
    int32 breakLv = 4; // 一键升级后英雄的突破等级
    int32 eliSkill = 5; // 一键升级后英雄的三消技能
    int64 costExp = 6; // 一键升级消耗的总英雄经验
    string costBreakLvProps = 7; // 一键升级需要扣除的英雄突破道具
    string costExpProps = 8; // 一键升级需要扣除的经验道具
    int64 backExp = 9; // 需要返还到英雄经验池中的经验
}

// msgType = 1016
// 客户端 -> 服务器
// 英雄一键升级应用
message HeroOneKyUpApply {
    HeroOneKyUpResult result = 1; // 一键升级的结果,一旦服务器再次模拟结果不一样将会报错
}

message HeroOneKyUpApplyRt {
}

// msgType = 1019
// 客户端 -> 服务器
// 领取武将升星
message InvincibleHeroGetStarLvUp {
    int64 heroId = 1; // 武将ID
}

message InvincibleHeroGetStarLvUpRt {
}

// msgType = 1021
// 客户端 -> 服务器
// 武将重置
message InvincibleHeroReset {
    int64 heroId = 1;
}

message InvincibleHeroResetRt {
    repeated IntToStringKV backRes = 1; // 返还的资源,类型->资源
    // 1升级,2升星,3升品质,4升阶
}

// msgType = 1022
// 客户端 -> 服务器
// 武将重置预览
message InvincibleHeroPreviewSpending {
    int64 heroId = 1;
}

message InvincibleHeroPreviewSpendingRt {
    repeated IntToStringKV backRes = 1; // 将会返还的资源,类型->资源
}

// msgType = 1023
// 客户端 -> 服务器
// 曾获得过的英雄碎片查询
message HeroFragmentHistoryQuery {
}
message HeroFragmentHistoryQueryRt {
    repeated int32 propProtoId = 1; // 英雄碎片道具模板id
}

// msgType = 1024
// 客户端-> 服务端
// 查询英雄被
message ViewHeroPrisoned {
}
message ViewHeroPrisonedRt {
}

// msgType = 1027
// 客户端 -> 服务器
// 英雄突破等级升级
message HeroBreakLvUp {
    int64 heroId = 1; // 英雄唯一id
}
message HeroBreakLvUpRt {
}

// msgType = 1028
// 客户端 -> 服务器
// 英雄技能等级升级
message HeroSlgSkillLvUp {
    int64 heroId = 1; // 英雄id
    int32 skillId = 2; // 技能id
}
message HeroSlgSkillLvUpRt {
    int64 heroId = 3; // 英雄id
    int32 skillId = 4; // 技能id
}

// msgType = 1029
// 客户端 -> 服务器
// 英雄升级道具消耗预览
message HeroLvUpgradePreview {
    int64 heroId = 1; // 英雄id
}

message HeroLvUpgradePreviewRt {
    int64 heroId = 1; // 英雄id
    string costRewards = 2;//预计消耗的道具信息
    int32 finalAddExp = 3;//预计消耗经验
}

// msgType = 1030
// 客户端 -> 服务器
// 英雄消耗道具升级
message HeroLvUpgrade {
    int64 heroId = 1; // 英雄id
}

message HeroLvUpgradeRt {
    int64 heroId = 1; // 英雄id
    string costRewards = 2;//消耗的道具信息
    int32 finalAddExp = 3;//最终消耗经验
}

// msgType = 1051
// 客户端 -> 服务器
// 升级科技
message ResearchLvUp {
    int32 researchId = 1; // 要升级科技的ID 配置表的id字段
    int32 researchType = 2; // 研发类型  1-普通研发  2-元宝补齐资源研发
}

message ResearchLvUpRt {
    int32 researchId = 2; // 要升级科技的ID 配置表的id字段
    int32 researchType = 3; // 研发类型  1-普通研发  2-元宝补齐资源研发
}

// msgType = 1052
// 客户端 -> 服务器
// 取消科技
message CancelResearchLvUp {
    int32 researchId = 1; // 要取消升级科技的ID  发的是科技的ID,与1051是不同的
}


message CancelResearchLvUpRt {
}

// msgType = 1053
// 客户端 -> 服务器
// 查询科技信息
message QueryResearch {
}

message QueryResearchRt {
    repeated ResearchInfo researchs = 2; // 玩家的科技信息
    repeated IntToLongKV researchRewardTime = 3; // 奖励的科技缩短时间,key为科技表唯一id，value为秒
}

// msgType = 1061
// 客户端 -> 服务器
// 秒加速
message ClearTime {
    int32 clearType = 1; // 要加速的功能  1-科技 2-造兵 3-秒治疗兵 4-秒建筑 5- 秒锻造  6- 秒武将升星  7-秒武将升阶  8 -秒晋升  9-秒联盟宝藏  12-秒治疗兵(活动)
    repeated IntToIntKV clearProps = 2; //使用的加速道具，若为空 并且时间之力(6号字段)也为0，则代表使用元宝秒所有CD
    int32 allowOverFlow = 3; //是否允许溢出 0、否 1、是
    int32 overTime = 5; //结束时间
    int64 instanceTime = 6; // 要使用的时间之力
    int64 extendsId = 7; // 扩展字段
}

message ClearTimeRt {
    int32 clearType = 2; // 要加速的功能  1-科技 2-造兵 3-秒治疗兵 4-秒建筑 5- 秒锻造  6- 秒武将升星  7-秒武将升阶  8 -秒晋升  9-秒联盟宝藏
}

// msgType = 1062
// 客户端 -> 服务器
// 购买resShop表里的东西,资源包与时间加速道具
message BuyResShop {
    int32 buyId = 1; // 要购买的物品,resShop表中的goodsId
    int32 buyNum = 2; // 要购买的数量
}

message BuyResShopRt {
}

// msgType = 1063
// 客户端 -> 服务器
// 使用道具
message UseProp {
    repeated LongToIntKV useProps = 1; //使用的物品 唯一Id-数量
    string extendVal = 3; // 扩展字段
}

message UsePropRt {
    string resString = 2; //获得的奖励
}

// msgType = 1064
// 客户端 -> 服务器
// 购买并使用道具
message BuyAndUseProp {
    int64 usePropId = 1; // 使用物品的配置ID
    int32 usePropNum = 2; // 使用的物品数量
    string extendVal = 3; // 扩展字段
}

message BuyAndUsePropRt {
    string resString = 2; //获得的奖励
}

// msgType = 1065
// 客户端 -> 服务器
// 购买diamonConsume表特定列
message DiamondConsume {
    int32 strategy = 1; // 执行策略, eg.1行动力、2龙塔体力
}

message DiamondConsumeVo {
    int32 lastBuyTime = 1; // 上次购买时间
    int32 buyCount = 2; // 已经购买次数
    int32 strategy = 3;
}

message DiamondConsumeRt {
    repeated DiamondConsumeVo vo = 2;
}

// msgType = 1066
// 客户端 -> 服务器
// 铁匠铺(战印、装备原材料的合成分解)
message SmithyExchangeSplit {
    int32 protoId = 1;
    int32 num = 2;
    int32 split = 3; // 是否是分解(非0为是,否则就是合成)
}
message SmithyExchangeSplitRt {
}

// msgType = 1071
// 客户端 -> 服务器
// 打开联盟帮助界面
message OpenAllianceHelp {
    int32 queryDetailInfo = 1; // 是否需要详细数据
}

message OpenAllianceHelpRt {
    repeated MyHelpVo myHelpVo = 1; // 我的研发信息
    repeated AllianceHelpVo allianceHelpVos = 2; //帮助信息列表
    int32 todayGetAllianceCoin = 3; // 今日已获得的联盟币值
    int32 show = 4; // 主界面快捷图标是否亮起 只有请求里的queryDetailInfo是0的才会有赋值逻辑
}

message MyHelpVo {
    int64 helpId = 1; // 帮助信息的唯一ID
    int32 helpType = 2; // 帮助类型  1-研发帮助
    int32 maxHelpNum = 3; // 上限帮助次数
    int32 nowHelpNum = 4; // 当前帮助次数
    int64 helpValue1 = 5; // 信息1  对于不同的帮助类型有不同的意义,如 这个字段一般表示唯一ID
    int64 helpValue2 = 6; // 信息2  对于不同的帮助类型有不同的意义,如 这个字段一般表示模板ID
    int64 helpValue3 = 7; // 信息3  对于不同的帮助类型有不同的意义,如 这个字段一般表示等级
    int64 helpValue4 = 8; // 信息4  对于不同的帮助类型有不同的意义,如 这个字段暂无意义,预留
    int32 canCost = 9; // 每次被帮助时的减少值
}

message AllianceHelpVo {
    int64 helpId = 1; // 帮助信息的唯一ID
    int32 helpType = 2; // 帮助类型  1-研发帮助
    int32 maxHelpNum = 3; // 上限帮助次数
    int32 nowHelpNum = 4; // 当前帮助次数
    int64 helpPlayerId = 5; // 需要帮助的玩家ID
    string helpPlayerName = 6; // 需要帮助的玩家名
    int64 helpValue1 = 7; // 信息1  对于不同的帮助类型有不同的意义,如 这个字段一般表示唯一ID
    int64 helpValue2 = 8; // 信息2  对于不同的帮助类型有不同的意义,如 这个字段一般表示模板ID
    int64 helpValue3 = 9; // 信息3  对于不同的帮助类型有不同的意义,如 这个字段一般表示等级
    int64 helpValue4 = 10; //信息4  对于不同的帮助类型有不同的意义,如 这个字段暂无意义,预留
    int32 photoId = 11; // 玩家头像
    repeated int32 positions = 12; //职位
    int32 jjcScore = 13;
    PhotoViewInfo photoInfo = 14;
    int32 canCost = 15; // 每次被帮助时的减少值
}

// msgType = 1072
// 客户端 -> 服务器
// 登记帮助信息
message SendAllianceHelp {
    int32 helpType = 1; // 帮助类型
    int64 helpValue1 = 2; // 信息1  对于不同的帮助类型有不同的意义,如 这个字段一般表示唯一ID
    int64 helpValue2 = 3; // 信息2  对于不同的帮助类型有不同的意义,如 这个字段一般表示模板ID
    int64 helpValue3 = 4; // 信息3  对于不同的帮助类型有不同的意义,如 这个字段一般表示等级
    int64 helpValue4 = 5; // 信息4  对于不同的帮助类型有不同的意义,如 这个字段暂无意义,预留
}

message SendAllianceHelpRt {
    int32 helpType = 2; // 帮助类型
}

// msgType = 1073
// 客户端 -> 服务器
// 进行帮助
message GoAllianceHelp {
    repeated AllianceHelpVo allianceHelpVos = 1; //要帮助的集合
}

message GoAllianceHelpRt {
    int32 allianceHelpTodayGet = 2;
    int32 todayGetAllianceCoin = 3; // 今日已获得的联盟币值
}

message StolenRecord {
    int64 thiefId = 1; // 小偷玩家id
    string thiefName = 2; // 小偷玩家名
    int64 thiefAllianceId = 3; // 小偷联盟id
    string thiefAllianceShortName = 4; // 小偷联盟名
    repeated IntToLongKV stolenProp = 5; // 赃物,道具id->数量,空表示偷失败了
    int32 time = 6; // 盗窃发生的时间
}

message CabbageFieldInfo {
    int32 id = 1; // 菜地序号,1开始,对应于配置
    int32 farm = 2; // 种植的时间,产出完且被自己全收取后将会归零
    repeated int32 gatherIndex = 3; // 自己收取的产出次序
    int32 nowAvailableNum = 4; // 现在可收取/偷取的数量(自己是收取,别人是偷取)
    repeated int64 thiefId = 5; // 本次种植期间偷窃过本地块的人
    int32 nowProduct = 6; // 地里的当前的菜的数量(仅在查看别人的菜地时有效)
}

message CabbageInfo {
    int32 lv = 1;
    int64 exp = 2;
    int32 rareOpen = 3;
    repeated int32 drawLv = 4;
    repeated int32 drawRareLv = 5;
    repeated CabbageFieldInfo field = 6; // 菜地信息
    repeated IntToLongKV addUp = 7; // 累计收取的道具数量
    repeated int64 targetPlayerId = 8; // 选中的偷窃目标,id小于0为npc
    int32 lastExchange = 9; // 上次主动更换偷窃目标的时间
    repeated StolenRecord record = 10; // 被偷记录
    int32 leftSteal = 11; // 偷窃次数
    int32 stealRefreshTime = 12; // 偷窃次数刷新时间
}

// msgType = 1080
// 客户端 -> 服务器
// 偷菜查询
message CabbageQuery {
}
message CabbageQueryRt {
    repeated CabbageInfo cabbageInfo = 1; // 活动开了且玩家参与后才会有数据,否则直接为空
}

// msgType = 1081
// 客户端 -> 服务器
// 偷菜种植
message CabbagePlant {
    int32 fieldId = 1; // 地块序号
}
message CabbagePlantRt {
    int32 plant = 1; // 种植时间
}

// msgType = 1082
// 客户端 -> 服务器
// 偷菜收获
message CabbageHarvest {
    int32 fieldId = 1; // 地块序号
}
message CabbageHarvestRt {
    repeated IntToLongKV props = 1; // 收获的宝箱道具id -> 数量
    int32 lv = 2; // 等级
    int64 exp = 3; // 经验
}

message CabbageHostInfo {
    SimplePlayerVo playerInfo = 1; // npc的playerId将会小于0
    repeated IntToLongKV addUp = 2; // 累计收取的道具数量
    repeated CabbageFieldInfo field = 3; // 菜地信息
    int32 lv = 4; // 玩家偷菜等级
    int64 exp = 5; // 玩家偷菜经验
    repeated StolenRecord stolenRecord = 6; // 被偷记录
}

// msgType = 1083
// 客户端 -> 服务器
// 偷菜查看其他玩家信息(支持NPC,但不支持自己)
message CabbageViewOther {
    repeated int64 playerId = 1;
}
message CabbageViewOtherRt {
    repeated CabbageHostInfo player = 1;
}

// msgType = 1084
// 客户端 -> 服务器
// 偷菜摇被偷的人
message CabbageRollTarget {
}
message CabbageRollTargetRt {
    repeated CabbageHostInfo player = 1;
    int32 stealRefreshTime = 2; // 偷窃次数刷新时间
    int32 leftSteal = 3; // 可用偷窃次数
}

// msgType = 1085
// 客户端 -> 服务器
// 偷菜偷指定id的倒霉鬼(支持NPC)
message CabbageStealTarget {
    int64 targetId = 1;
    int32 fieldId = 2; // 菜地的序号
}

message CabbageStealTargetRt {
    int32 stealRefreshTime = 1; // 偷窃次数刷新时间
    int32 leftSteal = 2; // 可用偷窃次数
    repeated IntToLongKV stolenProp = 5; // 赃物,道具id->数量,空表示偷失败了
    int32 time = 6; // 盗窃发生的时间
    int32 failOfNothing = 7; // 默认0，非0即表示由于对方收了菜地导致盗窃失败

    int32 lv = 10; // 等级
    int64 exp = 11; // 经验
}

// msgType = 1086
// 客户端 -> 服务器
// 领取等级奖励
message CabbageDrawLvReward {
    repeated int32 lv = 1; // 领取的普通奖励等级
    repeated int32 rareLv = 2; // 领取的高级奖励等级
}
message CabbageDrawLvRewardRt {
}

// msgType = 1087
// 客户端 -> 服务器
// 果园升级--购买经验
message CabbageBuyExp {
    int32 expectLv = 1; // 准备提升的等级
}
message CabbageBuyExpRt {
    int32 lv = 2;
    int64 exp = 3;
}


message OpenAllianceResearchInfo {
    int32 allianceResearchId = 1; // 联盟科技ID
    int32 allianceResearchLv = 2; // 联盟科技等级
    int32 allianceResearchExp = 3; // 联盟科技经验
    int32 isFirst = 4; // 是否优先研发  0-否 1-是
}

// msgType = 1159
// 客户端 -> 服务器
// 查询时空之盒信息
message QueryTimeBox {
}

message QueryTimeBoxRt {
    repeated TimeBoxInfo timeBoxInfos = 2; //时光之盒信息
}

// msgType = 1160
// 客户端 -> 服务器
// 研究时光之盒
message StudyTimeBox {
    int32 timeBoxIndex = 1; // 槽位ID
}

message StudyTimeBoxRt {
    int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1161
// 客户端 -> 服务器
// 取消研究时光之盒
message CancelStudyTimeBox {
    int32 timeBoxIndex = 1; // 槽位ID
}

message CancelStudyTimeBoxRt {
    int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1162
// 客户端 -> 服务器
// 领取研究时光之盒奖励
message GetStudyTimeBoxReward {
    int32 timeBoxIndex = 1; // 槽位ID
}

message GetStudyTimeBoxRewardRt {
    int32 timeBoxIndex = 2; // 槽位ID
    string timeBoxReward = 3; // 奖励
}

// msgType = 1163
// 客户端 -> 服务器
// 放弃时光之盒奖励
message RemoveStudyTimeBoxReward {
    int32 timeBoxIndex = 1; // 槽位ID
}

message RemoveStudyTimeBoxRewardRt {
    int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1216
// 客户端 -> 服务器
// 查询君主信息
message QueryKingInfo {
    int64 playerId = 1; // 玩家ID
}

message QueryKingInfoRt {
    repeated KingInfo kingInfos = 2; //信息
    int64 playerId = 3; // 玩家ID
    repeated IntToIntKV effectInfos = 4;//effect信息
}

message KingInfo {
    int32 infoType = 1; //信息类别
    int64 value = 2; //信息值
}

message LordEquipStone {
    int32 position = 1;
    int32 level = 2;
}

message LordEquip {
    int32 equipType = 1;
    int32 level = 2;
    repeated LordEquipStone stone = 3;
    int32 strengthLv = 4;
}

message LordEquipInfo {
    repeated LordEquip lordEquip = 1;
    int32 currentClass = 2;
}

// msgType = 1240
// 客户端 -> 服务器
// 锻造或者升级领主装备
message LordEquipUp {
    int32 protoId = 1;
}
message LordEquipUpRt {
}

// msgType = 1241
// 客户端 -> 服务器
// 锻造或者升级领主装备上的宝石
message LordEquipStoneUp {
    int32 protoId = 1;
}
message LordEquipStoneUpRt {
}

// msgType = 1242
// 客户端 -> 服务器
// 领主天赋升级天赋页中的天赋
message LordTalentUp {
    int32 page = 1; // 天赋页序号
    int32 protoId = 2; // 模板id
    int32 toTopLevel = 3; // 升到顶级
}

message LordTalentUpRt {
    int32 protoId = 1; // 升级后天赋模板id
}

// msgType = 1243
// 客户端 -> 服务器
// 领主天赋重置天赋页
message LordTalentReset {
    int32 page = 1; // 天赋页序号
    int32 type = 2; // 天赋树类型,不支持0
}

message LordTalentResetRt {
}

// msgType = 1244
// 客户端 -> 服务器
// 领主天赋切换天赋页
message LordTalentPageSwitch {
    int32 page = 1; // 天赋页序号
}
message LordTalentPageSwitchRt {
}

// msgType = 1245
// 客户端 -> 服务器
// 领主天赋技能释放
message LordTalentSkillExecute {
    int32 protoId = 1;
}

// msgType = 1246
// 客户端 -> 服务器
// 切换领主装备分类
message LordEquipClassSwitch {
    int32 newClass = 1;
}
message LordEquipClassSwitchRt {
}

message LordTalentSkillExecuteRt {
}

// msgType = 1247
// 客户端 -> 服务器
// 领主装备强化
message LordEquipStrength {
    int32 protoId = 1;
}
message LordEquipStrengthRt {
}

// msgType = 1248
// 客户端 -> 服务器
// 领主等级一键升级预览
message LordOneClickLvUpgradePreview {
}
message LordOneClickLvUpgradePreviewRt {
    string costProps = 1;//预计消耗的道具信息
    int64 propsAllKingExp = 2;//预消耗道具提供的经验
}

// msgType = 1249
// 客户端 -> 服务器
// 领主等级一键升级应用
message LordOneClickLvUpgrade {
}
message LordOneClickLvUpgradeRt {
    string costProps = 1;//消耗道具信息
    int64 propsAllKingExp = 2;//道具提供的经验
}

// msgType = 1251
// 客户端 -> 服务器
// 查看行军组
message WatchWalkGroup {
    repeated int64 groupIds = 1;
}

message WatchWalkGroupRt {
}

// msgType = 1252
// 客户端 -> 服务器
// 查询行军线详细信息
message QueryWalkLineDetailInfo {
    int64 walkId = 1;
    int64 groupId = 2;
}

message QueryWalkLineDetailInfoRt {
    WalkRobot walk = 1;
}

message HeroForWalk {
    int32 isLord = 6; //是否是领主
    int32 pos = 7; // 位置
    int32 rsNum = 8; // 预备兵量
    int64 power = 9; // 英雄战力
    int32 maxRsNum = 10; // 最大英雄带兵量
    HeroInformationForProperties heroInformationForProperties = 20;
}

message SoliderForWalk {
    int32 propId = 1;
    int64 num = 2;
}

// msgType = 1253
// 客户端 -> 服务器
// 回城
message GoBackHome {
    int64 groupId = 1;
}

message GoBackHomeRt {
}

// msgType = 1254
// 客户端 -> 服务器
// 发起集结
message StartMass {
    int32 joinMassTime = 1; //加入集结时间
    int32 runType = 2; //打人、占领城、打遗迹
    int64 targetId = 3; //目标Id，追兵线Id、巢穴Id、奇观Id、资源矿Id、关卡Id
    string massName = 5; //集结军名称
    WalkForceInfo walkForceInfo = 6;
    RequireSoldier requireSoldier = 7;
    int32 x = 11;
    int32 y = 12;
}

message StartMassRt {
    int64 groupId = 4;
}

// 需要的兵信息
message RequireSoldier {
    int32 needLv = 1;
    repeated int32 needType = 2;
}

// msgType = 1255
// 客户端 -> 服务器
// 取消集结
message CancelMass {
    int64 massId = 1; //集结Id
}

message CancelMassRt {
}

// msgType = 1256
// 客户端 -> 服务器
// 查询联盟集结界面信息
message QueryAllianceMassInfo {
}

message QueryAllianceMassInfoRt {
    repeated MassGroup massGroups = 1;
    repeated ScoutReinforceGroup scoutReinforceGroups = 2;//单人打单人
    repeated MassReinforceGroup massReinforceGroups = 3;
    repeated RobotGroup robotGroup = 4;
    repeated AllianceBuildNowFireVo allianceBuildFireVos = 5; // 本帮正在燃烧的联盟建筑
    repeated NpcCityInFightVo npcCityInFightVos = 6; // npc城池信息
    repeated WalkForOccupyAllianceBuildVo walkForOccupyAllianceBuildVos = 7; // 出征联盟建筑信息(本盟出征或者本盟被出征或者本盟援助)
}

message WalkForOccupyAllianceBuildVo {
    AllianceBuildVo allianceBuild = 1; //  出征联盟建筑信息(三种场景:  本盟出征他盟\本盟被出征\本盟援助本盟建筑.注意:这个建筑不一定是本盟的)
    MassPlayer walkPlayer = 2; // 出征方玩家信息
    int32 x = 3; // 出征方主玩家坐标
    int32 y = 4; // 出征方主玩家坐标
    int32 startTime = 5; //出发时间
    int32 arriveTime = 6; //抵达时间
    int32 initialWalkTime = 7; //初始行军时间
    int64 groupId = 8; //行军组Id
    int32 runType = 9; //行军类型
}

message NpcCityInFightVo {
    NpcCityInfo npcCityInfo = 1;
    int64 belongAllianceId = 8; // 归属的联盟，根据这个判断是进攻还是防守
    AllianceInfo atkAllianceInfo = 9; // 进攻的联盟信息
}

message AllianceBuildNowFireVo {
    AllianceBuildVo fireAllianceBuild = 1; // 本帮正在燃烧的联盟建筑
    MassPlayer targetPlayer = 2; // 目标玩家信息
    int32 x = 3; // 目标玩家坐标
    int32 y = 4; // 目标玩家坐标
}

//机器人进攻信息
message RobotGroup {
    int32 startTime = 1; //出发时间
    int32 arriveTime = 2; //抵达时间
    int32 initialWalkTime = 3; //初始行军时间

    int32 startX = 5;
    int32 startY = 6;
    int32 gotoX = 7;
    int32 gotoY = 8;

    int32 cellType = 9;
    int64 targetId = 10; //目标Id（玩家、遗迹、奇观）
    int32 targetProtoId = 11; //目标模板Id
    int32 runType = 12; //行军类型

    int32 robotId = 20; //机器人模板id
    MassPlayer targetPlayer = 21; //目标玩家信息

    repeated MassForce reinforceForces = 30; //增援部队信息
    repeated IntToIntKV effects = 31; //效果
    int64 maxSolider = 32; //最大可增援数量
}

//理论上可以视为: 单人对单人出征的战斗预览信息.  不是单纯的侦察.
message ScoutReinforceGroup {
    int32 startTime = 1; //出发时间
    int32 arriveTime = 2; //抵达时间
    int32 initialWalkTime = 3; //初始行军时间
    int64 groupId = 4; //行军组Id

    int32 startX = 5;
    int32 startY = 6;
    int32 gotoX = 7;
    int32 gotoY = 8;

    int32 cellType = 9;
    int64 targetId = 10; //被出征的目标Id（玩家、遗迹、奇观）
    int32 targetProtoId = 11; //被出征的目标模板Id
    int32 runType = 12; //行军类型

    MassPlayer scoutPlayer = 20; //出征的玩家信息
    MassPlayer targetPlayer = 21; //被出征的玩家信息

    repeated MassForce reinforceForces = 30; //被出征的玩家的增援部队信息
    repeated IntToIntKV effects = 31; //效果
    int64 maxSolider = 32; //被出征的玩家的最大可增援数量
}

//敌方集结 增援部队信息
message MassReinforceGroup {
    int64 massId = 1;
    string massName = 2;
    int64 mainPlayerId = 4;

    int32 startX = 5;
    int32 startY = 6;
    int32 gotoX = 7;
    int32 gotoY = 8;

    int32 runType = 10;
    int32 cellType = 11;
    int64 targetId = 12; //目标Id（玩家、遗迹、奇观）
    int32 targetProtoId = 13; //目标模板Id

    int32 massStartTime = 21; //集结开始时间
    int32 massState = 22; //集结状态
    int32 startTime = 23; //状态开始时间
    int32 overTime = 24; //状态结束时间
    int32 initialWalkTime = 25; //初始行军时间

    MassPlayer massPlayer = 31; //发起的玩家信息
    MassPlayer targetPlayer = 32; //目标玩家信息

    repeated MassForce reinforceForces = 41; //增援部队信息
    repeated IntToIntKV effects = 42; //效果
    int64 maxSolider = 43; //最大可增援数量

    repeated MassForce forces = 44;
}

message MassGroup {
    int64 massId = 1;
    string massName = 2;
    int32 runType = 3;
    int64 mainPlayerId = 4;
    int32 startX = 5;
    int32 startY = 6;
    int32 gotoX = 7;
    int32 gotoY = 8;
    int64 targetId = 9; //目标Id（玩家、遗迹、奇观）
    MassPlayer targetPlayer = 10; //目标玩家信息
    int32 targetProtoId = 11; //目标模板Id

    int32 massStartTime = 20; //集结开始时间
    int32 massState = 21; //集结状态
    int32 startTime = 22; //状态开始时间
    int32 overTime = 23; //状态结束时间
    int32 initialWalkTime = 24; //初始行军时间

    int64 groupId = 30; //出发后的行军组Id
    int64 maxSolider = 31; //最大可集结数量
    repeated MassForce forces = 32;
    repeated IntToIntKV effects = 33; //效果
    int32 maxForceNum = 34; //最大可加入的队伍数量，包括发起者
    RequireSoldier requireSoldier = 35; // 需要的兵信息
}

message MassPlayer {
    int64 playerId = 9; //目标玩家Id
    string name = 10; //目标玩家名称
    int32 photo = 11; //目标玩家头像
    int64 allianceId = 12; //目标玩家联盟Id
    string allianceName = 13; //目标联盟名称
    string allianceShortName = 14; //目标联盟名称
    int64 playerPower = 15;
    int32 jjcScore = 16;
    PhotoViewInfo photoInfo = 17; //目标玩家头像
}

message MassForce {
    MassPlayer player = 1;
    int64 groupId = 2; //加入集结/增援的行军组Id
    int32 startTime = 3; //出发时间
    int32 arriveTime = 4; //抵达时间
    int32 stateChangeTime = 5; //状态变化时间
    repeated HeroForWalk heros = 6;
    repeated SoliderForWalk soliders = 7;
    int32 initialWalkTime = 8; //初始行军时间
    int64 forceId = 9; //部队Id
    int32 index = 10; //0代表未排序的部队
    repeated int32 heroEquip = 11;
    int64 evaluateTotalNum = 12;
    repeated int64 shuffledHeroIds = 13; //乱序的英雄id，用于集结技能生效排序
}

// msgType = 1257
// 客户端 -> 服务器
// 设置部队(技能)顺序
message SetForceOrder {
    int32 setType = 1;
    int64 targetId = 2;
    repeated int64 forceIdList = 3;
}

message SetForceOrderRt {
    int32 errorCode = 1;
}

// msgType = 1258
// 客户端 -> 服务器
// 查询联盟成员坐标
message QueryAllianceMemberPos {
    int64 targetPlayerId = 1;
}

message QueryAllianceMemberPosRt {
    int32 posX = 2;
    int32 posY = 3;
    map<int32, TransportInfo> transportInfo = 4; // key:资源类型，value:当日运输数量

    message TransportInfo {
        int64 lmt = 1; // 当日上限
        int64 transportNum = 2; // 当日运输数量
    }
}

// msgType = 1259
// 客户端 -> 服务器
// 集结成员遣返回家
message SendMassMemberHome {
    int64 massId = 1;
    repeated int64 tarPlayerIds = 2;
}

message SendMassMemberHomeRt {
}

// msgType = 1260
// 客户端 -> 服务器
// 增援成员遣返回家
message SendReinforcePlayerHome {
    int32 cellType = 1;
    int64 targetId = 2;
    repeated int64 groupIds = 3;
}

message SendReinforcePlayerHomeRt {
}

// msgType = 1261
// 客户端 -> 服务器
// 查询预警信息
message QueryWarnInfo {
}

message QueryWarnInfoRt {
    repeated WarnReinforceForce reinforceForces = 1; //联盟增援的部队
    repeated WarnGroup warnGroups = 2; //敌方进攻的部队

    int32 showLv = 100; //显示等级，用于位运算判断数据
}

message WarnReinforceForce {
    repeated MassForce forces = 1;

    int32 runType = 10;

    int32 cellType = 30;
    int32 targetProtoId = 31;
    int32 gotoX = 32;
    int32 gotoY = 33;

    string res = 40;
}

message WarnGroup {
    int64 mainPlayerId = 1; //部队主玩家Id
    int64 groupId = 2; //行军组Id
    int32 startTime = 3; //出发时间
    int32 arriveTime = 4; //抵达时间
    int32 initialWalkTime = 5; //初始行军时间
    int32 robotId = 6; //机器人配置Id
    int64 massId = 7; //集结id
    int32 runType = 8; //行军类型 侦查/进攻
    int32 startX = 10;
    int32 startY = 11;
    int32 massState = 12; //集结状态
    repeated MassForce forces = 21;
    int64 evaluateTotalNum = 22; //估算兵总量
    int64 occBuildAllianceId = 23; // 如果是联盟建筑的话 当前占领着这个建筑的联盟ID

    int32 cellType = 30;
    int32 targetProtoId = 31;
    int32 gotoX = 32;
    int32 gotoY = 33;
    string attackName = 34; //指挥官名字
    string defName = 35; //目标名
    int32 attackPlayerLv = 36; //指挥官等级
    repeated IntToIntKV talent = 37; //领主天赋
    repeated IntToIntKV talentDebuff = 38; //领主天赋debuff
    repeated IntToIntKV effect = 39; //科研效果
    repeated IntToIntKV effectDebuff = 40; //科研效果debuff
}


message MassWarnGroup {
    int64 massId = 1;
    string massName = 2;
    int32 runType = 3;

    int32 startX = 5;
    int32 startY = 6;
    int32 gotoX = 7;
    int32 gotoY = 8;
    MassPlayer player = 9; //发起玩家信息
    MassPlayer targetPlayer = 10; //目标玩家信息

    int32 cellType = 15; //地块类型
    int64 targetId = 16; //目标Id（玩家、遗迹、奇观）
    int32 targetProtoId = 17; //目标模板Id

    int32 massStartTime = 20; //集结开始时间
    int32 massState = 21; //集结状态
    int32 startTime = 22; //状态开始时间
    int32 overTime = 23; //状态结束时间
    int32 initialWalkTime = 24; //初始行军时间
    repeated IntToIntKV talent = 37; //领主天赋
    repeated IntToIntKV talentDebuff = 38; //领主天赋debuff
    repeated IntToIntKV effect = 39; //科研效果
    repeated IntToIntKV effectDebuff = 40; //科研效果debuff
}

// msgType = 1262
// 客户端 -> 服务器
// 查询增援兵量信息
message QueryReinforceSoldierInfo {
    int32 x = 1;
    int32 y = 2;
}

message QueryReinforceSoldierInfoRt {
    int64 mainPlayerId = 1;
    repeated MassForce reinforceForces = 41; //增援部队信息
    repeated IntToIntKV effects = 42; //效果
    int64 maxSolider = 43; //最大可增援数量
    RequireSoldier requireSoldier = 44; // 需要的兵信息

    AllianceCoinInfo coin = 50;

    message AllianceCoinInfo {
        int32 todayObtainedNum = 2; // 今日已经获得的联盟币
        repeated CoinForceInfo forces = 3; // 部队信息
    }

    message CoinForceInfo {
        int32 coins = 1; // 已经获取的数量
        int32 time = 2; // 上次结算的时间
        int32 state = 3; // 部队状态

        int64 forceId = 11; // 部队id
    }
}

// msgType = 1263
// 客户端 -> 服务器
// 检测能否集结目标
message CheckCanMass {
    int32 x = 1;
    int32 y = 2;
    int64 groupId = 3;
    repeated IntToLongKV soldiers = 5;
}

message CheckCanMassRt {
    int32 errorCode = 1;
    int32 removeCover = 2;
}

// msgType = 1264
// 客户端 -> 服务器
// 查询单个集结信息
message QueryMassInfo {
    int64 massId = 1;
}

message QueryMassInfoRt {
    MassGroup massGroup = 4; // 集结信息
}

// msgType = 1265
// 客户端 -> 服务器
// 查询增援部队数量
message QueryReinforceForceNum {
    int32 x = 1;
    int32 y = 2;
}

message QueryReinforceForceNumRt {
    int32 num = 1;
}

// msgType = 1266
// 客户端 -> 服务器
// 设置英雄战预设部队
message SetArmyPlan {
    int32 bigTarget = 1; //大目标 1、竞技场 2、推图 3、魔物 4、巨龙探索爬塔三消
    int32 smallTarget = 2; //小目标 竞技场进攻/防守 魔物1...N
    repeated HeroPos heroInfo = 3; //英雄信息
    int64 dragonId = 4; //巨龙Id
}

message SetArmyPlanRt {
}

message HeroPos {
    int32 pos = 1; //位置
    int64 heroId = 2; //英雄Id
    int32 rsNum = 3; //预备兵数量

    //特殊情况用
    HeroInformationForProperties heroInformationForProperties = 20;
}

// msgType = 1267
// 客户端 -> 服务器
// 查找英雄战预设部队
message GetArmyPlan {
    int32 bigTarget = 1; //大目标 1、竞技场 2、推图 3、魔物
    int32 smallTarget = 2; //小目标 竞技场进攻/防守 魔物1...N
}

message GetArmyPlanRt {
    repeated HeroPos heroInfo = 2; //英雄信息
    int64 dragonId = 3; //巨龙Id
}

// msgType = 1268
// 客户端 -> 服务器
// 检测是否自己的联盟领地
message CheckAllianceArea {
    int32 x = 1;
    int32 y = 2;
}

message CheckAllianceAreaRt {
    int64 allianceId = 1;
    int32 effective = 2;
}

// msgType = 1290
// 客户端 -> 服务端
// 爬塔信息查询
message CheckCpTower {
}
message TowerRec {
    int32 towerId = 1; // 塔id, 注意不是唯一行id
    repeated CheckPointRec checkPointRec = 2; // 关卡战斗记录
    repeated int32 drawStars = 4; // 已领取的星数奖励,星数
}
message CheckPointRec {
    int32 checkPointId = 1; // 关卡id, 注意不是唯一行id
    repeated IntToLongKV star = 2; // 星级记录
    int32 lastFightTime = 3; // 上次通关时间
    int32 todayWinTimes = 4; // 今日通关次数
}

message CheckPointAfkRecInfo {
    int32 towerId = 1; // 塔id，注意不是唯一行id
    int32 checkPoint = 2; // 关卡id, 注意不是唯一行id
    repeated IntToLongKV resSettle = 4; // 不同资源类型的结算时间
    int64 propSettle = 5; // 道具奖励起始时间,毫秒
    int64 propTime = 6; // 道具奖励上次领取时间,毫秒
    repeated IntToLongKV propGet = 7; // 道具已领取次数,道具模板id->次数
}

message CheckPointAfkInfo {
    repeated CheckPointAfkRecInfo afkRecInfo = 2;
    int32 quickAfkSettleTime = 3; // 快速挂机最后1次使用时间
    int32 quickAfkFreeUsed = 4; // 快速挂机免费已使用次数(3号字段所在的天,5号字段也一样)
    int32 quickAfkCostUsed = 5; // 快速挂机付费已使用次数
    int32 history = 6; // 已领取到挂机奖励历史次数,0表示从未领过
}

message CheckPointInfo {
    CheckPointAfkInfo checkPointAfkInfo = 1;
    repeated TowerRec towerRec = 2; // 塔战斗信息
    repeated IntToLongKV lastFightHero = 3; // 最后1次战斗的英雄,占位x -> 英雄id
}

message CheckCpTowerRt {
    CheckPointInfo checkPointInfo = 1; // 爬塔信息
    repeated IntToIntKV heroLvHistoryMax = 2; // 英雄等级历史最高数量
}

// msgType = 1291
// 客户端 -> 服务端
// 爬塔开始战斗
message CpTowerStartFight {
    WalkForceInfo walkForceInfo = 9;
    int32 cityProto = 2; // 要攻打的城池ID
}

message CpTowerStartFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// MsgType = 1292
// 客户端 -> 服务端
// 爬塔战斗结算
message CpTowerFinishFight {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message CpTowerFinishFightRt {
    repeated IntToLongKV star = 5; // 合并后的星级记录
    string starReward = 6; // 星级奖励,首通奖励是通过这个实现的
}

// MsgType = 1293
// 客户端 -> 服务端
// 爬塔快速通关
message CpTowerQuickPass {
    repeated MoveBigInnerCityHeroVo heroIds = 1;
    int32 cityProto = 2; // 要攻打的城池ID
}

message CpTowerQuickPassRt {
    string rewardString = 2; // 战斗胜利奖励
}

// msgType = 1294
// 客户端 -> 服务端
// 爬塔领奖
message CpTowerDrawOutputRes {
}
message CpTowerDrawOutputResRt {
    repeated IntToStringKV outputRes = 1; // 领到的奖励，无奖励则字符串为空(挂机时间小于最低可领取时间时),唯一行模板id -> 奖励
    CheckPointAfkInfo checkPointAfkInfo = 3; // 挂机信息
    string reward = 4; // 挂机奖励
}

// msgType = 1295
// 客户端 -> 服务端
// 爬塔领取累积星星奖励
message CpTowerDrawStarReward {
    int32 checkPointStarRewardProtoId = 1; // checkPointStarReward 表唯一行id
}

message CpTowerDrawStarRewardRt {
}

// msgType = 1296
// 客户端 -> 服务端
// 爬塔满星扫荡
message CpTowerSweep {
    int32 protoId = 1;
    int32 wipeNum = 2;
}
message CpTowerSweepRt {
    repeated IntToStringKV wipeResult = 1; // 每次扫荡的收获,序号从1开始
}

// msgType = 1297
// 客户端 -> 服务端
// 快速挂机
message CpQuickAfk {
}

message CpQuickAfkRt {
    int32 quickAfkSettleTime = 1; // 快速挂机最后1次使用时间
    int32 quickAfkFreeUsed = 2; // 快速挂机免费已使用次数(3号字段所在的天,5号字段也一样)
    int32 quickAfkCostUsed = 3; // 快速挂机付费已使用次数
}

// msgType = 1300
// 客户端 -> 服务器
// 迁服
message MoveServer {
    int64 worldId = 1; // 目标地图服的唯一ID
    int32 x = 2; //目标地图服的目标坐标X
    int32 y = 3; //目标地图服的目标坐标Y
}

message MoveServerRt {
}

// msgType = 1301
// 客户端 -> 服务器
// 迁服结束 创建新的playerSession并且初始化一些操作
message InitPlayerSessionAfterMoveServer {
    int64 playerId = 1; // 玩家ID
}

message InitPlayerSessionAfterMoveServerRt {
}

// msgType = 1302
// 客户端 -> 服务器
// 迁服列表
message AllServerInfo {
}

message AllServerInfoRt {
    repeated MoveServerInfoVo moveServerInfoVos = 2; // 服务器列表
}

message MoveServerInfoVo {
    int64 worldId = 1; // 服务器id
    int32 areaId = 2; // 服务器区号
    string areaName = 3; // 服务器名字
    string kingName = 4; // 服务器国王名
    int32 allianceAreaId = 5; // 王国所属联盟所在服
    string allianceName = 6; // 王国所属联盟名字
    string allianceShortName = 7; // 王国所属联盟简称
    int32 serverOpenTime = 8; // 服务器开服时间
    int32 wonderState = 9; // 奇观显示状态 1、和平 2、争夺 3、争夺失败状态(冒烟) 4、争夺胜利状态(冒火)
    int32 emperorCountryConfer = 10; // 大帝对国家进行的册封 0 代表没有, 值对应kingbuff表的ID
    int32 allianceLan = 11; // 王国所属联盟语言
    int64 allianceFightValue = 12; // 王国所属联盟战斗力
}

// msgType = 1303
// 客户端 -> 服务器
// 请求我的战斗力在即将迁往的目标服务器上的排名
message MoveServerCost {
    int64 worldId = 1; // 目标服务器id
}

message MoveServerCostRt {
    int32 rank = 2; // 排名 如果值为0表示100开外
}

// msgType = 1304
// 客户端 -> 服务器
// 查看所有可前往的服务器信息
message FindChangeServers {
    int32 isFindMyInfo = 1; // 是否查找我的数据
}

message FindChangeServersRt {
    repeated FindChangeServerVo serverVos = 2; // 服务器数据
}

message FindChangeServerVo {
    int64 fightValue = 1; // 玩家在这个服务器的战斗力
    int32 castleLv = 2; // 玩家在这个服务器的主堡等级
    string allianceShortName = 3; //玩家在这个服务器的联盟简称
    string playerName = 4; //玩家在这个服务器的名字
    ServerInfo serverInfo = 5; // 服务器基础数据
    int32 playerNum = 6; // 服务器当前人数
    int32 photoId = 7; // 玩家在这个服务器的头像
}

// msgType = 1305
// 客户端 -> 服务器
// 切换到另一区
message ChangePlayer {
    int64 worldId = 1;
}

message ChangePlayerRt {
}

// msgType = 1306
// 客户端 -> 服务器
// 获取我的所有角色列表
message FindAllRoles {
}

message FindAllRolesRt {
    repeated FindRoleVo role = 1; // 角色列表
}

message FindRoleVo {
    int64 worldId = 1; // 所在世界ID
    int64 playerId = 2; // 角色ID
    string name = 3; // 玩家名
    int64 loginTime = 4; // 最近登录时间
    int32 castleLv = 5; // 主堡等级
    int32 kingLv = 6; // 角色等级
    int64 regTime = 7; // 注册时间
    int32 photo = 8; // 头像ID
    string allianceShortName = 9; // 联盟简称
    string photoPictureUrl = 10; // 自定义头像URL
}

// msgType = 1311
// 客户端 -> 服务器
// 商店购买物品
message BuyShopTotal {
    int32 id = 1; // shopTotal表ID
    int32 num = 2; // 购买的数量
}

message BuyShopTotalRt {
}

// msgType = 1312
// 客户端 -> 服务器
// 挑战商品
message BuyLimitShopTotal {
    int32 id = 1; // shopTotal表ID
    int32 num = 2; // 购买的数量

}

message BuyLimitShopTotalRt {
    repeated LimitGoodsVo LimitGoodsVos = 2; //
}

message LimitGoodsVo {
    int32 shopId = 1;
    int32 limitNumb = 2; // 限购数量
    int32 lastBuyTime = 3; // 上次购买时间
}

message AllianceShopGridInfo {
    int32 grid = 1; // 格位
    int32 shipRefreshProtoId = 2; // shipRefresh表模板id
    int32 alreadyBuy = 3; // 已购买次数
}

message AllianceShopPageInfo {
    int32 nextRefresh = 1; // 下次刷新时间
    repeated AllianceShopGridInfo grid = 2; // 格位信息
}

// msgType = 1313
// 客户端 -> 服务端
// 联盟商店查询
message AllianceShopQuery {
}
message AllianceShopQueryRt {
    AllianceShopPageInfo day = 1; // 每日商品信息
    AllianceShopPageInfo week = 2; // 每周商品信息
}

// msgType = 1314
// 客户端 -> 服务端
// 联盟商店购买每日
message AllianceShopBuyDay {
    int32 grid = 1;
    int32 nextRefresh = 2; // 查询中拿到的下次刷新时间,充当版本号
    int32 num = 3; // 购买数量,最少1个
    int32 shop = 4;//商店类型
}
message AllianceShopBuyDayRt {
}

// msgType = 1316
// 客户端 -> 服务器
// 专属刷新商店--商品查询
message PersonalShopQuery {
    int32 type = 1;
}

message PersonalShopQueryRt {
    int32 refreshTime = 2; // 下次刷新的时间点
    repeated MerchantShipRecord records = 3;
}

// msgType = 1317
// 客户端 -> 服务器
// 专属刷新商店--商品兑换
message PersonalShopExchange {
    int32 type = 1;
    int32 gridId = 2; // 格子Id
    int32 num = 3; // 购买数量
}

message PersonalShopExchangeRt {
    string resVo = 2;
}

// msgType = 1318
// 客户端 -> 服务器
// 微信索要礼物
message WxGiftCenter {
    int32 giftCenterId = 1; // 索要的GiftCenter表id
    int32 num = 2; // 索要个数
}

message WxGiftCenterRt {
    string askOrderid = 1; // 微信索要订单号
    string weappUsername = 2; // 小程序的原始 id
    string weappPath = 3; // 小程序的 path
    string title = 4; // 小程序消息/结构化消息 title
    string desc = 5; // 小程序消息/结构化消息 desc id
    string webpageurl = 6;
}

// msgType = 1334
// 客户端 -> 服务器
// 打开活动总界面,只请求联盟活动的数据
message SeleteAllianceActivityInfos {
}

message SeleteAllianceActivityInfosRt {
    repeated AllianceActivityInfo allianceActivityInfoss = 2; // 活动ID
}

message AllianceActivityInfo {
    int32 activityId = 1; // 活动模版ID
    int32 score = 2; // 积分
    int32 rank = 3; // 我帮的排行
}

message PlayerActivityRankVo {
    int64 playerId = 1; // 玩家ID
    string playerName = 2; // 玩家名
    string nickName = 3; // 玩家昵称
    string allianceShortName = 4; // 联盟简称
    int32 score = 5; // 积分记录
    int32 photoId = 6; // 头像
    string allianceName = 7; //联盟名称
    int32 jjcScore = 8;
    int32 belongState = 9;
    PhotoViewInfo photoInfo = 10; // 头像
}

message AllianceActivityRankVo {
    int64 allianceId = 1; // 联盟Id
    string allianceName = 2; // 联盟名
    string shortName = 3; // 联盟简称
    int32 myScore = 4; // 积分记录
    int32 flagColor = 5; //旗帜颜色
    int32 flagStyle = 6; //旗帜样式
    int32 flagEffect = 7; //旗帜图案
    int32 belongState = 8;
}

// msgType = 1336
// 客户端 -> 服务器
// 查询正在进行中的活动的排行榜
message SelectNowRank {
    int32 activityId = 1; // 活动模版ID
}

message SelectNowRankRt {
    repeated PlayerActivityRankVo pActivityRankVos = 2; // 不是联盟排行的就读这个
    repeated AllianceActivityRankVo aActivityRankVos = 3; // 联盟排行的就读这个
}

// msgType = 1337
// 客户端 -> 服务器
// 查询活动排名
message QuerySelfActivityRank {
}

message QuerySelfActivityRankRt {
    repeated IntToIntKV ranks = 2; // 活动Id-排名
}

// msgType = 1351
// 客户端 -> 服务器
// 三消内城随机事件开始战斗
message EliminateRandomEventAtkStart {
    WalkForceInfo walkForceInfo = 1;
    int64 eventId = 2; // 事件唯一Id
}

message EliminateRandomEventAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 1352
// 客户端 -> 服务器
// 三消内城随机事件结束战斗
message EliminateRandomEventAtkFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EliminateRandomEventAtkFinishRt {
    int32 nowInstanceId = 4;
    int32 fightResult = 6; // 挑战结果
    int64 eventId = 7; // 事件id
}

// msgType = 1353
// 客户端 -> 服务器
// slg内城随机事件开始战斗
message SlgRandomEventAtkStart {
    WalkForceInfo walkForceInfo = 1;
    int64 eventId = 2; // 事件唯一Id
}

message SlgRandomEventAtkStartRt {
    string rewardString = 2; // 战斗胜利奖励
    FightRecordDetails details = 3;
    int32 nowInstanceId = 4;
    int32 fightResult = 5; // 挑战结果
    int64 eventId = 6; // 事件id
}

// msgType = 1354
// 客户端 -> 服务器
// 内城随机事件摇天降鸿运倍率
message RandomEventFortuneRoll {
    int64 eventId = 1;
}

message RandomEventFortuneRollRt {
    int32 fortune = 1;
}

// msgType = 1355
// 客户端 -> 服务器
// 内城随机事件领取天降鸿运奖励
message RandomEventFortuneDraw {
    int64 eventId = 1;
}

message RandomEventFortuneDrawRt {
    int32 errorCode = 1; // 错误码,替换通用rt,通用rt必为成功
}

// // msgType = 1401
// 客户端 -> 服务器
// 领取在线礼包
message GetOnlineReward {
}

message GetOnlineRewardRt {
    string nextReward = 2; // 下一档可领取的奖励
    int32 nextRewardOverTime = 3; // 下一档可领取的时间
    string getReward = 4; // 领取到的奖励
}

// // msgType = 1402
// 客户端 -> 服务器
// 打开在线礼包面板
message OpenOnlineReward {
}

message OpenOnlineRewardRt {
    OnlineRewardInfo onlineRewardInfo = 2; // 玩家在线礼包信息
}

// // msgType = 1403
// 客户端 -> 服务器
// 请求刷新活跃度任务
message RefHuoyueduTask {
}

message RefHuoyueduTaskRt {
    int64 reallyTime = 2; // 如果rt !=1 这个值就是正确的请求时间
}

// // msgType = 1404
// 客户端 -> 服务器
// 领取活跃度档位奖励
message GetHuoyueduReward {
    int32 step = 1; // 档位
}

message GetHuoyueduRewardRt {
}

// // msgType = 1405
// 客户端 -> 服务器
// 领取犒赏令档位奖励
message GetAppreciationReward {
    int32 protoId = 1; // 要领取的犒赏令的配置唯一ID
    int32 step = 2; // 档位
    repeated int32 stepType = 3; // 1-普通奖励 2-充值奖励
}

message GetAppreciationRewardRt {
}

// msgType = 1406
// 客户端 -> 服务器
// 领取累充奖励
message GetTotalPayReward {
    int32 protoId = 1;
    int32 day = 2;
}

message GetTotalPayRewardRt {
}

// msgType = 1407
// 客户端 -> 服务器
// 查询军事备战活动
message QueryMillitaryScore {
    int32 activityId = 1;
}

message QueryMillitaryScoreRt {
    int64 score = 2;
    repeated int32 stepRewardRecord = 3; // 阶段奖励领取记录
    int64 startTime = 4; // 结算时间
}

// msgType = 1408
// 客户端 -> 服务器
// 领取军事备战档位奖励
message GetMillitaryStepReward {
    int32 step = 1; // 档位
    int32 activityId = 2; // 活动id
}

message GetMillitaryStepRewardRt {
    string resVo = 2; // 奖励
}

// // msgType = 1409
// 客户端 -> 服务器
// 领取时间礼包
message GetTimintReward {
}

message GetTimintRewardRt {
}

// msgType = 1410
// 客户端 -> 服务器
// 金币解锁犒赏令积分挡位
message UnlockAppreciationStep {
    int32 protoId = 1; // 配置表的唯一ID 并非是activityId，对应appreciation表id
}

message UnlockAppreciationStepRt {
}

//msgType = 1424
//客户端-> 服务器
//领取月卡每日奖励
message GetMonthReward {
    int32 clubCardId = 1; // 会员卡模板ID
}
message GetMonthRewardRt {
}

//msgType = 1425
//客户端-> 服务器
//获取玩家拥有和可购买的礼品信息
message GetClubCardInfos {
}
message GetClubCardInfosRt {
    repeated ClubCardInfo clubCardInfos = 2;//玩家拥有的月卡信息
    repeated int32 canBuyClubCardId = 3;//当前可购买的月卡id
}

//msgType = 1430
//客户端-> 服务器
//爬塔信息查询
message ClimbTowerQueryInfos {
}
// 关卡星级记录
message LevelStarRecord {
    int32 levelId = 1; // 关卡id
    int32 startsCount = 2; // 星数
}

message ChapterRewardRecord {
    int32 chapterId = 1; // 层id
    repeated int32 starsOdd = 2; // 层奖励星级,支持1层多个奖励
}

message ClimbTowerQueryInfosRt {
    int32 unlockLevelId = 2; //已解锁关卡唯一行id
    int32 afkLevelId = 3; //当前挂机关卡唯一行id
    repeated LevelStarRecord levelStarRecs = 4; // 已打过关卡星数记录
    repeated ChapterRewardRecord chapterRewardRecs = 5; // 已领取层奖励记录
}

//msgType = 1431
//客户端-> 服务器
//战斗开始,//战斗开始需要上传一些参数,暂空
message ClimbTowerBattleStart {
    int32 levelId = 1; //关卡唯一行id
    repeated pb4battle.EliminateItem eliminateItems = 2; // 要带进去的药
}
message ClimbTowerBattleStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

//msgType = 1432
//客户端-> 服务端
//战斗结束,战斗结束，需要上传战斗信息(暂空)
message ClimbTowerBattleEnd {
    int32 levelId = 1; //关卡唯一行id
    int32 battleVictory = 2; //战斗结果
    pb4battle.EliminateFight eliminateFightInfos = 3; // 三消战斗战斗情况
}
//战斗结束回复，奖励直接发，不返回奖励串
message ClimbTowerBattleEndRt {
    int32 fightResult = 2; // 挑战结果,经过战斗服判定后的战斗结果
    repeated int32 meetCondition = 3; // 经过战斗服判定真正满足的条件
    repeated HeroInfoForReport heroInfos = 4; //英雄信息,真实战斗会导致英雄信息改变
    string resVoList = 5;
}

message AfkBattlerPosition {
    int32 positionId = 1; //位置(1-8英雄位,9巨龙位,不允许其他值)
    int64 heroId = 2; //英雄id,特值：0-未选择,-1 - 未解锁
    int64 dragonId = 3; //巨龙id特值：0-未选择, 英雄id和巨龙id不能同时正常占用
}
//msgType = 1433
//客户端-> 服务端
//挂机阵容查询或设置
message AfkQueryOrSetBattleArray {
    int32 isSet = 1; // 是否是设置阵容操作,0查询阵容,1设置阵容
    repeated AfkBattlerPosition battleArray = 2; // 挂机阵容:英雄、巨龙,设置9个,查询0个
}
message AfkQueryOrSetBattleArrayRt {
    repeated AfkBattlerPosition battleArray = 2; // 挂机阵容:英雄、巨龙,全返回
}

//msgType = 1434
//客户端->服务端
//查询挂机全部奖励
message AfkQueryAllRewards {
}
//查询挂机全部奖励回复
message AfkQueryAllRewardsRt {
    int32 basicRewardCount = 2; //基础奖励个数
    int64 basicRewardTimeStamp = 3; //基础奖励下次刷新时间
    int32 boxRewardCount = 4; //宝箱奖励个数
    int64 boxRewardTimeStamp = 5; //宝箱奖励下次刷新时间
    int32 rewardEventCount = 6; //事件奖励个数
    int64 rewardEventTimeStamp = 7; //事件奖励下次刷新时间
}

//msgType = 1435
//客户端-> 服务端
//挂机奖励领取
message AfkGetReward {
    int32 type = 1; // 领取的奖励类型:1-基础奖励,2-宝箱奖励,3-奖励事件
    int32 count = 2; // 领取奖励的个数
}
message AfkGetRewardRt {
    string resVoList = 2; // 领取到的奖励的实际内容,仅事件奖励时会传
}

//msgType = 1436
//客户端->服务端
//查询或者设置当前挂机关卡
message AfkQueryOrSetLevel {
    int32 isSet = 1; //是否是设置挂机关卡:0-查询挂机关卡,1-设置挂机关卡
    int32 levelId = 2; //仅设置时会被读取
}
message AfkQueryOrSetLevelRt {
    int32 levelId = 2; // 无论是查询还是设置都会返回当前挂机关卡
}
//小兵
message Solider {
    int32 id = 1; //模板id
    int32 num = 2; //数量
}

//msgType = 1438
//客户端->服务端
//爬塔领奖
message ClimbTowerChapterRewardGet {
    int32 chapterId = 1; // 层id
    int32 starsOdd = 2; // 层奖励星等级
}

message ClimbTowerChapterRewardGetRt {
}

// msgType = 1451
// 客户端 -> 服务器
// 领取成就奖励
message ReceiveAchievementReward {
    int64 id = 1; //成就唯一ID
}

message ReceiveAchievementRewardRt {
    repeated Achievement achieveInfo = 2; //下一阶成就
}

// msgType = 1452
// 客户端 -> 服务器
// 领取自定义活动的阶段奖励
message GetPurchaseActivityStepReward {
    int32 purchaseActivityId = 1; // 领取的活动ID
    int32 type = 2; // 领取阶段类型  1-普通阶段奖励 2-阶段大奖励
    int32 step = 3; // 领取的档位
}

message GetPurchaseActivityStepRewardRt {
}

// msgType = 1453
// 客户端 -> 服务器
// 购买活动本档钻石礼包
message BuyPurchaseActivity {
    int32 purchaseActivityId = 1; // 领取的活动ID
    int32 subId = 2; // 要购买的是哪波的 purchaseActivity的questId字段里的值
}

message BuyPurchaseActivityRt {
}

// msgType = 1454
// 客户端 -> 服务器
// 领取自定义活动每日免费礼包
message GetPurchaseActivityFreeReward {
    int32 purchaseActivityId = 1; // 领取的活动ID
}

message GetPurchaseActivityFreeRewardRt {
}

// msgType = 1455
// 客户端 -> 服务器
// 设置国家官职
message SetCountryPosition {
    int32 posId = 1; //官职Id
    int64 targetPlayerId = 2; //册封玩家ID
}

message SetCountryPositionRt {
}

// msgType = 1456
// 客户端 -> 服务器
// 赏赐
message AwardAlliance {
    int32 awardId = 1; //赏赐Id
    int64 targetPlayerId = 2; //赏赐的玩家ID，可跨服
}

message AwardAllianceRt {
}

// msgType = 1457
// 客户端 -> 服务器
// 领取各种奇奇怪怪的每日奖励
message GetGiftTypesFreeReward {
    int32 giftTypesId = 1; // giftTypesId
}

message GetGiftTypesFreeRewardRt {
}

// msgType = 1459
// 客户端 -> 服务器
// 修改国家公告
message EditorCountryNotice {
    string notice = 1; //公告内容
}

message EditorCountryNoticeRt {
    string notice = 2; //公告内容
}

// msgType = 1460
// 客户端 -> 服务器
// 发送公告给盟主
message SendNoticeToLeaderOfAlliance {
}

message SendNoticeToLeaderOfAllianceRt {
}

// msgType = 1461
// 客户端 -> 服务器
// 查询官职信息
message QueryCountryPosition {
}

message QueryCountryPositionRt {
    repeated CountryPosition positionInfos = 2; //官职信息
}

message CountryPosition {
    int32 posId = 1; //官职Id
    PlayerNameInfo playerInfo = 2; //玩家信息
}

// msgType = 1462
// 客户端 -> 服务器
// 查询国家公告
message QueryCountryNotice {
}

message QueryCountryNoticeRt {
    string notice = 2; //公告内容
    int32 noticeCdTime = 3; //公告冷却时间
    int64 wonderId = 4; //所在奇观ID
}

// msgType = 1463
// 客户端 -> 服务器
// 查询赏赐信息
message QueryAllianceAward {
}

message QueryAllianceAwardRt {
    repeated AllianceAwardInfo awardInfos = 2;
}

message AllianceAwardInfo {
    int32 awardId = 1; //奖励模版ID
    repeated PlayerNameInfo awardPlayers = 2; //奖励的玩家
}

// msgType = 1464
// 客户端 -> 服务器
// 查询名人堂信息
message QueryFameHall {
}

message QueryFameHallRt {
    repeated FameHallInfo fameHallItems = 2;
}

message FameHallInfo {
    PlayerNameInfo playerNameInfo = 1;
    int32 occupyTime = 2; // 占领奇观时长
    int32 createTime = 3; // 占领时间
}

// msgType = 1465
// 客户端 -> 服务器
// 查询奇观部队信息
message QueryWonderForce {
    int32 wonderId = 1; //奇观配置Id
}

message QueryWonderForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
    repeated WonderNpcSoliderInfo npcSoliderInfos = 3; //npc士兵数量
}

//msgType = 2508
// 客户端 -> 服务器
// 神庙查询
message QueryHieronForce {
    int32 hieronId = 1; //神庙配置Id
}

message QueryHieronForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
    repeated WonderNpcSoliderInfo npcSoliderInfos = 3; //npc士兵数量
}

// msgType = 1466
// 客户端 -> 服务器
// 天下大赦
message KingFreeWorld {
}

message KingFreeWorldRt {
}

// msgType = 1467
// 客户端 -> 服务器
// 放弃奇观
message GiveUpWonder {
    int32 wonderId = 1;
}

message GiveUpWonderRt {
}

// msgType = 1478
// 客户端 -> 服务器
// 三消战斗报错
message EliminateFightError {
    int32 fightType = 1; // 1-JJC战斗 2-推图战斗
    int32 fightTarget = 2; //  战斗的对手 如果是推图 就填推图模板关ID 如果是竞技场,就随便写个0吧
    int32 rand = 3;
    int32 gemRand = 4;
    repeated EliminateFightErrorHeroVo atkInfo = 5;
    repeated EliminateFightErrorHeroVo defInfo = 6;
    repeated pb4battle.EliminateStep step = 7;
    int64 createTime = 8;
    int32 fightRt = 9; // 错误码
    string errorInfo = 10; // 错误日志
    string items = 11;
}

message EliminateFightErrorHeroVo {
    int64 id = 1;
    int32 protoId = 2;
    int32 lv = 3;
    int32 star = 4;
    int32 awake = 5;
    int32 skillList = 6;
    int32 x = 7;
    int32 y = 8;
    int32 useHp = 9;
    int32 isUseHp = 10;
}

message EliminateFightErrorRt {
}

// msgType = 1489
// 客户端 -> 服务器
// 查询或者的魔物数量
message QueryMonsterNum {
    repeated int32 states = 1;
}

message QueryMonsterNumRt {
    repeated IntToIntKV aliveNum = 1; //州-数量
    repeated IntToIntKV dieNum = 2; //州-数量
}

// msgType = 1490
// 客户端 -> 服务器
// 查询州内魔物信息
message QueryStateMonster {
    int32 state = 1;
}

message QueryStateMonsterRt {
    repeated MonsterInfo monsterInfo = 1;
}

message MonsterInfo {
    int32 protoId = 1;
    int64 hp = 2;
    int32 overTime = 3;
    int32 x = 4;
    int32 y = 5;
}

// msgType = 1491
// 客户端 -> 服务器
// 设置攻打魔物配置
message SetHunterConfig {
    int32 autoHunter = 1; //自动狩猎 0、否 1、是
    int32 autoUseEnergy = 2; //自动使用行动力 0、否 1、是
    int32 bossType = 3; // 普通魔物 1  活动魔物 2
}

message SetHunterConfigRt {
    int32 autoHunter = 2; //自动狩猎 0、否 1、是
    int32 autoUseEnergy = 3; //自动使用行动力 0、否 1、是
}

// msgType = 1492
// 客户端 -> 服务器
// 查询魔物伤害排行
message QueryHunterRank {
    int32 posX = 1; //魔物坐标X
    int32 posY = 2; //魔物坐标Y
}

message QueryHunterRankRt {
    repeated PersonalHunterRankInfo personalRankInfos = 2; //个人排行信息
    repeated AllianceHunterRankInfo allianceRankInfos = 3; //联盟排行信息
}

//个人击杀排行信息
message PersonalHunterRankInfo {
    int32 rank = 1; //排行名次
    string allianceShortName = 2; //联盟简称
    int64 playerId = 3; //玩家ID
    string playerName = 4; //玩家名称
    int32 photoId = 5; //头像ID
    int32 damageRate = 6; //伤害比例（万分比）
    string allianceName = 7; //联盟名字
    int32 jjcScore = 8;
    int32 belongState = 9;
    PhotoViewInfo photoInfo = 10; //头像ID
}

//联盟击杀排行信息
message AllianceHunterRankInfo {
    int32 rank = 1; //排行名次
    int64 allianceId = 2; //联盟ID
    string allianceShortName = 3; //联盟简称
    string allianceName = 4; //联盟名称
    int32 damageRate = 5; //伤害比例（万分比）
    int32 flagColor = 6; //旗帜颜色
    int32 flagStyle = 7; //旗帜样式
    int32 flagEffect = 8; //旗帜图案
    int32 belongState = 9;
}

// msgType = 1493
// 客户端 -> 服务器
// 邀请共同猎杀
message InviteTogetherHunter {
    int32 posX = 1; //魔物坐标X
    int32 posY = 2; //魔物坐标Y
}

message InviteTogetherHunterRt {
}

// msgType = 1494
// 客户端 -> 服务器
// 补充行动力
message SupplyEnergy {
}

message SupplyEnergyRt {
}

// msgType = 1495
// 客户端 -> 服务器
// 查询活动boss信息
message QueryActivityBossInfo {
}

message QueryActivityBossInfoRt {
    repeated ActivityBossInfo bossInfo = 2;
}

message ActivityBossInfo {
    int32 monsterActivityId = 1; //这个是monsterActivity表的id字段
    int64 bossHp = 2; // 血量 (合并allianceBossHp字段,根据BossId计算血量，再计算比例)
    int32 unlockTime = 3; // 魔物解锁时间
}

// 食堂料理烹饪 1500-1509
// msgType = 1500
// 客户端 -> 服务端
// 查询食堂餐桌情况
message CookingInfoQuery {
}
message CookingInfoQueryRt {
    repeated CookingQueue cookingQueue = 1;
}
message FoodInfo {
    int32 start = 1; // 开始时间
    int32 over = 2; // 结束时间
}
message CookingQueue {
    repeated FoodInfo foodInfo = 1;
    int32 start = 2;
    int32 over = 3;
    int32 protoId = 4; // 模板id
}

// msgType = 1501
// 客户端 -> 服务器
// 开始烹饪
message CookingStart {
    int32 protoId = 1;
}
message CookingStartRt {
    CookingQueue cookingQueue = 1;
}

// msgType = 1502
// 客户端 -> 服务端
// 领取烹饪好的食品(需要至少1个可领取)
message CookingDraw {
    int32 protoId = 1;
}
message CookingDrawRt {
    repeated CookingQueue cookingQueue = 1; // 会存在空的情况
}

// msgType = 1503
// 客户端 -> 服务端
// 增减原料(需要当前队列至少1个没有好)
message CookingAdjust {
    int32 protoId = 1;
    int32 add = 2; // 非0表示增加1个，0表示减少1个
}
message CookingAdjustRt {
    repeated CookingQueue cookingQueue = 1; // 队列可能会被减掉
}

// msgType = 1540
// 客户端 -> 服务器
// 查询城墙界面信息
message QueryWallInfo {
}

message QueryWallInfoRt {
    int32 fireEndTime = 2; // 自动灭火的时间，单位秒
    int64 wallHp = 3; //血量
    int32 wallHpRefreshTime = 4; //血量刷新时间
    int64 deurability = 5; //耐久度 客户端实际用的时候除以10000
    int32 isInOtheralliance = 6; //是否在其他联盟领地内 1:在
    int64 repaireTime = 7; //修理时间
    WalkForceInfo walkForceInfo = 8; // 派遣武将
}

// msgType = 1541
// 客户端 -> 服务器
// 修复城墙
message RepairWall {

}

message RepairWallRt {
    int64 deurability = 1; //耐久度 客户端实际用的时候除以10000
    int64 repaireTime = 2; //修理时间
}

// msgType = 1542
// 客户端 -> 服务器
// 城墙灭火
message WallFireFight {

}

message WallFireFightRt {
}

// msgType = 1543
// 客户端 -> 服务器
// 城墙统计信息查询
message WallStatisticsDataQuery {
}
message WallStatisticsDataQueryRt {
    repeated WorldNpcCastle npcCastles = 2; // npc外城
    repeated IntToLongKV defHeroList = 3; // 城墙防守英雄及其兵力
}
message WorldNpcCastle {
    int32 protoId = 1; // 模板id
    int32 lv = 2; // 等级
    int32 rsNum = 3; // 兵力
}

// 1545~1555 抽卡
// msgType = 1545
// 客户端 -> 服务器
// 查询抽卡信息
message QueryLottery {
}

message QueryLotteryRt {
    repeated LotteryInfo infos = 2;
    repeated LotteryScoreInfo scoreInfo = 3;
}

// msgType = 1546
// 客户端 -> 服务器
// 抽卡
message PlayLottery {
    int32 protoId = 2; // 抽卡的模板id
    int32 drawTimes = 3; // 抽多少次 ：1 - 单次抽  10- 十连抽
}

message PlayLotteryRt {
    string rewards = 2; //获得的道具 奖励格式
    int32 nextFreeTime = 3; //下次免费时间
    repeated int32 index = 4; // 奖励对应奖池的顺序
    int32 newLotteryScore = 5;//当前积分
}

// msgType = 1547
// 客户端 -> 服务器
// 抽卡(权重)
message PlayLotteryByWeight {
    int32 protoId = 2; // 抽卡的模板id
    int32 drawTimes = 3; // 抽多少次 ：1 - 单次抽  10- 十连抽
}

message PlayLotteryByWeightRt {
    string rewards = 2; // 获得的道具 奖励格式
    int32 nextFreeTime = 3; // 下次免费时间
    repeated int32 index = 4; // 奖励对应奖池的顺序
    int32 drawCount = 5; // 已经抽取的总次数
    int32 drawCountForLimit = 6;// 次数限制中已使用的次数
}

// msgType = 1549
// 客户端 -> 服务器
// 查询服务器大奖历史
message QueryActivityLotteryWonderRecord {
    int32 lotteryType = 1; //抽的类型
    int64 protoId = 2; // 要抽哪一个的模板id
}

message QueryActivityLotteryWonderRecordRt {
    repeated ActivityLotteryWonderRecord records = 2; //抽大奖历史
}

// msgType = 1550
// 客户端 -> 服务器
// 领取抽奖次数奖励
message ReceiveLotteryReachProp {
    int32 protoId = 1; // lottery的配置id
    int32 lotteryNum = 2; // 领取的抽奖次数的奖励
}

message ReceiveLotteryReachPropRt {
    string reward = 2;
}

// msgType = 1551
// 客户端 -> 服务器
// 领取抽将积分奖励
message PlayLotteryScoreReward {

}

message PlayLotteryScoreRewardRt {
    string rewards = 2;
    int32 newLotteryScore = 3;//当前积分
}

// 1556 ~ 1560 图书馆
// msgType = 1556
// 客户端 -> 服务器
// 切换图书馆标签
message SwitchLibTag {
    int32 type = 1; // 1-装备 2-道具 3-卡片 4-魔物 5-怪物
}

message SwitchLibTagRt {
    repeated LibInfo libItems = 2;
    repeated MonsterLibInfo monsterLibItems = 3;
    repeated BossLibInfo bossLibItems = 4;
}

// 通用图鉴
message LibInfo {
    int32 protoId = 1;
    repeated int32 protoIds = 2;
}

// 怪物图鉴
message MonsterLibInfo {
    int32 libraryType = 1;
    int32 protoId = 2;
    int32 killNum = 3;
}

// 魔物图鉴
message BossLibInfo {
    int32 libraryType = 1;
    repeated BossInfo bossInfo = 2;
}

message BossInfo {
    int32 protoId = 1;
    int32 attackNum = 2;
    int32 killNum = 3;
}

// msgType = 1571
// 客户端 -> 服务器
// 查询奇观信息
message QueryWonderInfo {
}

message QueryWonderInfoRt {
    repeated WonderInfo wonder = 2;
}

message WonderInfo {
    int32 protoId = 1;
    int32 status = 2; // 1-和平 2-战争
    int64 allianceId = 3; //占领联盟Id(未占领-0)
    int32 startTime = 4; // 争夺中 未占领 活动开始时间/争夺中 已占领 防守开始时间/和平 下次活动开始时间
    int32 endTime = 5; // 争夺中 未占领 活动结束时间/争夺中 已占领 防守成功时间/和平 下次活动结束时间
    PlayerNameInfo player = 6;
    int32 haveNpc = 8; //是否与NPC 0否 1是
}

// msgType = 1572
// 客户端 -> 服务器
// 奇观排行榜
message QueryWonderRank {
    int32 protoId = 1; //奇观模板Id
    int64 allianceId = 2; //联盟Id
}

message QueryWonderRankRt {
    repeated AllianceActivityRankVo topRankVos = 2;
    int32 selfRank = 3;
    AllianceActivityRankVo selfRankVo = 4; // 自己联盟的排名

    //下面字段废弃
    int64 occupyWonderAllianceId = 5; //当前占领奇观的联盟
    int32 occupyStartTime = 6; //奇观占领开始时间
    int32 occupyOverTime = 7; //奇观占领结束时间
    int32 wonderStatus = 8; //奇观状态
}

// msgType = 1573
// 客户端 -> 服务器
// 奇观杀敌排行榜
message QueryWonderKillRank {
    int32 protoId = 1; //奇观模板Id
}

message QueryWonderKillRankRt {
    repeated PlayerActivityRankVo topRankVos = 2;
    int32 selfRank = 3;
    PlayerActivityRankVo selfRankVo = 4; // 自己的排名
}

// msgType = 1576
// 客户端 -> 服务器
// 查询其他玩家信息
message OtherPersonalPower {
    int64 playerId = 1;
}

message OtherPersonalPowerRt {
    PlayerInFo playerInFo = 2;
    MyPrisonInfo myPrisonInfo = 3; // 被囚禁信息
    repeated BagInfo bagInfo = 4; //背包物品信息
    repeated HeroInfo heroInfo = 5;
    repeated IntToIntKV bigInnerCity = 6; // PVE内城城池模板id->等级
}

// msgType = 1577
// 客户端 -> 服务器
// 查询赌场信息
message GetCasinosInfo {
}

message GetCasinosInfoRt {
    int32 casinosFinishDate = 2; // 奖池结束时间
    int32 palaceId = 3; // 地宫类型
    repeated CasinosInfo casinosInfos = 4; //地宫信息
}

message CasinosInfo {
    int32 palaceLevel = 1; // 1：普通，2：精英
    int32 leftBlessCount = 4; //剩余祝福次数
    int32 leftFreeCount = 5; //剩余免费次数
    int32 leftCount = 6; //剩余攻击次数
    int32 isBoss = 7; // 0: 不是boss， 1：是boss
}

// msgType = 1578
// 客户端 -> 服务器
// 查询赌场信息
message GetJackpotInfo {
}

message GetJackpotInfoRt {
    int64 totalMoney = 2; // 奖池里的总数
    repeated CasinosWinner casinosWinner = 3; // 中奖的人
}

// msgType = 1579
// 客户端 -> 服务器
// 赌场抽奖
message CasinosLottery {
    int32 palaceLevel = 1; // 1：普通，2：精英
}

message CasinosLotteryRt {
    string reward = 2; // 奖励
    int64 giftNum = 3; // boss大奖数量
    CasinosInfo casinosInfo = 4; //地宫信息
}

// msgType = 1580
// 客户端 -> 服务器
// 查询游戏推送设置
message GetNoticeSetting {
}

message GetNoticeSettingRt {
    int32 refuseDisturbOpen = 2; //勿扰开始时间
    int32 refuseDisturbEnd = 3; //勿扰结束时间
    int32 cautionLv = 4; //警戒等级
    int32 refuseDisturb = 5; // 勿扰 0~关 1~开
    repeated NoticeSwitch switches = 6; //开关
}

message NoticeSetting {
    int32 refuseDisturbOpen = 2; //勿扰开始时间
    int32 refuseDisturbEnd = 3; //勿扰结束时间
    int32 cautionLv = 4; //警戒等级
    int32 refuseDisturb = 5; // 勿扰 0~关 1~开
    repeated NoticeSwitch switches = 6; //开关
}

// msgType = 1581
// 客户端 -> 服务器
// 修改游戏推送设置
message ChangeNoticeSetting {
    int32 refuseDisturbOpen = 1; //勿扰开始时间
    int32 refuseDisturbEnd = 2; //勿扰结束时间
    int32 cautionLv = 3; //警戒等级
    int32 refuseDisturb = 4; // 勿扰 0~关 1~开
    repeated NoticeSwitch switches = 5; //开关
}

message ChangeNoticeSettingRt {
}

// msgType = 1582
// 客户端 -> 服务器
// 获取充值订单号
message QueryPayOrder {
    int32 giftBagId = 1; //充值礼包ID
    int32 giftBagLevel = 2; //充值礼包档位
}

message QueryPayOrderRt {
    int64 orderId = 2;
}

// msgType = 1583
// 客户端 -> 服务器
// 领取月卡奖励
message MonthCardReward {
    int32 monthCardId = 1; //月卡id
}

message MonthCardRewardRt {
}

// 通知开关
message NoticeSwitch {
    int32 typeProtoId = 1; // 开关类型 1~内城 2~部队 3~社交
    int32 switch = 3; // 通知开关 0~关 1~开
}

// msgType = 1584
// 客户端 -> 服务器
// 领取重置版的登录礼品
message GetResetLoginGift {
}

message GetResetLoginGiftRt {
    int64 resetLoginLastRewardTime = 9; // 重置版的7日登录活动的上次领取时间
    int32 resetLoginDay = 10; // 重置版的7日登录活动的登录天数进程
    int32 loginAutoDay = 11; // 开服拍脸图登录活动的登录天数进程
}

// msgType = 1585
// 客户端 -> 服务器
// 获取登录礼物
message GetLoginGift {
    int32 loginGiftType = 1; // 1-开服活动
    int32 day = 2; // 第几天
}

message GetLoginGiftRt {
    repeated int32 day = 3;
    int32 loginRewardLastTime = 4; // 14日登录上次领奖时间
    int32 process = 7; //14r日登录当前进度
    int32 nowLoginRewardState = 8; // 当期登陆礼的状态 0表示默认的7日登陆 非0的话就是默认的7日登陆已经完结 已经变成了重置版的七日登录(类似周签到礼)
    int64 resetLoginLastRewardTime = 9; // 重置版的7日登录活动的上次领取时间
    int32 resetLoginDay = 10; // 重置版的7日登录活动的登录天数进程
}

// msgType = 1586
// 客户端 -> 服务器
// 购买成长基金
message BuyGrowthFund {
    int32 growthFundType = 1; // 1-开服活动
}

message BuyGrowthFundRt {
}

// msgType = 1587
// 客户端 -> 服务器
// 获取登录礼物
message GetLoginAutoGift {
    repeated int32 days = 1; // 要领取的天数
}

message GetLoginAutoGiftRt {
    string resVo = 2;
    int32 loginAutoDay = 11; // 开服拍脸图登录活动的登录天数进程
    repeated int32 autoDay = 5; // 拍脸图登录可领取天数奖励
    int32 lastLoginAutoRewardTime = 6; // 拍脸图登录上次领取登录礼时间 @Deprecated
}

// msgType = 1588
// 客户端 -> 服务器
// 购买活动购买
message BuyPurchase {
    int32 activityType = 1; // 1-开服活动
    int32 day = 2; // 第几天
    int32 purchaseType = 3; // 0-左礼包 1-右礼包
}

message BuyPurchaseRt {
}

// msgType = 1589
// 客户端 -> 服务器
// 获取home活动奖励
message GetHomeActivityReward {
    int32 step = 1; // 要领取的档位万分比
}

message GetHomeActivityRewardRt {
}

// msgType = 1590
// 客户端 -> 服务器
// 获取home活动每日登录
message QueryDailyReward {
}

message QueryDailyRewardRt {
    string resVo = 2; // 当前可领取奖励
    string previewRes = 3; // 预览奖励
    int32 receiveState = 4; // 奖励领取状态
}

// msgType = 1591
// 客户端 -> 服务器
// 领取home活动每日登录
message ReceiveDailyReward {
}

message ReceiveDailyRewardRt {
    string resVo = 2;
}

// msgType = 1604
// 客户端 -> 服务器
// 修改玩家语言
message ChangePlayerLan {
    int32 lanType = 1;
}

message ChangePlayerLanRt {
}

// msgType = 1605
// 客户端 -> 服务器
// 查询成就信息
message QueryAchievement {
}

message QueryAchievementRt {
    repeated Achievement achievements = 2; //成就信息
    repeated IntToIntKV medals = 3; //勋章信息 勋章类型-勋章等级
}

// msgType = 1606
// 客户端 -> 服务器
// 查询标记信息
message QueryMark {
}

message QueryMarkRt {
    repeated MarkInfo markInfo = 2; //玩家标记信息
    repeated AllianceMarkEnum allianceMarks = 3; //联盟标记
    int64 allianceLastReadId = 4; //联盟标记上次读到的id, 0表示没有未读的
}

// msgType = 1611
// 客户端 -> 服务器
// 查询藏兵信息
message QueryCave {
}

message QueryCaveRt {
    CaveInfo info = 2; // 当前藏兵信息
}

// msgType = 1612
// 客户端 -> 服务器
// 查询buff信息
message QueryBuff {
}

message QueryBuffRt {
    repeated BuffVo buffs = 2; // 玩家的buff集合
}

// msgType = 1613
// 客户端 -> 服务器
// 查询猎杀信息
message QueryHunter {
}

message QueryHunterRt {
    repeated HunterRecord hunterRecords = 2; //个人猎杀记录
    repeated HunterInviteInfo inviteInfo = 3; //邀请信息
}

// msgType = 1615
// 客户端 -> 服务器
// 查询任务
message QueryTask {
    int32 taskType = 1;
}

message QueryTaskRt {
    repeated Task tasks = 2;
    int32 countryTaskLastRefreshTime = 3; // 势力任务上次刷新时间
    int32 countryTaskProtoId = 4; // 势力任务模板id

    // 查询活跃度的时候一些其他数据
    int32 huoyueduCastleLv = 11; // 本次活跃度是几级的城堡领取的
    int32 huoyueduValue = 12; // 活跃度值
    repeated int32 huoyueduHas = 13; // 领取过的奖励档位s
    int32 scienceTaskNextRefresh = 14; // 科研任务下次刷新时间

    //查询开服活动的其他数据
    int32 rate = 21; //进度
    repeated int32 getReward = 22; //已经领取奖励
    repeated PurchaseOpenServerData purchaseOpenServerData = 23; //开服活动礼包信息
    repeated int32 getVipReward = 24; //已经领取奖励

    repeated PurchaseActivityData purchaseActivityDatas = 31; // 自定义活动数据
    int32 allianceTaskNextRefresh = 32; // 联盟任务下次刷新时间,根据类型来决定是每日还是每周任务
    int32 allianceJourneyId = 33; // 盟主征途id

    // 联盟活跃相关信息，仅任务28、29时返回
    int32 allianceActivityProto = 40;
    int32 nowAllianceActivityProto = 41;
    int32 allianceHuoyueduValue = 42;

    //开服冲战力活动, 仅在任务37 返回
    map<uint32, uint32> leftFightForceReward = 43; //剩余战力冲榜的奖励 <奖励id, 剩余数量>
}

message PurchaseOpenServerData {
    int32 day = 1;
    repeated int32 purchaseTypes = 2;
}

message PurchaseActivityData {
    int32 purchaseAtivityId = 1;
    repeated int32 stepReward = 2; // 阶段奖励的领取过的记录
    repeated int32 itemBuys = 3; // 买过的活动道具档
    repeated int32 bigStepReward = 4; // 大阶段奖励的领取过的记录
    repeated int32 giftPackageBuys = 5; // 买过的真钱礼包
    int32 nowStep = 6; // 当前进度
    int32 lastFreeRewardTime = 7; // 上次领取每日免费礼包的时间
    repeated IntToIntKV diyInfo = 8; // key 自选礼包ID value 购买数量
    int32 todayAddStep = 9; // 今日已获得进度
    int32 lastAddStepTime = 10; // 上次进度变化时间
    LvUpResGiftPb lvUpResGiftInfo = 11; // 升级补给礼包情况
}

message LvUpResGiftPb {
    int32 count = 1; // 今日获得的个数
    int32 lvUpFlag = 2; // 是否升级
    int32 changeTime = 3; // 变化时间
}

// msgType = 1616
// 客户端 -> 服务器
// 查询城池信息
message QueryCityInfo {
}

message QueryCityInfoRt {
    int32 trapNum = 2;
    int32 tranCureNum = 3;
    int32 soliderNum = 4;
    int32 soliderCureNum = 5;
    int32 useUpFood = 6; //耗粮
}

// msgType = 1617
// 客户端 -> 服务器
// 查询运输请求
message QueryTransportRequest {
}

message QueryTransportRequestRt {
    repeated TransportRequest req = 2;
}

// msgType = 1618
// 客户端 -> 服务器
// 领取雷达在线奖励
message ReceiveRadarOnlineReward {
    // pass
}

message ReceiveRadarOnlineRewardRt {
    string resVo = 2;
    int32 radarTimeBeginning = 3;   // 开始领取的时间戳起点
    int32 radarTimeProtoId = 4;     // 正在进行的配置id
}

// msgType = 1619
// 客户端 -> 服务器
// 查询皮肤
message QuerySkin {
}

message QuerySkinRt {
    repeated SkinInfo skins = 2; // 皮肤信息
}

// msgType = 1620
// 客户端 -> 服务器
// 查询预警
message QueryWarn {
}

message QueryWarnRt {
    repeated WalkGroup warnWalks = 3; //预警信息
}

// msgType = 1621
// 客户端 -> 服务器
// 更新头像
message QueryPhoto {

}

message QueryPhotoRt {
    repeated PhotoInfo photos = 1; // 拥有头像信息
}

// msgType = 1622
// 客户端 -> 服务器
// 更新头像
message ChangePhoto {
    int32 protoId = 1;
    int32 chgPictureUrl = 2;
}

message ChangePhotoRt {
}

// msgType = 1623
// 客户端 -> 服务器
// 购买头像
message BuyPhoto {
    int32 protoId = 1;
}

message BuyPhotoRt {
    int32 gainTime = 1;
}

// msgType = 1624
// 客户端 -> 服务器
// 查询我的头像URL地址
message QueryPictureUrl {
}

message QueryPictureUrlRt {
    string pictureUrl = 2;
}

// msgType = 1625
// 客户端 -> 服务器
// 查询skin模块加成(皮肤(包含护卫)，头像框)
message QuerySkinEffectInfo {
}

message QuerySkinEffectInfoRt {
    repeated SkinEffectInfo skinEffectInfo = 2; // 皮肤加成，包含护卫的
    repeated SkinEffectInfo photoFramesEffectInfo = 3; // 头像框加成
}

message SkinEffectInfo {
    int32 type = 1;//类型
    repeated IntToIntKV effect = 2; //加成信息
}

// msgType = 1630
// 客户端 -> 服务器
// 查询运输记录
message QueryTransportRecord {
    int32 recordType = 1;
}

message QueryTransportRecordRt {
    repeated TransportRecord records = 2;
}

message TransportRecord {
    int64 id = 1;
    int32 recordType = 2;
    int64 playerId = 3;
    string name = 4;
    string shortName = 5;
    string allianceName = 6;
    string allianceShortName = 7;
    int32 photoId = 8;
    string resString = 9;
    int32 createTime = 10;
    int32 belongState = 11; // 联盟所属洲
    PhotoViewInfo photoInfo = 12;
}

// msgType = 1631
// 客户端 -> 服务器
// 刷新home建筑视图
message RefreshHomeBuildingView {
    int32 buildingType = 1; // 建筑类型
    int32 viewState = 2; //视图状态
}

message RefreshHomeBuildingViewRt {
    int32 viewChange = 2; //0、否 1、是
}

// msgType = 1640
// 客户端 -> 服务器
// 孵化巨龙
message HatchDragon {
    int32 eggProtoId = 1; //巨龙蛋模板Id
}

message HatchDragonRt {
    Dragon dragon = 2;
}

message Dragon {
    int64 id = 1;
    int32 protoId = 2; //dragon表模板Id
    int32 level = 3; //等级
    int32 exp = 4; //等级经验
    int32 awake = 5; //阶级
    string name = 6; //名称
    string useRes = 7; //技能培养花费，奖励格式
    int32 posIndex = 8; //龙巢位置，0代表是幼龙
    repeated DragonSkill skills = 10; //巨龙技能
    string feedUseRes = 11; //喂养花费，奖励格式
    int32 inTrain = 12; //在培养位上
    int32 onIntPos = 13; //在内政位上
    int64 fightValue = 14; // 战斗力
    repeated DragonSkillRebornSave rebornCache = 15; // 未确认的巨龙技能洗炼记录
}

message DragonSkillRebornSave {
    int64 id = 1; // 巨龙技能的唯一id
    int32 protoId = 2; // 目标模板id
}

message DragonSkill {
    int64 id = 1;
    int32 skillId = 2; //dragonskill表Id
    int32 skillLv = 3; //技能等级
    int32 skillQualityUpSchedule = 4; //技能品质提升进度
    int32 skillOriQuality = 5; // 技能初始品质
}

// msgType = 1641
// 客户端 -> 服务器
// 抚养巨龙
message RaiseDragon {
    int64 dragonId = 1; //巨龙Id
    int32 posIndex = 2; //龙巢位置
}

message RaiseDragonRt {
}

// msgType = 1642
// 客户端 -> 服务器
// 放生巨龙
message FreeDragon {
    int64 dragonId = 1; //巨龙Id
}

message FreeDragonRt {
}

// msgType = 1643
// 客户端 -> 服务器
// 喂养巨龙，提升经验
message FeedDragon {
    int64 dragonId = 1; //巨龙Id
    int32 feedNum = 2; //喂养次数
}

message FeedDragonRt {
    int32 doubleCount = 2; //总次数
}

// msgType = 1644
// 客户端 -> 服务器
// 进阶巨龙
message AdvanceDragon {
    int64 dragonId = 1; //巨龙Id
}

message AdvanceDragonRt {
}

// msgType = 1645
// 客户端 -> 服务器
// 巨龙技能升级
message DragonSkillLvUp {
    int64 dragonId = 1; //巨龙Id
    int64 skillId = 2; //技能id
}

message DragonSkillLvUpRt {
}

// msgType = 1646
// 客户端 -> 服务器
// 巨龙改名
message SetDragonName {
    int64 dragonId = 1; //巨龙Id
    string name = 2;
}

message SetDragonNameRt {
}

// msgType = 1647
// 客户端 -> 服务器
// 巨龙上培养，挂机位
message DragonOnBattle {
    int64 dragonId = 1; //巨龙Id
}

message DragonOnBattleRt {
}

// msgType = 1648
// 客户端 -> 服务端
// 巨龙技能融合 -- 可以理解为献祭升级技能品质
message DragonSkillMix {
    int64 dragonId = 1; // 巨龙id
    int64 skillId = 2; // 巨龙技能唯一64位id, 不是模板id
    repeated int32 propId = 3; // 要消耗的道具模板id,可重复
    repeated int64 babyDragonId = 4; //幼龙唯一id,不是模板id
}

message DragonSkillMixRt {
}

// msgType = 1649
// 客户端 -> 服务器
// 巨龙上内政位
message DragonOnIntPos {
    int64 dragonId = 1; //巨龙Id
}

message DragonOnIntPosRt {
}

// msgType = 1664
// 客户端 -> 服务器
// 兵营加速训练查询
message BarracksQuickMakeQuery {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int64 buildingId = 3; // 建筑id
}
message BarracksQuickMakeQueryRt {
    int32 timeLack = 1; // 时间不够(尽可能的用了道具都还不够)
    int32 lackRes = 2; // 缺少的资源类型(尽可能的用了道具都还不够)
    string supplyRes = 3; // 补充资源消耗的道具
    string supplyTimeProps = 4; // 补充时间消耗的加速道具
}
// msgType = 1665
// 客户端 -> 服务器
// 兵营加速训练应用
message BarracksQuickMakeApply {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int64 buildingId = 3; // 建筑id
    string supplyRes = 4; // 补充资源消耗的道具
    string supplyTimeProps = 5; // 补充时间消耗的加速道具
    int32 noCheckSupply = 6; // 非0表示不校验资源和时间消耗
}
message BarracksQuickMakeApplyRt {
}
// msgType = 1666
// 客户端 -> 服务器
// 兵营加速升阶查询
message BarracksQuickUpQuery {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int64 buildingId = 3; // 建筑id
}
message BarracksQuickUpQueryRt {
    int32 timeLack = 1; // 时间不够(尽可能的用了道具都还不够)
    int32 lackRes = 2; // 缺少的资源类型(尽可能的用了道具都还不够)
    string supplyRes = 3; // 补充资源消耗的道具
    string supplyTimeProps = 4; // 补充时间消耗的加速道具
}
// msgType = 1667
// 客户端 -> 服务器
// 兵营加速升阶应用
message BarracksQuickUpApply {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int64 buildingId = 3; // 建筑id
    string supplyRes = 4; // 补充资源消耗的道具
    string supplyTimeProps = 5; // 补充时间消耗的加速道具
    int32 noCheckSupply = 6; // 非0表示不校验资源和时间消耗
}
message BarracksQuickUpApplyRt {
}

// msgType = 1668
// 客户端 -> 服务器
// 解散受伤士兵
message BarracksWoundedDismiss {
    IntToIntKV soldier = 1;
}
message BarracksWoundedDismissRt {
}

// msgType = 1669
// 客户端 -> 服务器
// 解散士兵
message BarracksDismiss {
    IntToIntKV soldier = 1;
}
message BarracksDismissRt {
}

// msgType = 1670
// 客户端 -> 服务器
// 查询取消返还的资源
message QueryBarracksCancel {
    int32 make = 1; // 如果非0则查取消造兵,0查取消升阶,若既不在造兵也不在升阶则会报错
    int64 buildingId = 2; // 建筑id
}

message QueryBarracksCancelRt {
    string payBackRes = 1;
}

// msgType = 1671
// 客户端 -> 服务器
// 开始造兵
message BarracksMakeStart {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int32 buy = 3; // 非0表示直接拿钻石秒
    int64 buildingId = 4; // 建筑id
}
message BarracksMakeStartRt {
}

// msgType = 1672
// 客户端 -> 服务器
// 取消造兵
message BarracksMakeCancel {
    int64 buildingId = 1; // 建筑id
}
message BarracksMakeCancelRt {
    string resVo = 1;
}

// msgType = 1673
// 客户端 -> 服务器
// 开始升阶
message BarracksUpStart {
    int32 soldierId = 1; // 士兵soldierID
    int64 num = 2; // 数量
    int32 buy = 3; // 非0表示直接拿钻石秒
    int64 buildingId = 4; // 建筑id
}
message BarracksUpStartRt {
}
// msgType = 1674
// 客户端 -> 服务器
// 取消升阶
message BarracksUpCancel {
    int64 buildingId = 1; // 建筑id
}
message BarracksUpCancelRt {
    string resVo = 1;
}

// msgType = 1675
// 客户端 -> 服务器
// 伤兵治疗
message BarracksWoundedSoldierCure {
    repeated IntToLongKV soldier = 1; // 要治疗的伤兵
    int32 buy = 2; // 非0就是直接拿钻石秒
}
message BarracksWoundedSoldierCureRt {
}

// msgType = 1676
// 客户端 -> 服务器
// 领取造兵队列,升阶或造兵均可
message BarracksQueueDraw {
    int64 buildingId = 1;
}
message BarracksQueueDrawRt {
}

// msgType = 1677
// 客户端 -> 服务端
// 查看当前建筑新解锁的士兵
message BarracksQueryNewUnlock {
    int64 buildingId = 1; // 建筑唯一id
}

message BarracksQueryNewUnlockRt {
    int32 soldierProtoId = 1; // 新解锁的士兵唯一id，0表示无
}

// msgType = 1678
// 客户端 -> 服务端
// 伤兵治疗取消
message BarracksWoundedSoldierCureCancel {
}
message BarracksWoundedSoldierCureCancelRt {
    string resVo = 1; // 本次取消治疗将会返还的资源,如果不在治疗则报错
}

// msgType = 1679
// 客户端 -> 服务端
// 伤兵治疗取消查询
message BarracksWoundedSoldierCureCancelQuery {
}
message BarracksWoundedSoldierCureCancelQueryRt {
    string resVo = 1; // 此时取消治疗将会返还的资源,如果不在治疗则报错
}

// msgType = 1680
// 客户端 -> 服务器
// 远征--查询
message ExpeditionQuery {
}

message ExpeditionQueryRt {
    repeated int32 expeditionId = 2; // 已经通关的关卡id
    int32 passedMaxFloor = 3; // 当前pass过的最大order
    CheckPointAfkInfo checkPointAfkInfo = 4; // 挂机信息
    repeated int32 chapterId = 5; // 可以领取过的章节奖励

    WalkForceInfo backups = 11;
    int64 strength4HangUp = 21;
    map<int64, int64> strengthMap = 22;
}

// msgType = 1681
// 客户端 -> 服务器
// 远征--战斗
message ExpeditionSlgFight {
    WalkForceInfo walkForceInfo = 1;
    int32 expeditionId = 2;
}

message ExpeditionSlgFightRt {
    string resVo = 2;
    int32 result = 3;
    bool update = 4;
    int32 floor = 5;
    bool chapterReward = 6;
    FightRecordDetails details = 7;
    repeated int32 chapterId = 8; // 可以领取过的章节奖励
}

// msgType = 1682
// 客户端 -> 服务器
// 远征--重置当前章节关卡
message ExpeditionReset {
}

message ExpeditionResetRt {
    repeated int32 expeditionId = 2;
    ExpeditionReceiveOutputRt output = 3;
}

// msgType = 1683
// 客户端 -> 服务器
// 远征--产出 [@see 1294]
message ExpeditionReceiveOutput {
}

message ExpeditionReceiveOutputRt {
    repeated IntToStringKV outputRes = 2; // 领到的奖励，无奖励则字符串为空(挂机时间小于最低可领取时间时),唯一行模板id -> 奖励
    CheckPointAfkInfo checkPointAfkInfo = 3; // 挂机信息
    string reward = 4; // 挂机奖励
}

// msgType = 1684
// 客户端 -> 服务端
// 远征--快速挂机[@see 1297]
message ExpeditionQuickAfk {
}

message ExpeditionQuickAfkRt {
    int32 quickAfkSettleTime = 1; // 快速挂机最后1次使用时间
    int32 quickAfkFreeUsed = 2; // 快速挂机免费已使用次数(3号字段所在的天,5号字段也一样)
    int32 quickAfkCostUsed = 3; // 快速挂机付费已使用次数
    string reward = 4; // 挂机奖励
}

// msgType = 1685
// 客户端 -> 服务器
// 远征--商店商品查询[@see 30]
message ExpeditionShopQuery {

}

message ExpeditionShopQueryRt {
    int32 refreshTime = 2; // 下次刷新的时间点
    repeated MerchantShipRecord records = 3;
}

// msgType = 1686
// 客户端 -> 服务器
// 远征--商店商品兑换[@see 31]
message ExpeditionShopExchange {
    int32 gridId = 1; // 格子Id
    int32 num = 2; // 购买数量
}

message ExpeditionShopExchangeRt {
}

// msgType = 1687
// 客户端 -> 服务器
// 远征--领取章节奖励
message ExpeditionChapterReward {
    int32 chapterId = 1;
}

message ExpeditionChapterRewardRt {
    string resVo = 2;
    repeated int32 chapterId = 3;
}

// msgType = 1688
// 客户端 -> 服务器
// 远征--放置挂机
message ExpeditionHangUp {
    Opt opt = 1;
    repeated int64 heroIds = 2;

    enum Opt {
        Calc = 0;
        Save = 1;
    }
}

message ExpeditionHangUpRt {
    int64 strength = 2;
    map<int64, int64> strengthMap = 3;
}

// msgType = 1689
// 客户端 -> 服务器
// 往避难所中避难兵
message BarracksRefugeSoldier {
    repeated IntToLongKV soldier = 1; // 要藏的兵
    int32 refugeProtoId = 2;// 藏兵方案配置id,对应不同时长
}
message BarracksRefugeSoldierRt {
}

// msgType = 1690
// 客户端 -> 服务端
// 召回避难所中的避难兵
message BarracksRefugeSoldierCancel {
}

message BarracksRefugeSoldierCancelRt {
}

// msgType = 1701
// 客户端 -> 服务器
// 客户端报备购买付费礼包
message BuyGiftPackage {
    int32 giftBagId = 1; // 表内商品唯一ID
}

message BuyGiftPackageRt {
    string orderNo = 1; // 订单ID
}

// msgType = 1702
// 客户端 -> 服务器
// 客户端取消报备购买付费礼包
message CancelBuyGiftPackage {
    int32 giftBagId = 1; // 表内商品唯一ID
}

message CancelBuyGiftPackageRt {
}

// msgType = 1703
// 客户端 -> 服务器
// 请求玩家当前购买的礼包状态
message QueryBuyGiftPackageInfo {
}

message QueryBuyGiftPackageInfoRt {
    repeated GiftPackage giftPackages = 2; // 礼包购买情况
    repeated int32 dayRand = 3; // 随机日礼包
    repeated int32 weekRand = 4; // 随机周礼包
    repeated ExchangeGiftPackageItemVo exchangeGiftPackageItemVos = 5; // 玩家切换奖励的情况
}

message ExchangeGiftPackageItemVo {
    int32 mainType = 1;
    int32 subType = 2;
}

// 礼包信息
message GiftPackage {
    int32 giftProtoId = 1; // 礼包购买状态 不唯一ID
    int32 step = 2; // 这个ID的礼包目前购买到第几阶段了
    int32 buyCount = 3; // 礼包购买次数
}

// msgType = 1704
// 客户端 -> 服务器
// 客户端购买付费礼包 - 不走SDK版
message BuyGiftPackageTest {
    int32 giftBagId = 1; // 表内商品唯一ID
}

message BuyGiftPackageTestRt {
}

// msgType = 1705
// 客户端 -> 服务器
// 客户端收到支付推送的确认消息
message PayNotice {
}

message PayNoticeRt {
}

// msgType = 1706
// 客户端 -> 服务器
// 查询礼包上架列表
message FindCanBuyGiftPackage {
}

message FindCanBuyGiftPackageRt {
    repeated int32 giftPackageId = 2;
}

// msgType = 1707
// 客户端 -> 服务器
// 尝试拉起腾讯充值前的索要票据
message BuyGiftPackageForTencent {
    int32 giftBagId = 1; // 表内商品唯一ID
}

message BuyGiftPackageForTencentRt {
    string token = 1; // 交易的token号（ret=0时才保存，token长度不超过64个字符）。在后续的扣费成功后调用应用的发货接口时会将token传给应用，作为本次交易的标识。
    string urlParams = 2; // ret为0的时候，返回真正购买物品的url的参数，开发者需要把该参数传给sdk支付接口使用户完成真正的购买动作。
    string paramsString = 3; // 提前准备好的客户端穿透参数
}

// msgType = 1708
// 客户端 -> 服务器
// 腾讯点券兑换成钻石
message ExchangeTencentRmb {
    int64 exChangeNum = 1; // 兑换的数量
}

message ExchangeTencentRmbRt {
}

// msgType = 1709
// 客户端 -> 服务器
// 购买活动带的自选礼包
message BuyPurchaseActivityDiyGiftPackage {
    int32 purchaseAvtivityId = 1; // 要购买的礼包隶属哪个活动
    int32 chooseGiftId = 2; // 要购买的礼包ID
    repeated IntToIntKV diyInfo = 3; // key 位置 value 配置里的dropId
}

message BuyPurchaseActivityDiyGiftPackageRt {
}

// msgType = 1710
// 客户端 -> 服务器
// 米大师测试接口
message MidasMoneyTest {
    int32 midasType = 1; // 1-查询 2-扣除 3-回滚扣除 4-赠送
}

message MidasMoneyTestRt {
}

// msgType = 1711
// 客户端 -> 服务器
// 查询米大师余额 会重新查询到有差异为止或触发保险丝
message QueryMidasMoney {
}

message QueryMidasMoneyRt {
}

// msgType = 1712
// 客户端 -> 服务器
// 内网获得充值礼包内容
message GmBuyGiftPackage {
    int32 giftBagId = 1; // 表内商品唯一ID
}

message GmBuyGiftPackageRt {
}

// msgType = 1713
// 客户端 -> 服务器
// 动态切换礼包奖励组
message ExchangeGiftPackageItem {
    int32 mainType = 1;
    int32 subType = 2;
}

message ExchangeGiftPackageItemRt {
}

// msgType = 1714
// 客户端 -> 服务器
// 查询投资礼包情况
message QueryInvestActivity {
}

message QueryInvestActivityRt {
    repeated InvestActivityPb investActivityPb = 1; // 订单ID
}

message InvestActivityPb {
    int32 investActivityId = 1;
    int32 startTime = 2;
    int32 overTime = 3;
    repeated IntToIntKV history = 4; // 返回该礼包持续天数内的活跃度数据 key 0点时间戳 value 本日活跃度值
}

// msgType = 1720
// 客户端 -> 服务器
// 成就勋章升级
message AchievementMedalLvUp {
    int32 medalType = 1; //勋章类型
}

message AchievementMedalLvUpRt {
}

// msgType = 1725
// 客户端 -> 服务器
// 查询救援物资
message QueryRescueRes {
}

message QueryRescueResRt {
    string res = 2;
}

// msgType = 1726
// 客户端 -> 服务器
// 领取救援物资
message GetRescueRes {
}

message GetRescueResRt {
}

// msgType = 1727
// 客户端 -> 服务器
// 查看救援提示
message WatchRescueNotice {
}

message WatchRescueNoticeRt {
}

// msgType = 1728
// 客户端 -> 服务器
// 设置部队预设
message SetForcePlan {
    ForcePlan plan = 1;
    int64 ticket = 2; // 验证屏蔽字票据
}

message SetForcePlanRt {
}

message ForcePlan {
    int32 index = 1; //编号，从1开始
    string name = 2; //名称 默认是空字符串
    repeated IntToIntKV soliderMap = 3; //兵信息
    repeated LongToIntKV heroMap = 4; //英雄信息  heroId - pos
    int64 dragonId = 6; //巨龙Id
}

// msgType = 1729
// 客户端 -> 服务器
// 查询巨龙信息
message QueryDragonInfo {
    int64 targetPlayerId = 1;
    int64 dragonId = 2;
}

message QueryDragonInfoRt {
    Dragon dragon = 2;
}

// msgType = 1730
// 客户端 -> 服务器
// 上报延迟
message ReportElapsed {
    int32 minElapsed = 1;
    int32 maxElapsed = 2;
    int32 avgElapsed = 3;
    string all = 4;
}

message ReportElapsedRt {
}

// msgType = 1731
// 客户端 -> 服务器
// 确认破罩
message ConfirmCoverOver {
}

message ConfirmCoverOverRt {
}

// msgType = 1732
// 客户端 -> 服务器
// 检验名称是否合法
message CheckNameLegal {
    string name = 1; //名称
    repeated int32 length = 2; //名称长度
    int32 checkType = 3; //检测类别
}

message CheckNameLegalRt {
    int32 errorCode = 2;
}

// msgType = 1733
// 客户端 -> 服务器
// 领取科研目标奖励
message GetTargetTaskReward {
    int32 taskIndexId = 1; // 目标ID
    int32 taskType = 2; //任务类型
}

message GetTargetTaskRewardRt {
}

// msgType = 1734
// 客户端 -> 服务器
// 查询至高领主活动
message QueryLordActivity {
}

message QueryLordActivityRt {
    repeated LordActivityVo activityList = 2;
}

//领主活动信息
message LordActivityVo {
    int32 activityId = 1; //活动配置Id,lordactivity表
    int32 startTime = 3; //开始时间
    int32 overTime = 4; //结束时间
    repeated LordActivityStageVo stage = 5; //阶段信息
    int32 totalScore = 6;
    int32 totalRank = 7;

    repeated QueryRankInfoRt rank = 10;
}

//领主活动阶段信息
message LordActivityStageVo {
    int32 stageId = 1; //活动阶段配置Id，lordactivityquest表
    int32 score = 2; //积分
    int32 rank = 3; //当前阶段排名
    repeated int32 rewardedIndex = 4; //已领奖的达成标记
    int32 castleLv = 5; // 活动开启时，个人城堡等级
}

// msgType = 1735
// 客户端 -> 服务器
// 领取至高领主活动阶段积分奖励
message GetLordActivityScoreReward {
    int32 activityId = 1; //活动配置Id,lordactivity表
    int32 stageId = 2; //活动阶段配置Id，lordactivityquest表
    int32 score = 3; //对应的积分，lordactivityquest表中积分要求
}

message GetLordActivityScoreRewardRt {
}

// msgType = 1736
// 客户端 -> 服务器
// 查询至高领主活动排行榜
message QueryLordActivityRank {
    int32 activityId = 1; //活动配置Id,lordactivity表
    int32 stageId = 2; //活动阶段配置Id，lordactivityquest表,0代表全积分排行
    int32 page = 3;
    int32 num = 4;
}


message QueryLordActivityRankRt {
    QueryRankInfoRt myRankInfo = 2;
    repeated QueryRankInfoRt rank = 3;
}

// msgType = 1737
// 客户端 -> 服务器
// 删除部队预设
message DelForcePlan {
    int32 index = 1;
}

message DelForcePlanRt {
}

// msgType = 1738
// 客户端 -> 服务器
// 查询自定义活动下的具体红点显示
message PurcaaseActivityRedPoint {
}

message PurcaaseActivityRedPointRt {
    repeated PurcaaseActivityRedPointVo purcaaseActivityRedPoints = 2;
}

message PurcaaseActivityRedPointVo {
    int32 typeIds = 1;
    int32 num = 2;
}

// msgType = 1739
// 客户端 -> 服务器
// 挑选领主方案
message ChooesLord {
    int32 chooesId = 1; // lordChooes.xml表ID
}

message ChooesLordRt {
}

// msgType = 1741
// 客户端 -> 服务器
// 帮客户端记录引导数据
message GuideInfo {
    repeated GuideInfoVo GuideInfoVos = 1;
}

message GuideInfoRt {
}

message GuideInfoVo {
    string key = 1;
    string v = 2;
}

// msgType = 1742
// 客户端 -> 服务器
// 开始与内城迷雾区域战斗
message BeginFightInnerCityFog {
    int32 buildingAreaId = 1;
    repeated MoveBigInnerCityHeroVo heroIds = 2; // 派遣武将
}

message BeginFightInnerCityFogRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 1743
// 客户端 -> 服务器
// 结算与内城迷雾区域战斗
message EndFightInnerCityFog {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightResult = 2; // 挑战结果
}

message EndFightInnerCityFogRt {
    string rewardString = 2; // 战斗胜利奖励
    repeated EndFightHeroState endFightHeroState = 3;
}

// msgType = 1799
// 客户端 -> 服务器
// 领取礼品码
message DrawGiftKey {
    string keyCode = 1;
}

message DrawGiftKeyRt {
    string gift = 2; // 礼品
}

// msgType = 1800
// 客户端 -> 服务器
// 飞升
message Breakthrough {
}

message BreakthroughRt {
}

// msgType = 1801
// 客户端 -> 服务器
// 兑换修为
message ExChangeBreakthroughExp {
}

message ExChangeBreakthroughExpRt {
}

// msgType = 1805
// 客户端 -> 服务器
// 查询活动奖励
message QueryPlayerActivityReward {
}

message QueryPlayerActivityRewardRt {
    repeated PlayerActivityRewardInfo rewardInfos = 2;
}

message PlayerActivityRewardInfo {
    int64 id = 1; //奖励唯一Id，领奖传这个
    int64 activityId = 2; //活动唯一Id，和活动关联
    int32 activityInfoId = 3; //活动信息配置Id,eventinformation表Id
    int32 score = 4; //活动阶段的积分
    int32 createTime = 5; //获得时间
    int32 rewarded = 6; //是否已领取
}

// msgType = 1806
// 客户端 -> 服务器
// 领取活动奖励
message GetPlayerActivityReward {
    int64 id = 1;
}

message GetPlayerActivityRewardRt {
}

// 联盟战消息号 1810 - 1830

// msgType = 1810
// 客户端 -> 服务器
// 联盟战主界面
message OpenAllianceFight {
    int32 jjcArmyPlan = 6; // 是否要拿竞技场布阵  0-否 1-是
}

message OpenAllianceFightRt {
    int32 allianceFightScore = 2; // 跟着个人走的那个宝箱积分值
    AllianceFightMainVo openAllianceFightMainVo = 3; // 联盟的一些数据
    int32 allianceFightMyApply = 4; // 我的参战状态 0-未参赛 1-参赛中
    int32 gongxian = 5; // 贡献度
    repeated HeroPos heroInfo = 6; // 竞技场防守布阵的英雄信息
}

message AllianceFightMainVo {
    int32 allianceApplyType = 1; // 联盟是否参赛 0-否 1-是
    FightAllianceOppVo fightAllianceOppVo = 2; // 对手数据
    int32 allianceFightLastResult = 10; // 上次战斗结果(胜负平)  0-平 1-胜 2-负
    int32 allianceFightRank = 12; // 联盟暗分
    string systemDescription = 13; // 系统联盟公告
    string description = 14; // 联盟公告
}

message FightAllianceOppVo {
    int32 allianceFightScore = 2; // 我方积分
    int64 allianceFightOppId = 3; // 本届对手ID
    int32 allianceFightOppFlagColor = 4; // 敌方旗帜
    int32 allianceFightOppFlagStyle = 5; // 敌方旗帜
    int32 allianceFightOppFlagEffect = 6; // 敌方旗帜
    string allianceFightOppName = 7; // 敌方全称
    string allianceFightOppShortName = 8; // 敌方简称
    int32 allianceFightOppScore = 9; // 敌方积分
    int32 allianceFightBgSkillId = 10; // 战场技能ID
    int32 belongState = 11; // 联盟所属洲
}

// msgType = 1811
// 客户端 -> 服务器
// 联盟战战场
message OpenAllianceFightMain {
    int64 oppAllianceId = 1; // 这个界面把对手的ID给服务器用一下
}

message OpenAllianceFightMainRt {
    repeated AllianceFightDefArmyPlan allianceFightArmyPlan = 3; // 所有防守布阵具体状态
    repeated int64 allianceFightUseHeroIds = 5; // 本届我的出战情况(武将唯一IDS)
    repeated AllianceFightLogVo allianceFightLogs = 7; // 战斗记录(攻,防,我方位置,分数,时间)
    FightAllianceOppVo fightAllianceOppVo = 8; // 对手数据
}

message AllianceFightDefArmyPlan {
    int64 playerId = 1; // 玩家ID
    string playerName = 2; // 玩家名字
    int64 power = 3; // 实力值
    repeated JjcHeroGenral jjcHeros = 4; // 对方武将数据
    Dragon dragon = 5; // 防守方龙数据
    string allianceFightMyOppName = 6; // 当前状态(正在被战斗的话这个字段是打我的玩家名字)
    int64 allianceId = 7; // 联盟ID
    int32 allianceFightResurgenceTime = 8; // 复活时间
    int32 fightCounts = 9; // 剩余战斗次数
    int32 photoProtoId = 10; // 领主头像
    int32 lastAddCountTime = 11; // 上次回复战斗次数时间
    int32 atkScore = 12; // 击败可获得积分`
    int32 killScore = 13; // 击杀额外获得积分
    repeated int32 initSkills = 14; // 科技带来的技能加成
    int32 belongState = 15; // 联盟所属洲
}

message AllianceFightLogVo {
    string atkName = 1; // 进攻方名字
    string defName = 2; // 防守方名字
    int32 myAllianceType = 3; // 1-我防进攻 2-我方防守
    int32 score = 4; // 中间的积分
    int64 logTime = 5; // 发生时间
    int64 atkId = 6; // 进攻方ID
    int64 defId = 7; // 防守方ID
}

// msgType = 1812
// 客户端 -> 服务器
// 联盟战报名
message AllianceFightApply {
    int32 dealType = 1; // 1-报名 2-取消报名
}

message AllianceFightApplyRt {
}

// msgType = 1813
// 客户端 -> 服务器
// 开始联盟战挑战对手
message AllianceFightBegin {
    int64 allianceId = 1; // 要打的目标帮派
    int64 playerId = 2; // 要打的目标玩家
    repeated HeroPos heroInfo = 3; //英雄信息
    int64 dragonId = 4; //巨龙Id
}

message AllianceFightBeginRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
    JjcChallengeInfo challenge = 3; // 对手
}

// msgType = 1814
// 客户端 -> 服务器
// 结算联盟战挑战对手
message AllianceFightEnd {
    pb4battle.EliminateFight eliminateFight = 3; // 战斗情况
    int32 fightResult = 4; // 挑战结果
}

message AllianceFightEndRt {
    repeated HeroInfoForReport heroInfos = 4; //英雄信息
}

// msgType = 1815
// 客户端 -> 服务器
// 主动退出联盟战挑战斗
message AllianceFightExit {
}

message AllianceFightExitRt {
}

// msgType = 1816
// 客户端 -> 服务器
// 查询所有联盟战战斗记录
message QueryAllianceFightLogs {
}

message QueryAllianceFightLogsRt {
    repeated AllianceFightLogVo allianceFightLogs = 2; // 战斗记录(攻,防,我方位置,分数,时间)
}

// msgType = 1817
// 客户端 -> 服务器
// 领取个人宝箱
message RewardAllianceFightMy {
}

message RewardAllianceFightMyRt {
}

// msgType = 1818
// 客户端 -> 服务器
// 宣战
message AskAllianceSolo {
    int64 allianceId = 1;
}

message AskAllianceSoloRt {
}

// msgType = 1819
// 客户端 -> 服务器
// 打开主界面
message QueryAllianceSolo {

}

message QueryAllianceSoloRt {
    int32 type = 1; // 0-空闲 1-我方进攻 2-我方防守
    int32 state = 2; // 当前状态 1-准备 2-对抗 3-展示
    int32 nextStateTime = 3; // 状态变化时间
    int32 canFightNum = 4; // 剩余战斗次数
    AllianceSoloOppVo allianceSoloOppVo = 5;
    repeated AllianceSoloLog allianceSoloLog = 6;
    int32 allianceFightScore = 7; // 跟着个人走的那个宝箱积分值
    int32 gongxian = 8; // 贡献度
    int32 nextAskTime = 9; // 下次宣战时间
    int64 allianceSoloScore = 10; // 我方联盟战积分
    int64 otherAllianceSoloScore = 11; // 敌方联盟战积分
    int32 myAllianceSoloPay = 12; // 门票 0-无 1-有
}

message AllianceSoloOppVo {
    int32 allianceFightScore = 2; // 我方积分
    int64 allianceFightOppId = 3; // 本届对手ID
    int32 allianceFightOppFlagColor = 4; // 敌方旗帜
    int32 allianceFightOppFlagStyle = 5; // 敌方旗帜
    int32 allianceFightOppFlagEffect = 6; // 敌方旗帜
    string allianceFightOppName = 7; // 敌方全称
    string allianceFightOppShortName = 8; // 敌方简称
    int32 allianceFightOppScore = 9; // 敌方积分
    int32 allianceFightBgSkillId = 10; // 战场技能ID
    int32 belongState = 11; // 联盟所属洲
    int32 myAllianceSoloFightCount = 12; // 我方剩余战斗总次数
    int32 otherAllianceSoloFightCount = 13; // 敌方剩余战斗总次数
}

message AllianceSoloLog {
    string atkName = 1; // 进攻方名字
    string defName = 2; // 防守方名字
    int32 score = 4; // 中间的积分
    int64 logTime = 5; // 发生时间
    int64 atkId = 6; // 进攻方ID
    int64 defId = 7; // 防守方ID
    string atkAllianceName = 8; // 进攻方联盟名字
    string defAllianceName = 9; // 防守方联盟名字
    int64 atkAllianceId = 10; // 进攻方联盟ID
    int64 defAllianceId = 11; // 防守方联盟ID
    int32 atkPhoto = 12; // 进攻方头像
    int32 defPhoto = 13; // 防守方头像
    int32 atkJjcScore = 14; // 进攻方竞技场积分
    int32 defJjcScore = 15; // 防守方竞技场积分
    PhotoViewInfo atkPhotoInfo = 16; // 进攻方头像
    PhotoViewInfo defPhotoInfo = 17; // 防守方头像
}

// msgType = 1820
// 客户端 -> 服务器
// 联盟战战场
message QueryAllianceSoloMain {
}

message QueryAllianceSoloMainRt {
    repeated AllianceSoloDefArmyPlan allianceSoloDefArmyPlans = 3; // 所有防守布阵具体状态
    repeated int64 allianceFightUseHeroIds = 5; // 本届我的出战情况(武将唯一IDS)
    repeated AllianceSoloLog allianceSoloLog = 7; // 战斗记录(攻,防,我方位置,分数,时间)
    AllianceSoloOppVo fightAllianceOppVo = 8; // 对手数据
    int32 myAllianceSoloPay = 9; // 门票 0-无 1-有
}

message AllianceSoloDefArmyPlan {
    int64 playerId = 1; // 玩家ID
    string playerName = 2; // 玩家名字
    int64 power = 3; // 实力值
    repeated JjcHeroGenral jjcHeros = 4; // 对方武将数据
    string allianceFightMyOppName = 6; // 当前状态(正在被战斗的话这个字段是打我的玩家名字)
    int64 allianceId = 7; // 联盟ID
    int32 allianceFightResurgenceTime = 8; // 复活时间
    int32 fightCounts = 9; // 剩余战斗次数
    int32 photoProtoId = 10; // 领主头像
    int32 atkScore = 12; // 击败可获得积分
    int32 killScore = 13; // 击杀额外获得积分
    repeated int32 initSkills = 14; // 科技带来的技能加成
    int32 belongState = 15; // 联盟所属洲
}

// msgType = 1821
// 客户端 -> 服务器
// 开始联盟战挑战对手
message AllianceSoloBegin {
    int64 playerId = 1; // 要打的目标玩家
    repeated HeroPos heroInfo = 2; // 英雄信息
}

message AllianceSoloBeginRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
    JjcChallengeInfo challenge = 3; // 对手
}

// msgType = 1822
// 客户端 -> 服务器
// 结算联盟战挑战对手
message AllianceSoloEnd {
    pb4battle.EliminateFight eliminateFight = 3; // 战斗情况
    int32 fightResult = 4; // 挑战结果
}

message AllianceSoloEndRt {
    repeated HeroInfoForReport heroInfos = 4; //英雄信息
}

// msgType = 1823
// 客户端 -> 服务器
// 主动退出联盟战挑战斗
message AllianceSoloExit {
}

message AllianceSoloExitRt {
}

// msgType = 1824
// 客户端 -> 服务器
// 领取个人宝箱
message RewardAllianceSoloMy {
}

message RewardAllianceSoloMyRt {
}

// msgType = 1830
// 客户端 -> 服务器
// 查询英雄训练所信息
message QueryHeroTrainInfo {
    int64 targetPlayerId = 1; //查询的玩家
}

message QueryHeroTrainInfoRt {
    HeroTrainInfo trainInfo = 2;
}

message HeroTrainInfo {
    string playerName = 1; //训练所的玩家名称
    repeated TrainHero heros = 2; //训练的英雄位
    int32 cardId = 3; //训练卡配置Id
    int32 cardOverTime = 4; //训练卡消失时间
    int32 openFoster = 5; //是否开放寄养
    repeated int64 inviteIds = 6; //私有寄养邀请者
    int32 lastCollectRewardTime = 7; //上次收集道具奖励的时间
    string togetherReward = 8; //累积宝箱奖励（真正奖励还要加上卡片的结算）
    int32 trainExpAdd = 9; //查询玩家的训练经验速度
}

message TrainHero {
    int32 pos = 1; //位置
    int64 playerId = 2; //英雄的玩家Id，默认0代表自己，用于好友寄养
    int64 belongPlayerId = 3; //寄养位置的玩家Id，默认0代表自己，用于寄养到好友那
    string belongPlayerName = 4; //寄养位置的玩家名称
    int32 lastCollectExpTime = 5; //上次收集经验的时间，默认是第一次放入英雄或者放入卡的时间
    int32 trainExp = 6; //寄养经验
    int64 heroId = 7; //英雄Id
    int32 heroProto = 8; //武将模板
    int32 heroLv = 9; //武将等级
    int32 heroStarLv = 10; //武将进阶次数
    int32 quality = 11; //品质
    int64 heroPower = 12; // 武将战斗力
    string heroBelongName = 13; //英雄归属者的名字
    //下方的属性，供好友寄养英雄使用，自己的根据Id查询本地
    int32 trainOverTime = 14; //寄养结束时间
    int32 friendCardId = 15; //寄养好友的卡Id
    int32 friendCardOverTime = 16; //寄养好友的卡结束时间
    int32 friendTrainExpAdd = 17; //寄养好友的训练经验速度
}

// msgType = 1831
// 客户端 -> 服务器
// 英雄上训练位
message HeroOnTrain {
    int64 heroId = 1; //训练的英雄Id
    int64 targetPlayerId = 2; //目标的玩家Id，若是自己的，填自己的玩家Id
    int32 pos = 3; //上阵的位置
}

message HeroOnTrainRt {
    TrainHero trainHero = 2;
}

// msgType = 1832
// 客户端 -> 服务器
// 英雄下训练位
message HeroOffTrain {
    int32 pos = 3; //上阵的位置
}

message HeroOffTrainRt {
}

// msgType = 1833
// 客户端 -> 服务器
// 查询好友训练位
message QueryFriendTrainPos {
}

message QueryFriendTrainPosRt {
    repeated FriendTrainPos friendPos = 2;
}

message FriendTrainPos {
    FriendInfo friend = 1; //好友信息
    int32 cardId = 3; //训练卡配置Id
    int32 cardOverTime = 4; //训练卡消失时间
    int32 trainOverTime = 5; //训练结束时间，用于判定是否有空位，以及什么时候有空位
    int32 openFoster = 6; //是否开放寄养
    int32 inAllow = 7; //是否在邀请列表中
    int32 inLock = 8; //好友开放位是否锁住
}

// msgType = 1834
// 客户端 -> 服务器
// 卸下训练卡
message OffTrainCard {
}

message OffTrainCardRt {
    HeroTrainInfo trainInfo = 2;
}

// msgType = 1835
// 客户端 -> 服务器
// 收集训练英雄奖励
message CollectTrainHeroReward {
    int32 pos = 1;
}

message CollectTrainHeroRewardRt {
    int32 rtCode = 2;
    int32 lastCollectTime = 3;
}

// msgType = 1836
// 客户端 -> 服务器
// 遣返好友训练英雄
message BackFriendTrainHero {
    int32 pos = 1; //训练位
}

message BackFriendTrainHeroRt {
}

// msgType = 1837
// 客户端 -> 服务器
// 设置可在自己这训练的好友
message SetSelfTrainFriend {
    repeated int64 friendIds = 1; //好友Id
}

message SetSelfTrainFriendRt {
}

// msgType = 1838
// 客户端 -> 服务器
// 收集训练卡奖励
message CollectTrainCardReward {
}

message CollectTrainCardRewardRt {
    int32 lastCollectTime = 2;
}

// msgType = 1839
// 客户端 -> 服务器
// 料理合成
message HeroTrainCardCombine {
    int32 foodFusionProtoId = 1; // 料理合成表模板id
    repeated int32 propProtoId = 2; // 选择的道具模板id,必选的也要发
}

message HeroTrainCardCombineRt {
    int32 propProtoId = 1; // 合成的训练卡道具id
}

message PveCloudInfo {
    repeated int32 unlockedCloud = 1; // 已解锁的迷雾
    repeated ResSingleWarInfo resSingleWar = 3; // 单点资源信息
    repeated int32 unlockedArea = 4; // 已解锁的内城区域
    repeated IntToIntKV fadedCloud = 5; // 变淡的迷雾  cloudId -> fadeIndex
}

message ResSingleWarInfo {
    int32 protoId = 1;
    int32 lastPickUp = 2; // 下次刷新时间
    repeated int32 condition = 3; // 已领取的条件奖励的下标,从0开始
    int32 scale = 4; // 手动刷奖励万分比,默认0，无
    int32 picked = 5; // 已拾取次数,大于0表示已被拾取过
}

// msgType = 1851
// 客户端 -> 服务器
// 打开城池PVE战场界面
message OpenBigCity {
}

message OpenBigCityRt {
    int32 autoPveStartTime = 4; // 挂机开始时间
    repeated int32 killRobs = 5; // 击败的盗贼情况  ids
    PveCloudInfo cloudInfo = 6; // 迷雾信息
}

message BigInnerCity {
    int64 id = 1;
    int32 protoId = 2;
    int32 lv = 3;
    int32 occupyReward = 6; // 占领奖励是否领取 0-否 1-是
    int32 mainCityReward = 9; // 首都奖励是否领取
    repeated int32 condReward = 10; // 条件奖励
}

message BigInnerCityHero {
    int64 heroId = 1;
    int32 mainHero = 2; // 是否被委任 0-否 1-是
}

// msgType = 1852
// 客户端 -> 服务器
// 领取占领奖励
message RewardOccupy {
    int32 protoId = 1;
}

message RewardOccupyRt {
}

message MoveBigInnerCityHeroVo {
    int64 heroIds = 1; // 派遣武将
    int32 pos = 2; // 位置
    int32 soldierNum = 3; // 携带士兵
}

// msgType = 1856
// 客户端 -> 服务器
// 开战PVE地图城池
message BeginFightBigCity {
    WalkForceInfo walkForceInfo = 9;
    int32 cityProto = 2; // 要攻打的城池ID
}

message BeginFightBigCityRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 1857
// 客户端 -> 服务器
// PVE地图城池战斗结算
message EndFightBigCity {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EndFightBigCityRt {
    BigInnerCity bigInnerCitys = 3; // 战斗胜利的话这个返回的是打下来的那个城池数据
}

message ResInstanceReward {
    int64 resNum = 1; // 珠子打到的资源
    int64 beishu = 2; // 翻倍数量
    int64 resTotal = 3; // 最终奖励(math.min(maxDrop,resNum*beishu))
    string extraDropStr = 4; // 超出额外掉落
}

// msgType = 1859
// 客户端 -> 服务器
// 主动退出当前三消战斗
message ExitEliminateFight {
}

message ExitEliminateFightRt {
}

// msgType = 1860
// 客户端 -> 服务器
// 开战PVE地图盗贼
message BeginFightPveRob {
    WalkForceInfo walkForceInfo = 9;
    int32 robId = 2; // 要攻打的ID
}

message BeginFightPveRobRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 1861
// 客户端 -> 服务器
// PVE地图盗贼战斗结算
message EndFightPveRob {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightResult = 2; // 挑战结果
}

message EndFightPveRobRt {
    BigInnerCity bigInnerCitys = 3; // 刷新数据结构
    int32 robId = 5; // 要攻打的ID
}

// 战斗后部队的兵力状况
message EndFightHeroState {
    int64 beforeHp = 2; // 战斗前血量
    int64 afterHp = 3; // 战斗后血量
    int64 canAddHp = 4; // 回兵率计算可恢复的血量
    int64 costHp = 5; // 损兵数量
    int32 x = 6;
    int32 y = 7;
    HeroInformationForProperties heroInformationForProperties = 12;
}

// msgType = 1866
// 客户端 -> 服务器
// 快速通关盗贼
message QuickPassKillRobInnerCity {
    repeated MoveBigInnerCityHeroVo heroIds = 1; // 派遣武将
    int32 robId = 2; // 要攻打的ID
}

message QuickPassKillRobInnerCityRt {
    string rewardString = 2; // 奖励,仅快速通关时有效
}

// msgType = 1870
// 客户端 -> 服务器
// 补充资源
message SupplyRes {
    int32 resType = 1; //资源类型
    int64 resNum = 2; //需要补充的资源数量
}

message SupplyResRt {
}

// msgType = 1871
// 客户端 -> 服务器
// 查询当前三消战斗类型
message QueryEliminateFightType {
}

message QueryEliminateFightTypeRt {
    int32 elimianteType = 1;
}

// msgType = 1872
// 客户端 -> 服务器
// 解锁迷雾
message UnlockCloud {
    int32 cloudProtoId = 1;

    repeated int32 cloudId = 11;
}
message UnlockCloudRt {
}

// msgType = 1873
// 客户端 -> 服务器
// 拾取单点资源,第1次
message PickupResSingle {
    int32 pointProtoId = 1;
    int32 index = 2; // 条件下标(从0开始),没有条件奖励的发 -1
}
message PickupResSingleRt {
    int32 nextRefresh = 1; // 下次刷新时间,若迷雾未解锁或条件未达成则不会赋值
    int32 scale = 2; // 非0表示触发天将会鸿运
    string reward = 3; // 获得的奖励
    int32 randomEventFortune = 4; // 随机事件天降鸿运
}

// msgType = 1874
// 客户端 -> 服务器
// pve拦路小怪自动战斗
message BeginAutoFightPveRob {
    repeated MoveBigInnerCityHeroVo heroIds = 1; // 派遣武将
    int32 robId = 2; // 要攻打的ID
}

message BeginAutoFightPveRobRt {
    int32 fightResult = 1; // 战斗结果
    string reward = 2; // 奖励
    int64 mailExtendId = 3; // 邮件战报id
}

// msgType = 1875
// 客户端 -> 服务器
// pve资源点天降鸿运点
message ResSingleWarFortuneRoll {
    int32 protoId = 1; // 模板id
}

message ResSingleWarFortuneRollRt {
    int32 multi = 1; // 资源翻倍倍数
    int32 errorCode = 2; // 4009错误码转移,1表示无错误
}

// msgType = 1877
// 客户端 -> 服务器
// 第2次拾,取天降鸿运
message PickupResSingleFortune {
    int32 pointProtoId = 1;
}
message PickupResSingleFortuneRt {
    int32 errorCode = 1; // 4009错误码转移,1表示无错误
}

// msgType = 1878
// 客户端 -> 服务器
// 净化内城区域
message InnerCityAreaClean {
    int32 protoId = 1;
}

message InnerCityAreaCleanRt {
    repeated InnerCityMapCell cell = 1; // 自动装饰建筑，背包里的话坐标就直接是-1,-1
}


// msgType = 1879
// 客户端 -> 服务器
// 迷雾变淡
message FadeCloud {
    int32 cloudProtoId = 1; //迷雾id
    int32 fadeIndex = 2; //变淡阶段下标
}
message FadeCloudRt {
}

// msgType = 1883
// 客户端 -> 服务器
// 部队行军停止
message WalkStop {
    int64 groupId = 5; //行军组id
}

message WalkStopRt {
}

// msgType = 1884
// 客户端 -> 服务器
// 部队行军
message WalkWithForce {
    int32 runType = 1; //打人、打怪、占领地、占领城、运输资源、采集、驻扎、增援、参与集结
    int32 aimsX = 3; //目的地X
    int32 aimsY = 4; //目的地Y
    int64 groupId = 5; //行军组id
    repeated int64 heroIds = 6; //部队中的英雄Id
    int64 targetId = 7; //目标Id，追兵线Id、魔物Id
    int32 autoStation = 10; //一些特殊行为 出征完成后自动驻扎
    int32 autoExplore = 11; //自动探雾
}

message WalkWithForceRt {
    int32 errorCode = 2;
}

// msgType = 1885
// 客户端 -> 服务器
// 发起行军pvp战斗
message WalkPvpFight {
    int32 runType = 1; //打人、打怪、占领地、占领城、运输资源、采集、驻扎、增援、参与集结
    int32 aimsX = 3; //目的地X
    int32 aimsY = 4; //目的地Y
    int64 targetId = 5; //目标行军组Id，追兵线Id、魔物Id
    string resVo = 6; //运输的资源
    WalkForceInfo walkForceInfo = 9;
    int32 autoStation = 10; //一些特殊行为 出征完成后自动驻扎
    int32 autoExplore = 11; //自动探雾
    repeated IntToIntKV posList = 12;
}

message WalkPvpFightRt {
    int32 errorCode = 2;
    int64 groupId = 4;
}

message WalkForceInfo {
    repeated int64 heroIds = 1; //上阵的英雄 默认第一个是主将
    repeated IntToLongKV soldiers = 2; //士兵数量 士兵Id-数量
    repeated int32 heroPos = 3; //英雄站位，仅用于三消战斗
}

// msgType = 1888
// 客户端 -> 服务器
// 小地图上查看
message WatchOnMiniMap {
    int64 allianceId = 1; //本帮联盟Id
}

message WatchOnMiniMapRt {
    repeated CastleInfo allianceMembers = 3; //联盟成员信息
    repeated FixedPointBuild wonder = 4; //奇观信息
    repeated FixedPointBuild checkPoint = 5; //关卡信息
    repeated FixedPointBuild res = 6; //资源矿信息
    repeated AllianceBuildVo allianceBuild = 7; //本帮联盟据点
}

message CastleInfo {
    int64 playerId = 1;
    string name = 2;
    int32 x = 3;
    int32 y = 4;
}

message FixedPointBuild {
    int32 protoId = 1;
    int64 belongToAllianceId = 2;
    string allianceName = 3;
    string allianceShortName = 4;
}

// msgType = 1889
// 客户端 -> 服务器
// 地图上查看所有玩家城坐标，测试出生用
message WatchMapAllCastle {
    int32 minRange = 1;
    int32 maxRange = 2;
}

message WatchMapAllCastleRt {
    repeated IntToIntKV castlePos = 3; //玩家城坐标，测试出生用
}

// msgType = 1890
// 客户端 -> 服务器
// 开始行军三消战斗
message BeginWalkGroupFight {
    int32 autoFight = 1; //是否自动战斗
    int64 groupId = 2; //行军组Id
}

message BeginWalkGroupFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
    int32 autoFight = 3; //是否自动战斗
}

// msgType = 1891
// 客户端 -> 服务器
// 结束行军三消战斗
message EndWalkGroupFight {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightResult = 2; // 挑战结果
    int64 groupId = 3; //行军组Id
}

message EndWalkGroupFightRt {
    string rewardString = 2; // 战斗胜利奖励
    repeated EndFightHeroState endFightHeroState = 3;
}

// msgType = 1892
// 客户端 -> 服务器
// 开始支线任务三消战斗
message BeginSideTaskFight {
    WalkForceInfo walkForceInfo = 9;
    int32 sideTaskId = 2; // 要攻打的任务ID
}

message BeginSideTaskFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 1893
// 客户端 -> 服务器
// 结束支线任务三消战斗
message EndSideTaskFight {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightResult = 2; // 挑战结果
    int64 groupId = 3; //行军组Id
}

message EndSideTaskFightRt {
}

// msgType = 1894
// 客户端 -> 服务器
// slg攻打怪物
message SlgFightRob {
    WalkForceInfo walkForceInfo = 1;
    int32 robId = 2; // 要攻打的ID
}

message SlgFightRobRt {
    int32 fightResult = 1;
    string res = 2;
    client2server.SlgFightReport report = 200; //战报 不包含记录
}

// msgType = 1895
// 客户端 -> 服务器
// slg攻打pve城池
message SlgFightPveCity {
    WalkForceInfo walkForceInfo = 1;
    int32 pveCityProtoId = 2; // 要攻打的ID
}

message SlgFightPveCityRt {
    int32 fightResult = 1;
    string res = 2;
    BigInnerCity bigInnerCitys = 3;
    client2server.SlgFightReport report = 200; //战报 不包含记录
}

// msgType = 1900
// 客户端 -> 服务器
// 查询行军线详细信息
message QueryWalkLineDetail {
    repeated int64 walkLineId = 1; //行军线Id
}

message QueryWalkLineDetailRt {
    repeated WalkLineDetailInfo walkInfos = 1;
}

message WalkLineDetailInfo {
    int64 walkLineId = 1;
    FarmInfo farmInfo = 2;
    repeated HeroInformationForProperties heros = 3;
    int64 playerId = 4;
    string playerName = 5;
    int64 allianceId = 6;
    string allianceShortName = 7;
    PhotoViewInfo photoInfo = 9;
}

// msgType = 1901
// 客户端 -> 服务器
// 帮助行军线加速
message HelpWalkLineSpeedUp {
    int64 walkLineId = 1; //行军线Id
}

message HelpWalkLineSpeedUpRt {
    int32 helpNum = 2; //帮助的人数
}

// msgType = 1902
// 客户端 -> 服务器
// 开始打劫采集行军线
message BeginRobFarmWalkLineFight {
    repeated WalkForceArraySite heroIds = 1; // 派遣武将
    int64 walkLineId = 2; //行军线Id
}

message BeginRobFarmWalkLineFightRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗所有数据
}

// msgType = 1903
// 客户端 -> 服务器
// 结束打劫采集行军线
message EndRobFarmWalkLineFight {
    pb4battle.EliminateFight eliminateFight = 1; // 战斗情况
    int32 fightResult = 2; // 挑战结果
    int64 walkLineId = 3; //行军线Id
}

message EndRobFarmWalkLineFightRt {
    string rewardString = 2; // 战斗胜利奖励
    repeated EndFightHeroState endFightHeroState = 3;
}

// msgType = 1904
// 客户端 -> 服务器
// 查询打劫行军信息
message QueryRobWalkInfo {
}

message QueryRobWalkInfoRt {
    int32 robCount = 1; //打劫次数
    int32 robRefTime = 2; //打劫刷新时间
    int32 farmCount = 3; //采集次数
    int32 farmRefTime = 4; //采集刷新时间
}

// msgType = 1905
// 客户端 -> 服务器
// 一键请求帮助资源线
message RequestHelpResWalk {
    repeated int64 walkLineId = 1; //行军线Id
}

message RequestHelpResWalkRt {
}

// msgType = 1906
// 客户端 -> 服务器
// 查询行军小人位置
message QueryWalkRobotPos {
    int64 walkLineId = 1; //行军线Id
}

message QueryWalkRobotPosRt {
    int32 x = 1;
    int32 y = 2;
}

// msgType = 1907
// 客户端 -> 服务器
// 感谢帮助
message ThankResWalkHelp {
    repeated LongToLongKV targetIds = 1; //行军线Id - 目标玩家
}

message ThankResWalkHelpRt {
}

// msgType = 1908
// 客户端 -> 服务器
// 资源线快速返回
message ResWalkFastBack {
    int64 walkId = 1;
}

message ResWalkFastBackRt {
}

// msgType = 1911
// 客户端 -> 服务器
// 查询旗帜信息
message QueryFlagInfo {
    int64 targetPlayerId = 1;
}

message QueryFlagInfoRt {
    LanFormat flagName = 1;
    int32 flagReadType = 2; // 读取方式  1-读lan 2-直接读内容
    int64 revengeTargetId = 3; // 复仇对象的玩家Id
    int32 flagLockOverTime = 4; // 旗帜锁定期限
    int32 flagUpdateTime = 5; // 旗帜修改时间
    LanFormat flagSelfName = 6; // 自己设置的最后一次旗帜内容
    int32 flagSelfReadType = 7; // 自己设置的最后一次旗帜内容  读取方式  1-读lan 2-直接读内容
    repeated FlagEditedRecord flagEditedRecord = 10; // 旗帜修改记录
}

message FlagEditedRecord {
    string content = 1;
    int64 playerId = 2;
    string playerName = 3;
    int32 photoProtoId = 4;
    int32 time = 5;
}

// msgType = 1912
// 客户端 -> 服务器
// 修改旗帜
message UpdateFlagInfo {
    int64 targetPlayerId = 1;
    string flagName = 2;
    int64 ticket = 3; // 验证屏蔽字票据
}

message UpdateFlagInfoRt {
    int32 flagUpdateTime = 1; // 旗帜修改时间
    repeated FlagEditedRecord flagEditedRecord = 2; // 旗帜修改记录
}

// msgType = 1919
// 客户端 -> 服务器
// 道具合成
message PropExchange {
    repeated PropList consumeProps = 1;
}

message PropExchangeRt {
    string rewardString = 2; //获得的道具及数量
}

message PropList {
    int32 exchangeId = 1; //合成的类型
    repeated int32 propId = 2; //需要合成的propId的List
}

message HeroShardStoreGrid {
    int32 grid = 1; // 期
    repeated IntToIntKV exchangedTimes = 2; // 已兑换次数,key-行唯一id
    int32 ticketBuyNum = 3; // 本期兑换券已购买次数
}

// msgType = 1920
// 客户端 -> 服务器
// 查询英雄兑换
message HeroShardStoreQuery {
}

message HeroShardStoreQueryRt {
    repeated HeroShardStoreGrid grids = 1;
    int32 lastTime = 2; // 最后1次购买时间

    map<int32, int32> itemBuyBum = 10; // 商品购买数量
    map<int32, int32> dailyTicketNum = 11; // key:heroExchangePropsShop的id, value是当日已经购买的次数
    int32 ticketRefreshTime = 12; // 重置兑换券的时间

}

// msgType = 1921
// 客户端 -> 服务器
// 兑换英雄碎片商店
message HeroShardStoreBuy {
    int32 protoId = 1; // 行唯一id
    int32 num = 2; // 数量
}

message HeroShardStoreBuyRt {
}

// msgType = 1922
// 客户端 -> 服务器
// 英雄兑换--购买兑换券
message HeroShardStoreTicketBuy {
    int32 protoId = 1; // heroExchangePropsShop的id
    int32 num = 2; // 兑换券购买数量
}
message HeroShardStoreTicketBuyRt {
}


// msgType = 1923
// 客户端 -> 服务器
// 七日商店--查询
message FestivalStoreQuery {
    int32 purchaseActivityId = 1;
}

message FestivalStoreQueryRt {
    repeated HeroShardStoreGrid grids = 1;
    int32 lastTime = 2; // 最后1次购买时间

    map<int32, int32> itemBuyBum = 10; // 商品购买数量
    map<int32, int32> dailyTicketNum = 11; // key:heroExchangePropsShop的id, value是当日已经购买的次数
    int32 ticketRefreshTime = 12; // 重置兑换券的时间

}

// msgType = 1924
// 客户端 -> 服务器
// 七日商店--兑换商店
message FestivalStoreBuy {
    int32 purchaseActivityId = 1;
    int32 protoId = 2; // 行唯一id
    int32 num = 3; // 数量
}

message FestivalStoreBuyRt {
}

// msgType = 1925
// 客户端 -> 服务器
// 七日商店--购买兑换券
message FestivalTicketBuy {
    int32 purchaseActivityId = 1;
    int32 protoId = 2; // heroExchangePropsShop的id
    int32 num = 3; // 兑换券购买数量
}
message FestivalTicketBuyRt {
}

// msgType = 1926
// 客户端 -> 服务器
// 三日限时兑换商店--查询
message QueryTimeExchangeShop {
    int32 purchaseActvId = 1;
}

message QueryTimeExchangeShopRt {
    repeated ExchangeInfo exchangeInfo = 2;
}

// msgType = 1931
// 客户端 -> 服务器
// 恐龙--操作
message DinosaurOperate {
    Operation opt = 1;
    int32 protoId = 11;     // 恐龙配置id
    int64 missionId = 31;   // 答题任务唯一id
    int32 choice = 32;      // 答题选项

    enum Operation {
        PASS = 0;
        CAPTURED = 1;   // 抓捕
        TRANSPORT = 2;  // 运输
        ANSWER = 3;     // 答题
    }
}

message DinosaurVO {
    int32 protoId = 1;
    int32 state = 2;
    int32 capturedTime = 3;
}

message DinosaurMissionVO {
    int64 id = 1;
    int32 missionProtoId = 2;
    int32 dinosaurId = 3;
    int32 researchId = 4;
}

message DinosaurOperateRt {
    DinosaurVO dinosaurVO = 21;
    bool answer = 31;
    DinosaurMissionNotice missionInfo = 32;
}

// msgType = 1932
// 客户端 -> 服务器
// 恐龙羁绊答题任务查询
message DinosaurQuery {
    // pass
}

message DinosaurQueryRt {
    map<int32, DinosaurVO> dinosaurVO = 2;
    DinosaurMissionNotice missionInfo = 3;
}

// msgType = 1933
// 客户端 -> 服务器
// 恐龙射击关卡完成
message DinosaurShootAwardPrizes {
    int32 shootDinosaurLevelId = 1;//恐龙射击关卡ID
    int32 isVictory = 2;//是否胜利 0失败 1胜利
    repeated LevelSchedule levelScheduleList = 3;//进度信息
}

message LevelSchedule{
    int32  id = 1;//条件类型
    int32 param1 = 2;//任务要求完成度
    int32 param2 = 3;//实际完成度
    int32 isCompleted = 4;//是否完成
}

message DinosaurShootAwardPrizesRt {
    string reward = 2;
}

// msgType = 1934
// 客户端 -> 服务器
// 恐龙射击关卡开始
message DinosaurShootStar {
    int32 shootDinosaurLevelId = 1;
}

message DinosaurShootStarRt {

}

// 联盟建筑模块
// msgType = 2001
// 客户端 -> 服务器
// 建造联盟建筑
message CreateAllianceBuild {
    int32 buildProtoId = 1;
    int32 x = 2;
    int32 y = 3;
}

message CreateAllianceBuildRt {
    int64 buildId = 1;
    int32 overTime = 2;
}

// msgType = 2002
// 客户端 -> 服务器
// 取消建造联盟建筑
message CancelCreateAllianceBuild {
    int64 buildId = 1;
}

message CancelCreateAllianceBuildRt {
}

// msgType = 2003
// 客户端 -> 服务器
// 拆除联盟建筑
message RemoveAllianceBuild {
    int64 buildId = 1;
}

message RemoveAllianceBuildRt {
    int32 overTime = 1;
}

// msgType = 2004
// 客户端 -> 服务器
// 取消拆除联盟建筑
message CancelRemoveAllianceBuild {
    int64 buildId = 1;
}

message CancelRemoveAllianceBuildRt {
    int32 buildState = 1;
    int32 overTime = 2;
}

// msgType = 2005
// 客户端 -> 服务器
// 联盟建筑灭火
message PutOutFireAllianceBuild {
    int64 buildId = 1;
    int32 buildProtoId = 2; // 建筑模板
}

message PutOutFireAllianceBuildRt {
    int32 buildState = 1;
    int32 startTime = 2;
    int32 overTime = 3;
    int64 buildDurability = 6; // 建筑耐久度
}

// msgType = 2006
// 客户端 -> 服务器
// 我们帮的建筑列表
message QueryAllianceBuilds {
}

message QueryAllianceBuildsRt {
    repeated AllianceBuildVo allianceBuildVos = 1;
    repeated AllianceBuildCD allianceBuildCD = 2;
    repeated NpcCityInfo npcCityInfos = 3;

    repeated AllianceResVo allianceResVos = 10; //占领的资源矿信息
    int32 balanceAliResTime = 11; //上次结算时间
    int32 receiveAliResTime = 12; //已经结算的时间（秒）
    string receiveAliRes = 13; //已经结算到的资源
}

//联盟资源矿
message AllianceResVo {
    int32 x = 1;
    int32 y = 2;
    int32 allianceResId = 3;
}

message AllianceBuildVo {
    int64 buildId = 1;
    int32 buildProtoId = 2;
    int32 buildState = 3; // 建筑状态 1-稳定 2-耐久回复中 4-燃烧中 4-拆除中
    int32 buildStateStartTime = 4; // 建筑状态操作开始时间
    int32 buildStateOverTime = 5; // 建筑状态操作结束时间
    int64 buildDurability = 6; // 建筑耐久度
    int32 allianceBuildX = 7; // 联盟建筑底座的坐标
    int32 allianceBuildY = 8; // 联盟建筑底座的坐标
    repeated WalkGroup groups = 9; //玩家部队信息
    int64 allianceBuildWorldId = 10; // 联盟建筑底座所在世界
    int32 buildOk = 11; // 建筑是否曾经建造完成过 因为需要区分是否是建造途中被打燃烧  0-否 1-建造完成的时间戳
    int32 buildType = 12; // 建筑类型
    int64 allianceId = 13; // 联盟ID
    int32 buildStartTime = 14; // 建筑状态开始回复的时间
    int32 onWord = 15; // 建筑是否生效 0-否 1-是
    string allianceShortName = 16; //联盟简称，仅仅据点时有
    int32 tpFlag = 17; // 是否是集结点
    int32 belongState = 18; // 联盟所属洲
    AllianceBuildSoliderVo allianceBuildSoliderVo = 19; // 新版的旗帜用的关于填兵的玩法
    repeated AllianceLose allianceLoses = 20; // 击败我的玩家
    int32 nextPutOutFireTime = 21; // 下次可灭火时间
    bool haveBigWonder = 23; //是否拥有大奇观
    int64 mainAllianceFilialeAllianceId = 24; // 主盟ID
    int64 buildDurabilityLimit = 25; // 建筑耐久度
    int32 fireSpeed = 26; // 燃烧状态的话 这个字段是燃烧速度 因为有小数 这边扩大了100倍 用的时候自己/100
    int64 occBuildAllianceId = 27; // 当前占领着这个建筑的联盟ID
    int32 buildSpeed = 28; // 回复状态的话 这个字段是建造回复速度 因为有小数 这边扩大了100倍 用的时候自己/100
    int64 bindBuildId = 29; // 关联的建筑id，用于军事设施建筑关联
    int32 nextCannonAtkTime = 30;   // 下次炮塔攻击的时间
}

message AllianceLose {
    int64 allianceId = 1;
    string allianceShortName = 2;
    int64 overTime = 3;
}

// 新版的旗帜用的关于填兵的玩法
message AllianceBuildSoliderVo {
    int64 buildPlayerId = 1; // 发起者ID
    int64 buildTaskEndTime = 2; // 建造状态的到点时间
    int64 buildNowSoliderNum = 3; // 当前的建造填兵进度
    int64 buildNeedSoliderNum = 4; // 需要的建造填兵总值
    int64 buildWaitTime = 5; // 建造等待时间
    int64 destroyEndTime = 6; // 摧毁状态的到点时间
    int64 destroyNowSoloderNum = 7; // 当前的摧毁填兵进度
    int64 destroyWaitTime = 8; // 摧毁等待时间
    int64 atkAllianceId = 9; // 攻击该旗帜的联盟ID
    int64 atkPlayerId = 10; // 发起攻击该旗帜的玩家ID
    string maxSoliderPlayerName = 13; // 建造期间是发起者的名字，建造完成为建造期间补兵最多的玩家
    repeated AllianceFlagLogVo buildAllianceFlagLogs = 11; // 建造填兵数据
    repeated AllianceFlagLogVo destroyAllianceFlagLogs = 12; // 摧毁填兵数据
}

// 填兵数据
message AllianceFlagLogVo {
    int64 playerId = 1;
    int32 soliderNum = 2;
}

message AllianceBuildCD {
    int32 buildProtoId = 1;
    int32 overTime = 2;
}

// msgType = 2007
// 客户端 -> 服务器
// 召集联盟成员
message ConveneAllianceMembers {
    string content = 1; // 召集的弹幕内容
    int64 ticket = 2; // 验证屏蔽字票据
}

message ConveneAllianceMembersRt {
    int32 nextConveneTime = 1;
}

// msgType = 2008
// 客户端 -> 服务器
// 尝试响应联盟召集
message TryResponseConvene {
    int32 x = 1; // 要响应的XY
    int32 y = 2;
}

// 这个消息RT固定返回1 如果XY都为-1 就表示服务器没找到落点 跟现在功能一样跳转即可 否则就拿着XY调用领地迁城消息
message TryResponseConveneRt {
    int32 x = 1;
    int32 y = 2;
}

// msgType = 2009
// 客户端 -> 服务器
// 设置回城点
message ChangeTpFlag {
    int64 buildId = 1;
}

message ChangeTpFlagRt {
}

// msgType = 2010
// 客户端 -> 服务器
// 设置回城点
message QueryTpFlags {
}

message QueryTpFlagsRt {
    repeated AllianceBuildVo allianceBuild = 1; //联盟建筑(只有据点跟奇观)
}

// msgType = 2011
// 客户端 -> 服务器
// 召唤盟友参与联盟建筑
message InviteJoinAllianceBuilding {
    int32 x = 1;
    int32 y = 2;
}

message InviteJoinAllianceBuildingRt {
}

// msgType = 2012
// 客户端 -> 服务器
// 查看增援部队信息
message QueryJoinAllianceBuilding {
}

message QueryJoinAllianceBuildingRt {
    int32 todayObtainedNum = 2; // 今日已经获得的联盟币
    int32 lastObtainTime = 3; // 上次结算时间
    int32 reinforceForceNum = 4; // 正在增援部队数量
    int32 coinInForceNum = 5; // 外面部队已经获得的联盟币
}

// msgType = 2013
// 客户端 -> 服务器
// 发起进攻其他联盟旗帜
message AtkAllianceFlag {
    int32 x = 1;
    int32 y = 2;
}

message AtkAllianceFlagRt {
}

// msgType = 2015
// 客户端 -> 服务器
// 查询所有关卡信息
message QueryAllWorldCheckPointInfo {
}

message QueryAllWorldCheckPointInfoRt {
    repeated WorldCheckPointInfo infos = 1;
}

message WorldCheckPointInfo {
    int32 protoId = 1; //模板Id
    int64 allianceId = 2; //占领的联盟Id
    string allianceName = 3; //占领的联盟名称
    string allianceShortName = 4; //占领的联盟简称
}

// msgType = 2016
// 客户端 -> 服务器
// 查看关卡排行榜
message QueryWorldCheckPointRank {
    int32 protoId = 1; //模板Id
}

message QueryWorldCheckPointRankRt {
    repeated PlayerActivityRankVo topRankVos = 2;
    int32 selfRank = 3;
    PlayerActivityRankVo selfRankVo = 4; // 自己的排名
}

// msgType = 2017
// 客户端 -> 服务器
// 查询关卡部队信息
message QueryWorldCheckPointForce {
    int32 protoId = 1; //模板Id
}

message QueryWorldCheckPointForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
    repeated WonderNpcSoliderInfo npcSoliderInfos = 3; //npc士兵数量
}

// msgType = 2018
// 客户端 -> 服务器
// 查询资源矿部队信息
message QueryResForce {
    int32 protoId = 1; //模板Id
}

message QueryResForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
    repeated WonderNpcSoliderInfo npcSoliderInfos = 3; //npc士兵数量
}

// msgType = 2019
// 客户端 -> 服务器
// 资源矿占领时长排行榜
message QueryResOccupyRank {
    int32 protoId = 1; //资源矿模板Id
    int64 allianceId = 2; //联盟Id
}

message QueryResOccupyRankRt {
    repeated AllianceActivityRankVo topRankVos = 2;
    int32 selfRank = 3;
    AllianceActivityRankVo selfRankVo = 4; // 自己联盟的排名
}

// msgType = 2020
// 客户端 -> 服务器
// 资源矿杀敌排行榜
message QueryResKillRank {
    int32 protoId = 1; //奇观模板Id
}

message QueryResKillRankRt {
    repeated PlayerActivityRankVo topRankVos = 2;
    int32 selfRank = 3;
    PlayerActivityRankVo selfRankVo = 4; // 自己的排名
}

// msgType = 2021
// 客户端 -> 服务器
// 查询全部资源矿信息
message QueryResInfo {
}

message QueryResInfoRt {
    repeated ResInfo res = 2;
}

message ResInfo {
    int32 protoId = 1;
    int32 status = 2; // 1-和平 2-战争
    int64 allianceId = 3; //占领联盟Id(未占领-0)
    int32 startTime = 4; // 战斗开始时间
    int32 endTime = 5; // 战斗结束时间
    PlayerNameInfo player = 6;
    int32 haveNpc = 8; //是否与NPC 0否 1是
}

// msgType = 2022
// 客户端 -> 服务器
// 小地图上查看州信息
message WatchStateOnMiniMap {
    int32 state = 1; //州
}

message WatchStateOnMiniMapRt {
    repeated AllianceBuildVo allianceBuild = 2; //联盟建筑
}

// msgType = 2023
// 客户端 -> 服务器
// 联盟建筑位置迁移
message MoveAllianceBuild {
    int32 targetX = 1; // 玩家选中 迁移地X（地基）
    int32 targetY = 2; // 玩家选中 迁移地Y（地基）
    int64 buildId = 3; // 建筑id
}

message MoveAllianceBuildRt {
    int32 overTime = 2;
}

// msgType = 2030
// 客户端 -> 服务器
// 每日三消活动主界面请求
message OpenFightDayEliminate {
}

message OpenFightDayEliminateRt {
    int32 protoId = 1; // 本届模板
    int64 myScore = 3; // 我的最高积分
    repeated DayEliminateApplyInfo dayEliminateApplyInfos = 4; // 参赛者数据
    repeated int64 historyInfoTimes = 5; // 名人堂时间戳数据
    EliminateChallengeShopInfo eliminateChallengeShopInfo = 6; // 商店信息
}

message EliminateChallengeShopInfo {
    int32 castleLv = 1; // 本届开始时候主堡等级
    repeated IntToIntKV buyInfo = 2; // 购买情况  key-表ID value-购买次数
}

message DayEliminateApplyInfo {
    int64 playerId = 1; //
    string name = 2; //
    string allianceName = 3; //
    string allianceShortName = 4; //
    int64 score = 5; // 比赛积分
    PhotoViewInfo photoInfo = 6;
}

// 名人堂
message HistoryInfo {
    int64 playerId = 1; //
    int32 rank = 2; // 排名
    string name = 3; //
    string allianceName = 4; //
    string allianceShortName = 5; //
    int64 score = 6; // 比赛积分
    PhotoViewInfo photoInfo = 7;
    int64 overTime = 8; // 结束时间
}

// msgType = 2031
// 客户端 -> 服务器
// 查看某一届的名人堂数据
message QueryHistoryInfo {
    int64 historyInfoTime = 1;
}

message QueryHistoryInfoRt {
    repeated HistoryInfo historyInfos = 5; // 名人堂数据
}

// msgType = 2032
// 客户端 -> 服务器
// 三消挑战商店购买物品
message BuyEliminateChallengeShop {
    int32 shopProtoId = 1;
    int32 num = 2;
}

message BuyEliminateChallengeShopRt {
}

// msgType = 2033
// 客户端 -> 服务器
// 自动攻打贼兵
message EnemySoliderAutoFight {
    repeated MoveBigInnerCityHeroVo heroIds = 1; // 派遣武将
    int64 id = 2;
}

message EnemySoliderAutoFightRt {
}

// msgType = 2034
// 客户端 -> 服务器
// 查询离线消息
message QueryOfflineMsg {
    int64 id = 1;
}

message QueryOfflineMsgRt {
    repeated OfflineMsgData msgData = 1;
}

message OfflineMsgData {
    int64 id = 1;
    int32 msgType = 2; //消息类型
    int32 readType = 3; //阅读类型 1、读lan 2、读内容
    string msg = 4; //消息内容
    repeated string parms = 5; //消息参数
    int32 createTime = 6; //创建时间
}

// msgType = 2035
// 客户端 -> 服务器
// 检测目标点能否攻击
message CheckTargetCanAtk {
    int32 x = 1;
    int32 y = 2;
    int32 runType = 3;
}

message CheckTargetCanAtkRt {
    int32 canAtk = 1;
}

// msgType = 2036
// 客户端 -> 服务器
// 设置集结目标
message SetMassTarget {
    int32 x = 1;
    int32 y = 2;
}

message SetMassTargetRt {
}

// msgType = 2037
// 客户端 -> 服务器
// 响应集结
message ResponseMass {
    int64 sendPlayerId = 1; //发起集结的人
}

message ResponseMassRt {
}

// msgType = 2038
// 客户端 -> 服务器
// 查询周围小地图
message QueryMapAround {
    int32 unWatch = 1; //是否取消观察
}

message QueryMapAroundRt {
    repeated NewEveryLandInfo lands = 1; //格子信息
}

// msgType = 2039
// 客户端 -> 服务器
// 查询演武排行
message QueryEliminateChallengeRank {
}

message QueryEliminateChallengeRankRt {
    repeated QueryRankInfoRt playerRank = 1;
    QueryRankInfoRt myPlayerRank = 2;
}

// msgType = 2042
// 客户端 -> 服务器
// 查询联盟旗帜补兵排行
message QueryAllianceFlagRank {
    int64 buildId = 1; //联盟建筑的唯一id
    int32 page = 2;
    int32 num = 3;
    int32 type = 4; // 查找范围 110-防守 111-进攻
}

message QueryAllianceFlagRankRt {
    QueryRankInfoRt myRankInfo = 2;
    int32 page = 3;
    int32 type = 4;
    repeated WorldPlayerRankInfo rankInfo = 5;
}

// msgType = 2045
// 客户端 -> 服务器
// 发起托管请求
message SendTrustRequest {
    repeated int64 playerIds = 1; //请求的玩家Id
}

message SendTrustRequestRt {
}

// msgType = 2046
// 客户端 -> 服务器
// 处理托管请求
message HandleTrustRequest {
    int64 playerId = 1; //发起请求的玩家Id
    int32 agree = 2; //是否同意 0、否 1、是
}

message HandleTrustRequestRt {
}

// msgType = 2047
// 客户端 -> 服务器
// 取消托管请求
message CancelTrustRequest {
    int64 playerId = 1; //托管的玩家Id
}

message CancelTrustRequestRt {
}

// msgType = 2048
// 客户端 -> 服务器
// 取消托管
message CancelTrust {
    int64 playerId = 1; //托管的玩家Id
}

message CancelTrustRt {
}

// msgType = 2049
// 客户端 -> 服务器
// 查询托管信息
message QueryTrustInfo {
}

message QueryTrustInfoRt {
    repeated TrustInfo trustInfos = 1; //我托管的
    repeated TrustInfo beTrustInfos = 2; //托管我的
    repeated TrustRequestInfo reqTrusts = 3; //请求的托管
    repeated TrustRequestInfo beReqTrusts = 4; //别人请求的托管
}

message TrustInfo {
    int64 id = 1;
    TrustPlayerInfo player = 2; //被托管的玩家
    TrustPlayerInfo trustPlayer = 3; //托管的玩家
    int32 startTime = 4; //开始时间
    int32 overTime = 5; //结束时间
    repeated TrustFarmInfo farmInfos = 6; //采集信息
}

message TrustRequestInfo {
    int64 id = 1;
    TrustPlayerInfo player = 2; //请求的玩家
    TrustPlayerInfo reqTrustPlayer = 3; //请求托管的玩家
    int32 startTime = 4; //开始时间
    int32 overTime = 5; //结束时间
}

message TrustPlayerInfo {
    SimplePlayerInfo info = 1;
    int32 offlineTime = 2; //上次离线时间，如果在线，该值为0
    int32 trustNum = 3; //已经托管的人数
    repeated int32 canGotoStates = 4; //可以去的州
    int32 beTrustNum = 5; //已被多少人托管
    int64 soliderNum = 6; //兵总量，用来算采集队列数量
    int32 armyPlanNum = 7; //设置的预设数量
}

// msgType = 2050
// 客户端 -> 服务器
// 查询托管部队
message QueryTrustForce {
    int64 playerId = 1; //托管的玩家Id
}

message QueryTrustForceRt {
    repeated TrustForce forces = 1;
}

message TrustForce {
    int32 smallId = 1; //部队预设里面的小类型
    repeated TrustForceArraySite arrayInfo = 9;
}

message TrustForceArraySite {
    WalkForceArraySite arraySite = 1;
    int32 inPrison = 2; //在监禁中
    int32 outWalk = 3; //在外出行军
}

// msgType = 2051
// 客户端 -> 服务器
// 托管部队出去行军
message TrustForceWalk {
    int64 playerId = 1; //托管的玩家Id
    int32 smallId = 2; //部队预设里面的小类型
    int32 runType = 4; //行军类型
    int32 aimsX = 5; //目的地X
    int32 aimsY = 6; //目的地Y
    int64 targetId = 7; //目标玩家/集结Id
}

message TrustForceWalkRt {
}

// msgType = 2052
// 客户端 -> 服务器
// 放弃托管
message GiveUpTrust {
    int64 playerId = 1; //被托管的玩家Id
}

message GiveUpTrustRt {
}

// msgType = 2053
// 客户端 -> 服务器
// 查询码头部队信息
message QueryDockForce {
    int32 protoId = 1; //模板Id
}

message QueryDockForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
}

message WorldActivityInfo2 {
    int64 id = 1; // 唯一id
    int32 protoId = 2; // 模板id
    int32 start = 3; // 开始时间
    int32 over = 4; // 结束时间
    int32 balance = 5; // 结算时间

    int32 process = 10; // 全区任务进度
    int32 reach = 11; // 是否达成
    int32 draw = 12; // 天下大势奖励是否已经领取,非0表示已领取

    int32 alceTaskProcess = 21; // 联盟任务进度
    int32 alceTaskFinish = 22; // 联盟任务是否已完成
    int64 alceTaskDraw = 23; // 联盟任务奖励是否已经领取,非0表示已领取

    int32 rankRewardState=24;//排行榜奖励状态 0未领取 1已领取 2无奖励可领
}

// msgType = 2054
// 客户端 -> 服务器
// 查看天下大势
message WorldActivityQuery {
}
message WorldActivityQueryRt {
    repeated WorldActivityInfo2 worldActivity = 1;
}
// msgType = 2055
// 客户端 -> 服务器
// 查看天下大势奖励
message WorldActivityDraw {
    int64 id = 1;
    int32 type = 2; // 0-全区任务奖励,1-联盟任务奖励
}
message WorldActivityDrawRt {
}

// msgType = 2056
// 客户端 -> 服务器
// 领取天下天下大势排行榜奖励
message WorldActivityRankRewardDraw {
    int64 id = 1;
}
message WorldActivityRankRewardDrawRt {
    string reward = 2;//奖励信息
}

// msgType = 2070
// 客户端 -> 服务器
// 获得/强化英雄共享装备
message HeroSharedEquipmentsUp {
    int32 protoId = 1; // 发升级后的配置id
}

message HeroSharedEquipmentsUpRt {
    repeated int32 heroSharedEquipments = 1; // 英雄共享装备(配置表唯一id)，全部
}

// msgType = 2075
// 客户端 -> 服务器
// 放弃藏兵洞的使用
message HaltShelter {
    int32 x = 1;
    int32 y = 2;
}

message HaltShelterRt {
}

// msgType = 2076
// 客户端 -> 服务器
// 离开地图建筑
message LeaveMapBuild {
    int64 groupId = 1;
}

message LeaveMapBuildRt {
}

// msgType = 2077
// 客户端 -> 服务器
// 部队航行（码头）
message ForceSail {
    int32 targetX = 1;
    int32 targetY = 2;
    int64 groupId = 3;
}

message ForceSailRt {
}

// msgType = 2078
// 客户端 -> 服务器
// 复活部队
message RebornForce {
    int64 groupId = 1;
}

message RebornForceRt {
}

// msgType = 2079
// 客户端 -> 服务器
// 发送部队标签
message SendForceExpression {
    int64 groupId = 1;
    int32 expressionId = 2;
}

message SendForceExpressionRt {
}

// msgType = 2080
// 客户端 -> 服务器
// 添加联盟标记
message AllianceMark {
    int32 aimsX = 1;
    int32 aimsY = 2;
    int32 markId = 3; // 协议id
    string content = 4; // 标记内容
    int32 areaNo = 5; // 服务器区号
    int64 ticket = 6; // 验证屏蔽字票据
}

message AllianceMarkRt {
    int64 markId = 2; // 标记的唯一id
    int32 replace = 3;
}

// msgType = 2081
// 客户端 -> 服务器
// 删除联盟标记
message DeleteAllianceMark {
    int64 markId = 1; //标记的唯一id
}

message DeleteAllianceMarkRt {

}

message AllianceMarkEnum {
    int32 landX = 1;
    int32 landY = 2;
    int32 areaNo = 3;       // 服务区ID
    string content = 4;     // 标记的内容
    string playerName = 5;  // 名字
    int64 playerId = 6;
    int64 id = 7;           // 标记点唯一ID
    int32 markId = 8;       // 模板id
    int32 from = 9;         // 0手动发布，1自动发布
    repeated string param = 10;    // 参数
}

// msgType = 2082
// 客户端 -> 服务器
// 查询联盟标记
message QueryAllianceMark {

}

message QueryAllianceMarkRt {
    repeated AllianceMarkEnum allianceMarks = 2;
}

// msgType = 2083
// 客户端 -> 服务器
// 清除联盟标记读取的状态
message ClearAllianceMarkReadStat {
}

message ClearAllianceMarkReadStatRt {
}

// msgType = 2084
// 客户端 -> 服务器
// 领取联盟资源矿资源
message ReceiveAllianceResReward {
}

message ReceiveAllianceResRewardRt {
}

message AllianceResEnum {
    int32 resType = 1;
    int64 nowNum = 2;
    int64 capacity = 3; //最大容量，0表示无上限
}

//联盟仓库使用记录
message alliHouseUseRecord {
    repeated AllianceResEnum allianceResVos = 1;
    int32 actionType = 3; //用途
    int32 useTime = 4;
    string playerName = 5;
    int32 photoId = 6; //头像
    int32 relateProtoId = 7; //相关操作的协议id
    int32 photoFrameProtoId = 8;//头像框ID
}

// msgType = 2085
// 客户端 -> 服务器
// 联盟仓库
message QueryAllianceWarehouse {

}

message QueryAllianceWarehouseRt {
    repeated AllianceResEnum allianceResVos = 2;
    repeated alliHouseUseRecord useRecord = 3;
    repeated AllianceResVo allianceMinerals = 4; //占领的资源矿信息
}

// msgType = 2086
// 客户端 -> 服务器
// 查询联盟仓库资源
message QueryAllianceResNum {

}

message QueryAllianceResNumRt {
    repeated AllianceResEnum allianceResVos = 2; //占领的资源矿信息
}

// msgType = 2087
// 客户端 -> 服务器
// 查询个人联盟资源每日获取量
message QueryAllianceDailyLmt {

}

message QueryAllianceDailyLmtRt {
    map<int32, ObtainRecordInfo> coinLmtMap = 2; // 联盟币
    map<int32, ObtainRecordInfo> scoreLmtMap = 3; // 联盟积分

    message ObtainRecordInfo {
        int32 lastObtainTime = 1;
        int32 todayObtainedNum = 2;
    }
}

// msgType = 2090
// 客户端 -> 服务器
// home发起的walkPvpFight
message WalkPvpTransport {
    int32 runType = 1; //home发起类型，@see WalkPvpFight
    int32 aimsX = 3; //目的地X
    int32 aimsY = 4; //目的地Y
    int64 targetId = 5; //目标行军组Id，追兵线Id、魔物Id
    string resVo = 6; //运输的资源
    WalkForceInfo walkForceInfo = 9;
    int32 autoFight = 10; //是否是自动战斗，目前仅用于猎魔，该情况下，服务器会修正带兵数量
}

message WalkPvpTransportRt {
    int32 errorCode = 2;
    int64 groupId = 4;
}

// msgType = 2092
// 客户端 -> 服务器
// 查询至高领主活动历史
message QueryLordActivityHistory {
}

message QueryLordActivityHistoryRt {
    repeated LordActivityHistory history = 1;
}

message LordActivityHistory {
    int32 activityId = 1;
    int32 startTime = 2;
    int32 overTime = 3;
    repeated LordActivityRankPlayer onRankPlayers = 4;
    LordActivityRankPlayer lastKillPlayer = 5;
}

message LordActivityRankPlayer {
    int64 playerId = 1;
    string name = 2;
    PhotoViewInfo photoInfo = 3;
    int64 allianceId = 4;
    string allianceShortName = 5;
    int32 score = 6;
}

// msgType = 2093
// 客户端 -> 服务器
// 查询夺宝奇兵
message QueryTurntableAct {
    int32 activityId = 1;
}

message QueryTurntableActRt {
    repeated IntToIntKV propIndex = 2; // 已中奖励
    int32 refreshTimes = 3; // 刷新的次数
    int32 lotteryCount = 4; // 已经lottery的次数
}

// msgType = 2094
// 客户端 -> 服务器
// 开始夺宝奇兵
message PlayTurntableAct {
    int32 activityId = 1;
    int32 position = 2;
}

message PlayTurntableActRt {
    IntToIntKV propIndex = 2; // 奖励index
    string reward = 3;
}

// msgType = 2095
// 客户端 -> 服务器
// 重置夺宝奇兵
message RefreshTurntableAct {
    int32 activityId = 1;
}

message RefreshTurntableActRt {
    int32 refreshTimes = 2;
}

// msgType = 2096
// 客户端 -> 服务器
// 查询配置活动
message QueryConfigActivity {
}

message QueryConfigActivityRt {
    repeated IntToIntKV activities = 2; // 奖励index
}

// msgType = 2097
// 客户端 -> 服务器
// 查询冲榜活动
message QueryPartPointActivity {
    int32 activityId = 1;
}

message QueryPartPointActivityRt {
    int32 score = 2; // 已经获得的积分
    repeated IntToIntKV rewardState = 3; // key: condition， value：1表示已经领取
    repeated IntToIntKV superRewardState = 14; // key: condition， value：1表示已经领取 高级奖励领取状态
    repeated IntToIntKV stageScore = 4; // key: condition， value：对应分数
    repeated IntToIntKV stageUpTime = 5; // key: condition， value：达到时间
    int32 myRank = 6;
    int32 myAllianceAt = 7; // 我的入盟时间
    int32 castPreLv = 8; // 活动开始时的城堡等级
    int32 consumePreType = 15; // 活动开始时的充值级别
    int32 payFlag = 16; // 付款标记  0-否 1-是
    EPartRankStatus rankStatus = 9; // 排行榜状态

    repeated QueryInAllianceRankVo topThree = 11; // 联盟前三甲
    repeated int32 receivedAllianceStageIds = 12; // 已经领取的联盟阶段奖励
    int64 allianceScore = 13;

    enum EPartRankStatus {
        OPEN = 0;
        CLOSE = 1;
    }
}

// msgType = 2098
// 客户端 -> 服务器
// 领取冲榜活动奖励
message ReceivePartPointActivityReward {
    int32 activityId = 1;
    int32 position = 2;
    EPartReward rewardType = 3;

    enum EPartReward {
        PERSONAL = 0;
        ALLIANCE = 1;
        PERSONAL_SUPER = 2; //个人阶段奖励, 高级奖励
    }
}

message ReceivePartPointActivityRewardRt {
    string resVo = 2;
}

// msgType = 2099
// 客户端 -> 服务器
// 查询冲榜活动排行榜
message QueryPartPointActivityRank {
    int32 activityId = 1;
    EPartRank rankType = 2;
    int32 page = 10;
    int32 num = 11;

    enum EPartRank {
        PERSONAL = 0;
        ALLIANCE = 1;
    }
}

message QueryPartPointActivityRankRt {
    QueryRankInfoRt myRankInfo = 2;
    repeated QueryRankInfoRt rank = 3;

    repeated QueryAllianceRankVo allianceRank = 4;
    int32 myAllianceRank = 5; // 我帮派的排行  0表示不再前100
    int64 myAllianceScore = 6; // 我帮派的成绩

    repeated QueryInAllianceRankVo queryInAllianceRankVos = 11; // 排行内容
    QueryInAllianceRankVo rank4Me = 12;
    int32 page = 13;
    int32 type = 14;
}

// msgType = 2100
// 客户端 -> 服务器
// 查询分盟数据
message QueryAllianceFiliale {
}

message QueryAllianceFilialeRt {
    AllianceFilialeEveryInfo mainAlliance = 1; // 主盟数据
    repeated AllianceFilialeEveryInfo filialeAlliance = 2; // 分盟数据
    int64 myQuitTime = 3; // 如果我是分盟并且正在请求脱离 这个字段返回的是脱离申请时间
    repeated AllianceFilialeWonderInfo wonderInfos = 4;
}

message AllianceFilialeWonderInfo {
    int64 allianceId = 1;
    repeated int32 wonderProtoId = 2;
}

// 分盟数据
message AllianceFilialeEveryInfo {
    int64 allianceId = 1; // 目标
    string name = 2; // 联盟名
    int32 flagColor = 3; //联盟旗帜颜色
    int32 flagStyle = 4; //联盟旗帜样式
    int32 flagEffect = 5; //联盟旗帜图案
    int64 fightValue = 6; // 联盟战斗力
}

// 邀请其他联盟成为分盟的记录
message AllianceFilialeInvite {
    int64 allianceId = 1; // 目标
    string name = 2; // 联盟名
    int32 flagColor = 3; //联盟旗帜颜色
    int32 flagStyle = 4; //联盟旗帜样式
    int32 flagEffect = 5; //联盟旗帜图案
    int64 fightValue = 6; // 联盟战斗力
    int32 huoyuedu = 7; // 活跃度评级
}

// 其他联盟申请脱离分盟的记录
message AllianceFilialeQuitReq {
    int64 allianceId = 1; // 目标
    string name = 2; // 联盟名
    int32 flagColor = 3; //联盟旗帜颜色
    int32 flagStyle = 4; //联盟旗帜样式
    int32 flagEffect = 5; //联盟旗帜图案
    int64 fightValue = 6; // 联盟战斗力
    int32 huoyuedu = 7; // 活跃度评级
    int32 reqTime = 8; // 申请时间
}

// msgType = 2101
// 客户端 -> 服务器
// 邀请联盟成为分盟
message InviteAllianceFiliale {
    int64 allianceId = 1; // 目标
}

message InviteAllianceFilialeRt {
}

// msgType = 2102
// 客户端 -> 服务器
// 取消邀请联盟成为分盟
message CancelInviteAllianceFiliale {
    int64 allianceId = 1; // 目标
}

message CancelInviteAllianceFilialeRt {
}

// msgType = 2103
// 客户端 -> 服务器
// 接受邀请成为分盟
message JoinAllianceFiliale {
    int64 allianceId = 1; // 目标
}

message JoinAllianceFilialeRt {
}

// msgType = 2104
// 客户端 -> 服务器
// 舍弃分盟
message RemoveAllianceFiliale {
    int64 allianceId = 1; // 目标
}

message RemoveAllianceFilialeRt {
}

// msgType = 2105
// 客户端 -> 服务器
// 申请脱离分盟
message QuitAllianceFiliale {
}

message QuitAllianceFilialeRt {
}

// msgType = 2106
// 客户端 -> 服务器
// 请求分盟邀请/脱离数据
message QueryAllianceFilialeReq {
}

message QueryAllianceFilialeReqRt {
    repeated AllianceFilialeInvite allianceFilialeInvites = 1; // 邀请其他联盟成为分盟的记录
    repeated AllianceFilialeQuitReq allianceFilialeQuitReqs = 2; // 其他联盟申请脱离分盟的记录
}

// msgType = 2107
// 客户端 -> 服务器
// 处理分盟脱离
message ApplyAllianceFilialeQuit {
    int64 allianceId = 1; // 目标
    int32 apply = 2; // 1.同意 2.拒绝
}

message ApplyAllianceFilialeQuitRt {
}

// msgType = 2120
// 客户端 -> 服务器
// 打开平判之战
message OpenArmyActivity {
}
message OpenArmyActivityRt {
    ArmyActivityProtoInfo armyActivityProtoInfo = 1;
}

message ArmyActivityProtoInfo {
    int64 lastScore = 1; // 联盟的上届积分
    int32 chooseLv = 2; // 本次选择的难度
    int64 nowScore = 3; // 当前的积分
    int32 nowCount = 4; // 当前波数
    int64 nextCountTime = 5; // 下波出怪时间
    int32 activityX = 6; // 本次活动指定出怪坐标X
    int32 activityY = 7; // 本次活动指定出怪坐标Y

    int32 tickets = 8; // 是否拥有门票 0否1是
    repeated int32 loseCount = 9; // 失败波数
    int64 myScore = 10; // 我的积分

    int32 autoChooseLv = 11;
    int32 autoOpenTime = 12;
    int32 chooseLvTime = 13; // 活动开始时间戳

    repeated ArmyActivityCountInfo armyActivityCountInfos = 14;

    int32 myRankNo = 21;
    int32 allianceRankNo = 22;
    repeated int32 robotArriveTime = 23;
}

message ArmyActivityCountInfo {
    int32 count = 1; // 波数
    int32 totleCount = 2; // 发出的波数
    int32 winCount = 3; // 成功守住的波数
}

// msgType = 2121
// 客户端 -> 服务器
// 官员报名平判之战
message ApplyArmyActivity {
    int32 chooseLv = 1; // 本次选择的难度
}

message ApplyArmyActivityRt {
}

// msgType = 2122
// 客户端 -> 服务器
// 查询平判之战活动排行榜
message QueryArmyActivityRank {
    int32 queryType = 1; // 1-个人 2-联盟
    int32 page = 2;
    int32 num = 3;
}

message QueryArmyActivityRankRt {
    QueryRankInfoRt myRankInfo = 1;
    repeated QueryRankInfoRt rank = 2;

    QueryAllianceRankVo myQueryAllianceRankVos = 3;
    repeated QueryAllianceRankVo queryAllianceRankVos = 4;
    int32 page = 5;
    int32 num = 6;
}

// msgType = 2123
// 客户端 -> 服务器
// 预约平叛
message ReserveArmyActivity {
    int32 chooseLv = 1; // 本次预约选择的难度
    int32 openTime = 2; // 本次预约选择的开始时间
}

message ReserveArmyActivityRt {
}

// msgType = 2124
// 客户端 -> 服务器
// 取消预约平叛
message CancelReserveArmyActivity {
}

message CancelReserveArmyActivityRt {
}

// msgType = 2126
// 客户端 -> 服务器
// 查询可加入联盟id
message QueryAllianceTipId {
}

message QueryAllianceTipIdRt {
    int32 rt = 2;
    repeated int64 allianceId = 3;
}

// msgType = 2127
// 客户端 -> 服务器
// 联盟点赞成长
message GiveAllianceThumbsUp {
    int64 chatInfoId = 1;
    int64 playerId = 2;
}

message GiveAllianceThumbsUpRt {
    string resVo = 2;
}

// msgType = 2128
// 客户端 -> 服务器
// 联盟招募
message SendAllianceRecruit {
    string message = 1; // 聊天对象内容
    repeated string params = 2; //消息参数
    int32 time = 3; // 联盟招募
    int64 ticket = 4; // 验证屏蔽字票据
}

message SendAllianceRecruitRt {
    int32 nextRecruitTime = 2; // 下次可招募时间
    int32 times = 3; // 已招募次数
    int32 rtCode = 4;
}

// msgType = 2131
// 客户端 -> 服务器
// 我们帮的奇观战数据
message QueryAllianceWorldWonder {
}

message QueryAllianceWorldWonderRt {
    int32 score = 1; // 本赛季积分
    repeated WorldWonderPb worldWonders = 2; // 各个奇观数据
}

message WorldWonderPb {
    int32 worldWonderProtoId = 1; // 模板ID
    WorldWonderVoApplyPb worldWonderVoApplys = 2; // 奇观报名情况
    WorldWonderRewardPb worldWonderNpcRewardVos = 3; // 击杀守军获得的分配的奖励信息
    WorldWonderRewardPb worldWonderRewardVos = 4; // 占领奇观获得的分配的奖励信息
}

message WorldWonderVoApplyPb {
    int32 applyType = 1; // 报名类型  1-手动 2-自动
    repeated int32 chooseTime = 2; // 选择的时间段
}

message WorldWonderRewardPb {
    int32 canRewardNum = 1; // 目前还有多少个奖励能分配
    repeated LongToIntKV rewardInfo = 2; // 分配情况 key 玩家ID value 数量
}

// msgType = 2132
// 客户端 -> 服务器
// 报名奇观战数据
message AllianceWorldWonderApply {
    int32 worldWonderProtoId = 1; // 模板ID
    repeated int32 chooseTime = 2; // 选择的时间段
}

message AllianceWorldWonderApplyRt {
}

// msgType = 2133
// 客户端 -> 服务器
// 查看奇观荣耀榜
message QueryAllianceWorldWonderLog {
    int32 worldWonderProtoId = 1; // 模板ID
}

message QueryAllianceWorldWonderLogRt {
    repeated AllianceWorldWonderLog allianceWorldWonderLogs = 1;
}

message AllianceWorldWonderLog {
    int32 mainPlayerPhoto = 1; // 盟主头像
    string mainPlayerName = 2; // 盟主名字
    string allianceName = 3; // 联盟名
    int64 occTime = 4; // 占领时间点
}

// msgType = 2134
// 客户端 -> 服务器
// 查看奇观当前状态
message QueryWorldWonderInfo {
}

message QueryWorldWonderInfoRt {
    repeated WorldWonderInfo worldWonderInfos = 1;
}

message WorldWonderInfo {
    int32 worldWonderProtoId = 1; // 模板ID
    int64 allianceId = 2; // 当前占领联盟ID
    string allianceName = 3; // 当前占领联盟名
    int64 startTime = 4; // 占领开始计算时间 如果是0 就是已经稳定被占领了
    int32 npcDie = 6; // 守军是否已经被击杀过
}

// msgType = 2135
// 客户端 -> 服务器
// 查询坐标部队驻守信息
message QueryWorldWonderForce {
    int32 x = 1;
    int32 y = 2;
}

message QueryWorldWonderForceRt {
    repeated WalkGroup groups = 2; //玩家部队信息
}

// msgType = 2136
// 客户端 -> 服务器
// 查询奇观部队信息
message WorldWonderSendReward {
    int32 type = 1; // 1-击杀守军奖励 2-占领奖励
    int32 wonderId = 2; //奇观配置Id
    repeated LongToIntKV rewardInfo = 3; // key 玩家ID value  几个
}

message WorldWonderSendRewardRt {
}

// msgType = 2137
// 客户端 -> 服务器
// 查询奇观的积分情况
message QueryWorldWonderScore {
}

message QueryWorldWonderScoreRt {
    repeated QueryWorldWonderScorePb queryWorldWonderScorePbs = 1;
}

message QueryWorldWonderScorePb {
    int64 allianceId = 1;
    string allianceName = 2;
    int32 flagColor = 3; //联盟旗帜颜色
    int32 flagStyle = 4; //联盟旗帜样式
    int32 flagEffect = 5; //联盟旗帜图案
    int32 score = 6;
}

// msgType = 2138
// 客户端 -> 服务器
// 查询奇观物品的分配情况
message QueryWorldWonderRewardLog {
}

message QueryWorldWonderRewardLogRt {
    repeated QueryWorldWonderRewardLogPb queryWorldWonderRewardLogPbs = 1;
}

message QueryWorldWonderRewardLogPb {
    int32 pos = 1; // 职位
    string name = 2; // 发送者的玩家名
    string reward = 3; // 奖励
    string rewardName = 4; // 被奖励的玩家
    int32 wonderId = 5; //奇观配置Id
    int32 time = 6; // 时间
}

// msgType = 2139
// 客户端 -> 服务器
// 取消报名奇观战数据
message AllianceWorldWonderCancelApply {
    int32 worldWonderProtoId = 1; // 模板ID
}

message AllianceWorldWonderCancelApplyRt {
}

// msgType = 2141
// 客户端 -> 服务器
// 查询奇遇任务
message QueryFortuitousReward {
}

message QueryFortuitousRewardRt {
    int32 targetX = 2;
    int32 targetY = 3;
    int32 eliminateQuestProtoId = 4; // eliminateQuest表的模板id
    int32 taskState = 5; // 任务状态 0-进行中 1-已完成 2-已领取奖励
}

// msgType = 2142
// 客户端 -> 服务器
// 领取驻扎后的地块行为奖励
message ReceiveStationedReward {
    int32 targetX = 1;
    int32 targetY = 2;
    int64 groupId = 3;
}

message ReceiveStationedRewardRt {
    string resVo = 2;
    int32 npcProtoId = 3; // npc模板id
}

// msgType = 2144
// 客户端 -> 服务器
// 查询道具合成记录
message QueryItemCompoundRecord {
}

message QueryItemCompoundRecordRt {
    repeated IntToIntKV records = 1;
}

// msgType = 2145
// 客户端 -> 服务器
// 查询一些活动的状态
message QueryActivityStatus {
    repeated int32 partPointId = 1; // 冲榜活动模板id
    repeated int32 taskType = 2; // 任务类型
}

message QueryActivityStatusRt {
    repeated IntToIntKV partPointStatus = 2; // key: 活动模板id, value: 城堡等级
    QueryTaskRt taskInfo = 3;
}

// msgType = 2146
// 客户端 -> 服务器
// 查询Npc坐标
message QueryMapNpcPos {
    int32 npcProtoId = 1; // Npc模板id
}

message QueryMapNpcPosRt {
    int32 aimsX = 2;
    int32 aimsY = 3;
}

// msgType = 2147
// 客户端 -> 服务器
// 查询世界boss状态
message QueryEliminateMonsterStatus {
    int32 aimsX = 1;
    int32 aimsY = 2;
    int32 npcType = 3;
}

message QueryEliminateMonsterStatusRt {
    int64 remainHp = 2; // 剩余血量
    int64 totalHp = 3; // 总共血量
    int32 mapNpcId = 5; // Npc模板id
    int32 aimsX = 6;
    int32 aimsY = 7;
    repeated EliminateMonsterRecord record = 8; // 单次攻击记录
    int32 overTime = 9;
    int32 status = 10; // 0 关闭状态， 1 开启状态
    int32 myRankNo = 11; // 我的排名
}

// msgType = 2148
// 客户端 -> 服务器
// 攻击三消世界boss开始战斗
message EliminateWorldBossAtkStart {
    WalkForceInfo walkForceInfo = 9;
    int32 posX = 2;
    int32 posY = 3;
    int64 groupId = 4;
}

message EliminateWorldBossAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 2149
// 客户端 -> 服务器
// 攻击三消世界boss完成
message EliminateWorldBossAtkFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EliminateWorldBossAtkFinishRt {
    int64 remainHp = 5;
    int64 totalHp = 6;
    int64 damage = 7; // 造成伤害
    bool hasKilled = 8; // 是否已被击杀, true的话表示污染之地已经被别人结算击杀掉
    int32 disappearReason = 9; // 消失原因，1被击杀，2逃跑
}

// msgType = 2150
// 客户端 -> 服务器
// 攻击三消精英魔物开始战斗
message EliminateEliteMonsterAtkStart {
    WalkForceInfo walkForceInfo = 9;
    int32 posX = 2;
    int32 posY = 3;
    int64 groupId = 4;
}

message EliminateEliteMonsterAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 2151
// 客户端 -> 服务器
// 攻击三消精英魔物完成
message EliminateEliteMonsterAtkFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EliminateEliteMonsterAtkFinishRt {
    int64 remainHp = 5;
    int64 totalHp = 6;
    int64 damage = 7; // 造成伤害
    bool hasKilled = 8; // 是否已被击杀
}

// msgType = 2152
// 客户端 -> 服务器
// 查询魔物攻击记录
message QueryEliminateMonsterRecord {
}

message EliminateMonsterRecord {
    int64 playerId = 1; // 玩家id
    string playerName = 2;
    int64 damage = 3; // 上次攻击伤害
    int32 time = 4; // 上次攻击时间
}

message QueryEliminateMonsterRecordRt {
    repeated EliminateMonsterRecord record = 3;
}

// msgType = 2153
// 客户端 -> 服务器
// 查询世界boss排行榜
message QueryWorldBossRank {
    int32 page = 1;
    int32 num = 2;
}

message QueryWorldBossRankRt {
    QueryRankInfoRt myRankInfo = 2;
    repeated QueryRankInfoRt rank = 3;
}

// msgType = 2154
// 客户端 -> 服务器
// 查询世界boss历史记录
message QueryWorldBossHistory {
}

message WorldBossRecord {
    int32 startTime = 1; // 开始时间
    repeated LordActivityRankPlayer player = 2;
    LordActivityRankPlayer lastKillPlayer = 3;
}

message QueryWorldBossHistoryRt {
    repeated WorldBossRecord record = 3;
}

// msgType = 2155
// 客户端 -> 服务器
// 查询地图访问记录
message QueryMapNpcExploreRecord {
}

message QueryMapNpcExploreRecordRt {
    repeated IntToIntKV exploredPos = 1;
}

// msgType = 2156
// 客户端 -> 服务器
// 资源点天降鸿运倍率刷新
message RefResPointTakeMulti {
}

message RefResPointTakeMultiRt {
    int32 resPointId = 1;
    int32 num = 2;
}

// msgType = 2157
// 客户端 -> 服务器
// 领取资源点天降鸿运奖励
message ReceiveResPointTakeMultiReward {
}

message ReceiveResPointTakeMultiRewardRt {
}

// msgType = 2158
// 客户端 -> 服务器
// 攻击三消污染之地开始战斗
message EliminatePollutedAtkStart {
    WalkForceInfo walkForceInfo = 9;
    int32 posX = 2;
    int32 posY = 3;
    int64 pollutedId = 4;
    int64 groupId = 5;
}

message EliminatePollutedAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
    int64 pollutedId = 3;
}

// MsgType = 2159
// 客户端 -> 服务端
// 污染之地战斗结束
message PollutedFinishFight {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
    int64 pollutedId = 4;
}

message PollutedFinishFightRt {
    int64 remainHp = 5;
    int64 totalHp = 6;
    int64 damage = 7; // 造成伤害
    bool hasKilled = 8; // 是否已被击杀, true的话表示boss已经被别人结算击杀掉
    int32 disappearReason = 9; // 消失原因，1被击杀，2逃跑
}

message FistivalBossFinishFightRt {
    int64 remainHp = 5;
    int64 totalHp = 6;
    int64 damage = 7; // 造成伤害
    bool hasKilled = 8; // 是否已被击杀, true的话表示boss已经被别人结算击杀掉
    int32 disappearReason = 9; // 消失原因，1被击杀，2逃跑
}

// MsgType = 2160
// 客户端 -> 服务端
// 污染之地队伍排名
message QueryPollutedArmyRank {
    int64 pollutedId = 1;
    int32 page = 2;
    int32 num = 3;
}

message QueryPollutedArmyRankRt {
    repeated PollutedArmyRankInfo rankList = 1;
    PollutedArmyRankInfo myRankInfo = 2;
}

message PollutedArmyRankInfo {
    string name = 2; //玩家名字
    int32 photo = 3; //玩家头像
    int64 id = 8; //玩家ID
    PhotoViewInfo photoInfo = 9; //玩家头像
    string allianceShortName = 10;
    int64 allianceId = 11;
    int32 score = 12;
    int64 armyId = 13;
}

// MsgType = 2161
// 客户端 -> 服务端
// 污染之地联盟排名
message QueryPollutedAllianceRank {
    int32 page = 1;
    int32 num = 2;
}

message QueryPollutedAllianceRankRt {
    repeated PollutedAllianceRankInfo rankList = 1;
}

// MsgType = 2162
// 客户端 -> 服务端
// 污染之地联盟排名
message QueryPollutedStar {

}

message QueryPollutedStarRt {
    int32 star = 1;
    int32 canJoinArmyLv = 2;
}

message PollutedAllianceRankInfo {
    string allianceName = 1; //联盟名称
    string allianceShortName = 2; //联盟简称
    int32 allianceLan = 3; //联盟语种
    int32 flagColor = 4; // 联盟旗帜的颜色
    int32 flagStyle = 5; // 联盟旗帜的样式
    int32 flagEffect = 6; // 联盟旗帜图案
    string mainPlayerName = 7; //盟主名字
    int32 star = 8;
    int64 allianceId = 9;
}

// MsgType = 2163
// 客户端 -> 服务端
// 查询队伍排名内具体的信息
message QueryPollutedArmyRankDetail {
    int64 armyId = 1;
}

message QueryPollutedArmyRankDetailRt {
    repeated PollutedArmyRankDetail detail = 1;
}

message PollutedArmyRankDetail {
    string playerName = 1;
    int64 playerId = 2;
    int32 score = 3;
}

// MsgType = 2164
// 客户端 -> 服务端
// 查询队伍排名内具体的信息
message QueryAlliancePollutedAtk {
}

message QueryAlliancePollutedAtkRt {
    repeated AlliancePollutedAtk atkInfo = 1;
}

message AlliancePollutedAtk {
    int32 pollutedId = 1;
    int32 smallMonsterNum = 2;
    int32 normalMonsterNum = 3;
    int32 bossNum = 4;
    int32 x = 5;
    int32 y = 6;
    int32 exitTime = 7;

}

// msgType = 2165
// 客户端 -> 服务器
// 查询联盟日程
message QueryAllianceCalendar {
}

message AllianceCalendarData {
    int32 type = 1; // 类型
    string target = 2; // 目标
    string title = 3; // 标题
    string require = 5; // 要求
    string content = 6; // 内容
    int32 time = 7; // 要求完成的时间 进行中
    int64 id = 8; // 日程唯一id，删除使用
    repeated string param = 9; // lan中的参数
}

message QueryAllianceCalendarRt {
    repeated AllianceCalendarData underway = 2; // 进行中
    repeated AllianceCalendarData completed = 3; // 已完成
}

// msgType = 2166
// 客户端 -> 服务器
// 发布联盟日程
message PublishAllianceCalendar {
    int32 type = 1; // 类型
    string title = 2; // 目标点名字
    string target = 4; // 目标点名字
    string require = 5; // 要求
    string content = 6; // 内容
    int32 time = 7; // 要求完成的时间 进行中
    int64 ticket = 8; // 验证屏蔽字票据
}

message PublishAllianceCalendarRt {
}

// msgType = 2167
// 客户端 -> 服务器
// 删除联盟日程
message DeleteAllianceCalendar {
    int64 calendarId = 1;
}

message DeleteAllianceCalendarRt {
}

// msgType = 2168
// 客户端 -> 服务器
// 查看是否在污染之地队伍中
message QueryPlayerInArmy {
    int64 playerId = 1;
}

message QueryPlayerInArmyRt {
    int32 isInArmy = 1;
}

message VisitQuestInfo {
    int32 showInformationId = 1;
    int32 receiveNum = 2;
    int32 nextReceiveTime = 3;
    int32 haveReceive = 4; //1-表示已经接取过任务
    int32 npcId = 5;
    int32 nextNpcId = 6;
    int32 receiveInformationId = 7;
    int32 nextInformationTime = 8;
    int32 lordstate = 9;
    int32 hieronId = 10;
    int32 receiveCastleLv = 11;
}

// msgType = 2171
// 客户端 -> 服务器
// 查看神庙探访
message QueryVisitQuest {
    int32 queryNextNpc = 1; //1-查询，0-不查询
}

message QueryVisitQuestRt {
    VisitQuestInfo visitQuest = 1;
}

// msgType = 2172
// 客户端 -> 服务器
// 领取神庙探访任务
message ReceiveVisitQuest {
}

message ReceiveVisitQuestRt {
    VisitQuestInfo visitQuest = 1;
    int32 hieronId = 2;
}

// msgType = 2173
// 客户端 -> 服务器
// 领取神庙探访奖励
message SubmitVisitQuest {
    int32 npcId = 5;
}

message SubmitVisitQuestRt {
    VisitQuestInfo visitQuest = 1;
}

// msgType = 2174
// 客户端 -> 服务器
// 领取神庙探访情报
message GetInformation {
    int32 hieronId = 1;
}

message GetInformationRt {
    VisitQuestInfo visitQuest = 1;
    int32 nextInformationTime = 2;
    int32 informationId = 3;
}

// msgType = 2175
// 客户端 -> 服务器
// 查询神庙探访情报
message QueryInformation {
    int32 hieronId = 1;
    int32 isRefresh = 2;
}

message QueryInformationRt {
    VisitQuestInfo visitQuest = 1;
    int32 nextInformationTime = 2;
    int32 informationId = 3;
}

// msgType = 2176
// 客户端 -> 服务器
// 查询npc城池活动信息
message QueryNpcCityActivity {
    int32 state = 1;
    int32 level = 2;
    int32 isOnBuildArea = 3;
}

message QueryNpcCityActivityRt {
    repeated NpcCityActivity npcCityActivity = 1;
}

message NpcCityActivity {
    int32 state = 1;
    int32 stateEndTime = 2;
    int32 protoId = 3;
    int64 belongAllianceId = 4;
    int32 isOnBuildArea = 5;
    string allianceShortName = 6;
}

// msgType = 107
// 客户端 -> 服务器
// 查询神庙活动信息
message QueryFightDetail {
    int64 playerId = 1;
    int64 reportId = 2; //战报ID
    int64 fightDetailId = 3; //战报详情Id
    int32 slgFight = 4; //是否slg战斗
}

message QueryFightDetailRt {
    int64 playerId = 1;
    int64 reportId = 2; //战报ID
    int64 fightDetailId = 3; //战报详情Id
    int32 slgFight = 4; //是否slg战斗

    FightRecordDetails details = 5;
}

message FightRecordDetails {
    int32 result = 1;
    int32 runType = 2;
    int32 protoId = 3;
    repeated FightDetail detail = 5;
    FightPlayerName atkPlayer = 6;
    FightPlayerName defPlayer = 7;
}

message FightPlayerName {
    string allianceShortName = 1;
    string atkPlayerName = 2;
    repeated int64 massPlayerId = 3;
}

message FightDetail {
    int32 round = 1;
    repeated HeroFightDetail heroFightDetail = 2;
    repeated SoldierFightDetail soldierFightDetail = 3;
}

message HeroFightDetail {
    int32 heroProtoId = 1;
    int32 skillEffProId = 2; //技能效果id
    int32 effectTotalRound = 3; //效果持续回合数
    int32 effectSide = 4; //效果作用的展位 0-进攻 1-防守
    repeated int32 effectSoldierType = 5; //效果作用的兵种
    int32 fightSide = 6; // 本场战斗的进攻方或防守方 0-进攻 1-防守
    int32 skillProtoId = 7; //技能id
    int32 pos = 8;
    int32 lv = 9;
}

message SoldierFightDetail {
    int32 soldierProtoId = 1;
    int32 skillEffProId = 2;
    int32 effectTotalRound = 3;
    int32 effectSide = 4;
    repeated int32 effectSoldierType = 5;
    int64 totalNum = 6; //剩余数量
    int32 fightSide = 7; // 本场战斗的进攻方或防守方 0-进攻 1-防守
}

// msgType = 2180
// 客户端 -> 服务器
// 三消推图开始战斗
message EliminateInstanceAtkStart {
    WalkForceInfo walkForceInfo = 1;
    int32 instanceId = 2; // instance配置id
}

message EliminateInstanceAtkStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 2181
// 客户端 -> 服务器
// 三消推图完成
message EliminateInstanceAtkFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EliminateInstanceAtkFinishRt {
    int32 nowInstanceId = 4;
}

// msgType = 2182
// 客户端 -> 服务器
// slg推图开始战斗
message SlgInstanceAtkStart {
    WalkForceInfo walkForceInfo = 1;
    int32 instanceId = 2; // instance配置id
}

message SlgInstanceAtkStartRt {
    string rewardString = 2; // 战斗胜利奖励
    FightRecordDetails details = 3;
    int32 nowInstanceId = 4;
}

// msgType = 2183
// 客户端 -> 服务器
// 查询龙族秘宝
message QueryDragonTreasure {
}

message QueryDragonTreasureRt {
    int32 unitId = 1; // 当前所在章节id
    map<int32, int32> clearance = 2; // 当前已经通关记录 key: dragonTreasurePoint配置id value: dragonTreasure配置Id
    map<int32, ExpeditionVo> expedition = 3; // key: pointId
    repeated int32 canReceivedUnitReward = 4; // 可以领取的章节奖励 unitId
    repeated int32 canReceivedLevelReward = 5; // 可以领取的关卡奖励 pointId
    repeated ActvOpenVo actvOpenVo = 6; // 活动中开启的配置
    repeated int32 receivedExpeditionReward = 7; // 已经领取的远征奖励

    message ActvOpenVo {
        int32 openTime = 1;
        int32 overTime = 2;
        int32 protoId = 3; // pointId
    }

    message ExpeditionVo {
        map<int64, EHeroExpeditionStatus> hero = 3; // 当前point远征中英雄状态
    }
}

enum EHeroExpeditionStatus {
    NORMAL = 0; // 可以使用
    COOLING = 1; // 冷却中
}

// msgType = 2184
// 客户端 -> 服务器
// 选择龙族秘宝英雄参加远征
message ChooseDragonTreasureHero {
    repeated int64 heroId = 1;
    int32 pointId = 2;
}

message ChooseDragonTreasureHeroRt {
}

// msgType = 2185
// 客户端 -> 服务器
// 龙族秘宝--重置当前章节的远征
message RefreshDragonTreasureExpedition {
    int32 pointId = 1;
}

message RefreshDragonTreasureExpeditionRt {
    map<int32, int32> clearance = 2; // 当前已经通关记录 key: dragonTreasurePoint配置id value: dragonTreasure配置Id
}

// msgType = 2186
// 客户端 -> 服务器
// 龙族秘宝--领取奖励
message ReceiveDragonTreasureReward {
    ERewardType type = 1;
    int32 progress = 2; // 要领取的进度

    enum ERewardType {
        UNIT_BOX = 0; // 章节宝箱
        LV_BOX = 1; // 关卡宝箱
    }
}

message ReceiveDragonTreasureRewardRt {
    string resVo = 2;
    repeated int32 receivedUnitReward = 3; // 已经领取的章节奖励
    repeated int32 receivedLevelReward = 4; // 已经领取的关卡奖励
}

// msgType = 2187
// 客户端 -> 服务器
// 三消龙族秘宝开始战斗
message EliminateDragonTreasureStart {
    WalkForceInfo walkForceInfo = 1;
    int32 dragonTreasureId = 2; // dragonTreasure配置id
}

message EliminateDragonTreasureStartRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 2; // 战斗需要的所有数据
}

// msgType = 2188
// 客户端 -> 服务器
// 三消龙族秘宝完成
message EliminateDragonTreasureFinish {
    pb4battle.EliminateFight eliminateFight = 2; // 战斗情况
    int32 fightResult = 3; // 挑战结果
}

message EliminateDragonTreasureFinishRt {
}

// msgType = 2189
// 客户端 -> 服务器
// 龙族秘宝--查询保存英雄状态
message QueryStashHeroInfo {
    int32 pointId = 1;
}

message QueryStashHeroInfoRt {
    map<int64, HeroStashInfo> heroStashInfo = 2;
    map<int64, EHeroExpeditionStatus> heroStatus = 3;

    // 需要显示的数据类
    message HeroStashInfo {
        int64 heroId = 1; // 唯一编号
        int32 heroProtoId = 2; // 模板编号
        int32 lv = 3; // 等级
        int32 advLv = 4; // 星级
        int32 awake = 5; // 进阶等级
        int32 quality = 6; // 品质
        int32 subQuality = 7; // 小品质,也称段
        int32 breakLv = 8; // 突破等级
        int64 hp = 9; // hp
    }
}

// msgType = 2200
// 客户端 -> 服务器
// 接收客户端发送的tss数据
message RecvTssSdkData {
    bytes antiData = 1;
}

message RecvTssSdkDataRt {
}

// msgType = 2201
// 客户端 -> 服务器
// 盟主设置第一级别的职位 (争夺完毕之后盟主设置的 且不可罢免的  目前就是一个国王 对应配置表的step = 1)
message CapitalBattleKingSet {
    int64 kingPlayerId = 1;
    int32 officerId = 2; // 要设置的职位
}

message CapitalBattleKingSetRt {
}

// msgType = 2202
// 客户端 -> 服务器
// 国王设置官员
message CapitalBattleOfficerSet {
    int64 playerId = 1;
    int32 officer = 2; // 要设置成什么职位 如果是0 表示是把当前官员卸任
}

message CapitalBattleOfficerSetRt {
}

// msgType = 2203
// 客户端 -> 服务器
// 打开国王特权界面
message CapitalBattleOpen {
}

message CapitalBattleOpenRt {
    int64 kingMoney = 1; // 国王币
    int64 kingPlayerId = 2;
    string kingName = 3;
    string kingAllianceName = 4;
    string kingAnnouncement = 5; // 公告内容
    int32 lastSetAnnouncementTime = 6; // 上次写公告时间
    repeated KingSkillPb skills = 7;
    int32 flagColor = 8; // 旗帜颜色
    int32 flagStyle = 9; // 旗帜样式
    int32 flagEffect = 10; // 旗帜图案
}

message KingSkillPb {
    int32 skillId = 1;
    int32 lastUseTime = 2; // 上次使用时间
    int32 todayCount = 3; // 今天使用次数
    int32 allCount = 4; // 本届使用次数
}

// msgType = 2204
// 客户端 -> 服务器
// 修改王国公告
message CapitalBattleAnnouncementChange {
    string info = 1;
    int64 ticket = 2; // 验证屏蔽字票据
}

message CapitalBattleAnnouncementChangeRt {
}

// msgType = 2205
// 客户端 -> 服务器
// 使用国王技能
message CapitalBattleUseSkill {
    int64 playerId = 1; // 使用目标
    int32 skillId = 2; // 技能ID
}

message CapitalBattleUseSkillRt {
    repeated string params = 1; // 技能返回参数 目标就一个定位其他玩家的技能会使用 数据为3个参数 是k x y
}

// msgType = 2206
// 客户端 -> 服务器
// 国王颁发礼包
message CapitalBattleKingGiveGift {
    int64 playerId = 1; // 奖励玩家
    int32 giftId = 2;
}

message CapitalBattleKingGiveGiftRt {
}

// msgType = 2207
// 客户端 -> 服务器
// 打开王国官员界面
message CapitalBattleOfficerInfoOpen {
}

message CapitalBattleOfficerInfoOpenRt {
    repeated CapitalBattleOfficerInfoPb officers = 1;
    int32 capitalBattleSetKingOverTime = 2; // 国王设置结束时间
}

message CapitalBattleOfficerInfoPb {
    int32 officer = 1;
    int64 playerId = 2;
    string name = 3;
    string allianceName = 4;
    int32 officerSetTime = 5; // 职位任命时间 用来判断CD的
    int32 photoProtoId = 6; // 头像模板Id
    int32 flagColor = 7; // 旗帜颜色
    int32 flagStyle = 8; // 旗帜样式
    int32 flagEffect = 9; // 旗帜图案
}

// msgType = 2208
// 客户端 -> 服务器
// 打开王国礼包界面
message CapitalBattleKingGiftInfoOpen {
}

message CapitalBattleKingGiftInfoOpenRt {
    repeated CapitalBattleKingGiftInfoPb gifts = 1;
}

message CapitalBattleKingGiftInfoPb {
    int32 giftId = 1;
    int32 useCount = 2; // 已经用掉了多少个了
}

// msgType = 2209
// 客户端 -> 服务器
// 日月王城主界面
message CapitalBattleKingMainInfoOpen {
}

message CapitalBattleKingMainInfoOpenRt {
    AllianceActivityRankVo myInfo = 1; // 我的信息
    AllianceActivityRankVo topInfo = 2; // 第一名的信息
    AllianceActivityRankVo masterInfo = 3; // 当前主人的信息
    repeated IntToLongKV scores = 4; // 特途径获得的积分
    repeated CapitalBattleFightLogPb logs = 5; // 战斗记录

    // 一组占领者的数据 如果争夺期间的话这里就是当前的驻守队长的数据 如果已经有国王了就是国王的数据
    int64 playerId = 11;
    string name = 12;
    string allianceName = 13;
    int32 photoProtoId = 14; // 头像模板Id
}

message CapitalBattleFightLogPb {
    string lanId = 1;
    repeated string params = 2;
    int32 time = 3;
}

// msgType = 2210
// 客户端 -> 服务器
// 打开礼物派发日志界面
message CapitalBattleGiftLogOpen {
}

message CapitalBattleGiftLogOpenRt {
    repeated CapitalBattleGiftLogPb logs = 1;
}

message CapitalBattleGiftLogPb {
    string allianceName = 1; // 颁奖者
    string playerName = 2; // 颁奖者
    int64 rewardPlayerId = 3; // 受礼者
    string rewardAllianceName = 4; // 受礼者
    string rewardPlayerName = 5; // 受礼者
    int32 giftId = 6;
    int32 time = 7;
}

// msgType = 2211
// 客户端 -> 服务器
// 打开技能使用日志界面
message CapitalBattleUseSkillLogOpen {
}

message CapitalBattleUseSkillLogOpenRt {
    repeated CapitalBattleUseSkillLogPb logs = 1;
}

// msgType = 2212
// 客户端 -> 服务器
// 取消预约联盟boss
message CancelNewBossOpen {
}

message CancelNewBossOpenRt {
}

// msgType = 2213
// 客户端 -> 服务器
// 查询圣女排行
message QuerySummonRank {
    int32 type = 1; // 1-个人 2-联盟 3-盟内
    int32 page = 2;
    int32 num = 3;
}

message QuerySummonRankRt {
    repeated QueryRankInfoRt playerRank = 1;
    QueryRankInfoRt myPlayerRank = 2;
    repeated QueryAllianceRankVo allianceRank = 3;
    QueryAllianceRankVo myAllianceRank = 4;

    repeated QueryRankInfoRt playerInAllianceRank = 5;
    QueryRankInfoRt myPlayerInAllianceRank = 6;
}


message CapitalBattleUseSkillLogPb {
    int32 skillId = 1;
    int32 time = 2;
    repeated string params = 3; // 配置里的lan的参数填充
}

// msgType = 2214
// 客户端 -> 服务器
// 查询本联盟内成员演武次数
message QueryYanwuMember {
}

message QueryYanwuMemberRt {
    repeated AllianceQueryPlayerInfo players = 2;
}

// msgType = 2215
// 客户端 -> 服务器
// 查询演武排行
message QueryYanwuRank {
    int32 type = 1; // 1-个人 2-联盟 3-盟内
    int32 page = 2;
    int32 num = 3;
}

message QueryYanwuRankRt {
    repeated QueryRankInfoRt playerRank = 1;
    QueryRankInfoRt myPlayerRank = 2;

    repeated QueryAllianceRankVo allianceRank = 3;
    QueryAllianceRankVo myAllianceRank = 4;

    repeated QueryRankInfoRt playerInAllianceRank = 5;
    QueryRankInfoRt myPlayerInAllianceRank = 6;
}

// msgType = 2216
// 客户端 -> 服务器
// 查询圣女胜利记录
message QuerySummonSuccessRecord {
}

message QuerySummonSuccessRecordRt {
    repeated SummonSuccessRecord record = 1;
}

message SummonSuccessRecord {
    string shortName = 1;
    string playerName = 2;
    int32 rewardLv = 3;
}

// msgType = 2217
// 客户端 -> 服务器
// 查询所有圣女信息
message QueryTotalSummon {
    int64 id = 1; // 圣女id，不为0时查单个
}

message QueryTotalSummonRt {
    repeated SummonInfo summonInfo = 1;
}

message SummonInfo {
    string shortName = 1;
    string playerName = 2;
    int32 x = 3;
    int32 y = 4;
    int32 chainsNum = 5;
    int32 overTime = 6;
    int32 atkNum = 7;
    int32 walkToNum = 8; // 正在行军前往打的部队数量
}

// msgType = 2218
// 客户端 -> 服务器
// 查询单个圣女信息
message QuerySummonFightRecord {
    int64 summonId = 1;
}

message QuerySummonFightRecordRt {
    repeated SummonFightRecord summonRecord = 1;
}

// msgType = 2219
// 客户端 -> 服务器
// 查询单个圣女信息
message AssistSummonReport {
    int64 mailId = 1;
    repeated int64 playerId = 2;
}

message AssistSummonReportRt {
    int64 mailId = 1;
    repeated int64 playerId = 2;
}

message SummonFightRecord {
    string shortName = 1;
    string playerName = 2;
    int32 operSec = 3;
}

// msgType = 2220
// 客户端 -> 服务器
// 开始自动打野
message BeginAutoFightCommonBoss {
    repeated IntToLongKV soliderMap = 3; //兵信息
    repeated LongToIntKV heroMap = 4; //英雄信息

    repeated IntToIntKV itemMap = 5; //补充道具

    int32 forceMaxNum = 6; // 上限队列
    int32 minLv = 7;
    int32 maxLv = 8;
}

message BeginAutoFightCommonBossRt {

}

// msgType = 2221
// 客户端 -> 服务器
// 取消自动打野
message CancelAutoFightCommonBoss {

}

message CancelAutoFightCommonBossRt {

}

// msgType = 2223
// 客户端 -> 服务器
// 查询演武幸运奖励
message QueryYanwuLuckyRecord {

}

message QueryYanwuLuckyRecordRt {
    repeated YanwuLuckyRecord luckyrecord = 1;
}

// msgType = 2224
// 客户端 -> 服务器
// 查询迷宫
message QueryLabyrinth {
    int32 purchaseAvtivityId = 1;
}

message QueryLabyrinthRt {
    int32 score = 1; // 积分
    int32 dayFree = 2; // 今日免费次数
    int32 roundFree = 3; // 本轮免费次数
    repeated LabyrinthInfo labyrinthInfos = 4; // 每层的奖励信息
    int32 isAuto = 5; // 是否一键探秘0-不是 1-是
}

message LabyrinthInfo {
    int32 floor = 1; // 层数
    int32 isDraw = 2; // 是否已领取
    repeated RewardInfo rewardInfo = 3; // 每个具体的奖励

}

message RewardInfo {
    int32 labyrinthRewardProtId = 1;
    int32 isHit = 4; //是否中奖
}

// msgType = 2225
// 客户端 -> 服务器
// roll骰子
message RollLabyrinth {
    int32 purchaseAvtivityId = 1;
    int32 isAuto = 2; // 是否一键探秘0-不是 1-是
}

message RollLabyrinthRt {
    int32 score = 1; // 积分
    IntToIntKV resultNum = 2; // 点数
    LabyrinthInfo labyrinthInfo = 3; // 当层奖励信息
    int32 isAuto = 4; // 是否一键探秘0-不是 1-是
    int32 multiple = 5;
    int32 roundFree = 6; // 本轮免费次数
}

// msgType = 2226
// 客户端 -> 服务器
// 刷新
message RefreshLabyrinth {
    int32 purchaseAvtivityId = 1;
}

message RefreshLabyrinthRt {
    repeated LabyrinthInfo labyrinthInfos = 4; // 每层的奖励信息
}

message YanwuLuckyRecord {
    int64 playerId = 1;
    string playerName = 2;
    string reward = 3;
    int32 time = 4;
    string allianceName = 5;
}

// msgType = 2227
// 客户端 -> 服务器
// 结束
message EndLabyrinth {
    int32 purchaseAvtivityId = 1;
}

message EndLabyrinthRt {
    int32 score = 1; // 积分
    int32 dayFree = 2; // 今日免费次数
    int32 roundFree = 3; // 本轮免费次数
    repeated LabyrinthInfo labyrinthInfos = 4; // 每层的奖励信息
}

// msgType = 2228
// 客户端 -> 服务器
// 演武场排名详情
message QueryYanwuPlayerByRank {
    int32 rank = 1;
}

message QueryYanwuPlayerByRankRt {
    int32 rank = 1; // 积分
    repeated SoldierForce soldierMap = 2; // 兵种
    repeated IntToIntKV buffMap = 3; // buff
    repeated YanwuHeroForce yanwuHeroForces = 4; // 英雄
}

message SoldierForce {
    int32 protoId = 2;
    int64 num = 3;
    int64 hurt = 4;
}

message YanwuHeroForce {
    int64 heroId = 1;
    int32 protoId = 2;
    int32 lv = 3;
    int32 awake = 4;
}

message AllianceCallInfo {
    int32 type = 1; // 类型, 0表示null
    int32 overTime = 2; // 结束时间
    repeated string param = 3;
    string custom = 4; // 自定义

    int32 sendCallTime = 11; // 个人上次发送召集的时间
}

// msgType = 2231
// 客户端 -> 服务器
// 联盟召唤--发送
message AllianceCallSend {
    int32 type = 1; // 类型
    repeated string param = 2;
    string custom = 3; // 自定义
}

message AllianceCallSendRt {
    AllianceCallInfo callVo = 2;
}

// msgType = 2232
// 客户端 -> 服务器
// 联盟召唤--清除
message AllianceCallIgnore {
}

message AllianceCallIgnoreRt {
}

// msgType = 2233
// 客户端 -> 服务器
// 联盟超级矿
message AllianceMineOpt {
    Opt opt = 1;
    int32 mineId = 11;
    int32 aimsX = 12;
    int32 aimsY = 13;

    enum Opt {
        Query = 0;
        Build = 1;
    }
}

message AllianceMineSimpleInfo {
    int32 mineId = 1;
    int32 collectId = 2;
    int32 x = 3;
    int32 y = 4;
    int64 remainNum = 5;
    int64 uniqueId = 6;
}

message AllianceMineOptRt {
    map<int64, AllianceMineSimpleInfo> minInfo = 2;
    int32 remainCount = 3;
    int64 allianceHuoyueduValue = 4;
}

// msgType = 2240
// 客户端 -> 服务器
// 自动攻城--开始
message BeginAutoFightNpcCity {
    int32 npcCityId = 1;              // npc城池id
    int32 x = 2;
    int32 y = 3;
    map<int32, int64> soliderMap = 11; // 兵信息
    map<int64, int64> heroMap = 12;    // 英雄信息
}

message BeginAutoFightNpcCityRt {
    AutoFightNpcCity template = 2;
}

// msgType = 2241
// 客户端 -> 服务器
// 自动攻城--取消
message CancelAutoFightNpcCity {
    int64 templateId = 1;
}

message CancelAutoFightNpcCityRt {
    AutoFightNpcCity template = 2;
}

// msgType = 2242
// 客户端 -> 服务器
// 自动打旗--开始
message BeginAutoFightAllianceBuild {
    int32 x = 1;
    int32 y = 2;
    map<int32, int64> soliderMap = 11; // 兵信息
    map<int64, int64> heroMap = 12;    // 英雄信息
}

message BeginAutoFightAllianceBuildRt {
    AutoFightNpcCity template = 2;
}

// msgType = 2243
// 客户端 -> 服务器
// 自动打旗--取消
message CancelAutoFightAllianceBuild {
    int64 templateId = 1;
}

message CancelAutoFightAllianceBuildRt {
    AutoFightNpcCity template = 2;
}

// msgType = 2495
// 客户端 -> 服务器
// 寻路
message FindPath {
    IntToIntKV startPos = 1;
    IntToIntKV gotoPos = 2;
    int32 runType = 3;
}

message FindPathRt {
    repeated IntToIntKV path = 1;
}

// msgType = 2496
// 客户端 -> 服务器
// 查询所有盟友位置
message QueryAllAllianceMemberPos {
}

message QueryAllAllianceMemberPosRt {
    repeated AllianceMemberPos memberPos = 1; //盟友位置
}

message AllianceMemberPos {
    int64 playerId = 1;
    int32 x = 2;
    int32 y = 3;
    int32 isLeader = 4;
}

// msgType = 2497
// 客户端 -> 服务器
// 获取全地图联盟建筑信息
message WatchAllAllianceBuild {
}

message WatchAllAllianceBuildRt {
    repeated AllianceBuildMapInfo allianceFortressInfos = 300; //联盟据点位置信息
    repeated AllianceBuildMapInfo allianceFlagInfos = 301; //联盟旗帜位置信息
    repeated AllianceSystemBuildInfo allianceWonderInfos = 302; //联盟占领的奇观
    repeated AllianceSystemBuildInfo allianceResInfos = 303; //联盟占领的资源矿 废弃
    repeated AllianceSystemBuildInfo allianceCheckPointInfos = 304; //联盟占领的关卡 废弃
    repeated AllianceSystemBuildInfo allianceHieronInfos = 305; //联盟占领的神庙 废弃
    repeated AllianceSystemBuildInfo npcCityInfos = 306; //联盟占领的npc城池
}

message AllianceBuildMapInfo {
    int32 x = 1;
    int32 y = 2;

    int64 buildId = 11;
    int32 buildStartTime = 12; //建筑开始时间
    int32 buildOverTime = 13; //建筑结束时间 0代表未完成建造
    int64 allianceId = 14;
    int32 effective = 20; //是否生效
}

// 联盟系统建筑
message AllianceSystemBuildInfo {
    int32 protoId = 1;
    int64 allianceId = 11;
    int32 effective = 20; //是否生效
    int32 state = 30;   // 状态
}

// msgType = 2498
// 客户端 -> 服务器
// 查看世界
message WatchWorld {
    int32 x = 1;
    int32 y = 2;
    int32 watchLevel = 3; //查看等级
    int32 isForce = 4; //是否给全部数据
}

message WatchWorldRt {
    int32 watchLevel = 1; //查看等级
    int64 worldId = 2;

    repeated NewEveryLandInfo lands = 11;

    repeated WalkRobot walks = 21; //行军部队

    repeated IntToIntKV removeGrids = 31; //移除的格子

    repeated int64 removeWalks = 41; //移除的行军线
}

// msgType = 2499
// 客户端 -> 服务器
// 三消平衡战斗测试
message EliminateTestBuild {
    string atkHeroInfos = 1; // id;等级;阶数;星数;品质 | ...
    int32 atkHp = 2; // 血量万分比

    string defHeroInfos = 3; // id;等级;阶数;星数;品质 | ...
    int32 defHp = 4; // 血量万分比
}

message EliminateTestBuildRt {
    pb4battle.CheckEliminateFightReq checkEliminateFightReq = 1; // 战斗所有数据
}

// msgType = 2500
// 客户端 -> 服务器
// 客户端需要模块的全量数据
message RequireModuleData {
    int32 moduleId = 1;
}

message RequireModuleDataRt {
}

// msgType = 2501
// 客户端 -> 服务器
// 联盟boss捐献
message AllianceNewBossDonate {
}

message AllianceNewBossDonateRt {
    int64 donateValue = 1;
}

// msgType = 2502
// 客户端 -> 服务器
// 联盟boss开启
message AllianceNewBossOpen {
    int32 openTime = 1;
    int32 difficulty = 2;
    int32 lv = 3;
}

message AllianceNewBossOpenRt {
    AllianceNewBossInfo newBossInfo = 1;
}

// msgType = 2503
// 客户端 -> 服务器
// 查询联盟boss伤害
message QueryAllianceNewBossHurt {
}

message QueryAllianceNewBossHurtRt {
    int64 myDamage = 1;
    string myName = 2;
    PhotoViewInfo myPhotoInfo = 3;
    int64 myPlayerId = 4;
    repeated AllianceNewBossHurt allianceNewBossHurt = 5;
}

message AllianceNewBossHurt {
    int64 damage = 1;
    string name = 2;

    PhotoViewInfo photoInfo = 3;
    int64 playerId = 4;
}

// msgType = 2504
// 客户端 -> 服务器
// 查询联盟boss信息
message QueryAllianceNewBossInfo {
}

message QueryAllianceNewBossInfoRt {
    AllianceNewBossInfo newBossInfo = 1;
}

message AllianceNewBossInfo {
    int32 endTime = 3;
    int64 allianceId = 7;
    int32 buildX = 8;
    int32 buildY = 9;
    int32 fightBossCd = 11;
    int32 createBuildTime = 12;
    int32 fightNum = 13;

    int64 myScore = 14;
    int64 myAllianceScore = 15;
    string topAllianceName = 16;
    string topPlayerName = 17; //%隔开
    int32 isOpen = 18;
    int32 atkNum = 19; // 有效进攻次数
}

// msgType = 2506
// 客户端 -> 服务器
// 使用充能buff
message UseChargeBuffInfo {
    int32 id = 1; //
    int32 param1 = 2;
    int32 param2 = 3;
}

message UseChargeBuffInfoRt {
    repeated ChargeBuffInfo buffInfo = 1 [deprecated = true]; // 废弃
}

message ChargeBuffInfo {
    int32 id = 1; // 模板id
    int32 num = 2; // 上次刷新时有多少个
    int32 lastRefresh = 4; // 上次刷新时间
}

// msgType = 2507
// 客户端 -> 服务器
// 查询巢穴集结次数
message QueryRelicMassCount {
}

message QueryRelicMassCountRt {
    int32 massCount = 1;
}

// msgType = 2509
// 客户端 -> 服务器
// 查询联盟神庙
message QueryAllianceHieron {
}

message QueryAllianceHieronRt {
    repeated HieronLandInfo hieron = 1;
}

// msgType = 2510
// 客户端 -> 服务器
// 通过openId查询玩家信息
message QueryPlayerByOpenId {
    repeated string openIds = 1;
}

// msgType = 2511
// 客户端 -> 服务器
// 加入污染之地集结
message JoinPollutedArmy {
    int32 bossX = 1;
    int32 bossY = 2;
    int32 isInvited = 3;
    int32 isLeader = 4; //代表是否创建队伍
    int64 armyId = 5;
}

message JoinPollutedArmyRt {
    repeated AlliancePollutedArmy armyList = 1;
    repeated PollutedArmyMember members = 2;
}

// msgType = 2512
// 客户端 -> 服务器
// 查询污染之地集结
message QueryAlliancePollutedArmy {
}

message QueryAlliancePollutedArmyRt {
    repeated AlliancePollutedArmy armyList = 1;
}

message AlliancePollutedArmy {
    int32 posX = 1;
    int32 posY = 2;
    int32 smallMonsterNum = 3;
    int32 normalMonsterNum = 4;
    int32 bossNum = 5;
    int64 endTime = 6;
    int32 memberLimit = 7;
    int32 memberNum = 8;
    int32 armyLimit = 9;
    int32 armyNum = 10;

    PhotoViewInfo photoInfo = 11; //玩家头像
    string name = 12;

    int32 isIn = 13; //是否已经在队伍中
    int64 pollutedId = 14;
    int64 armyId = 15;
    int32 pollutedProtoId = 16;
    int32 maxNormalMonsterNum = 17;
}

// msgType = 2513
// 客户端 -> 服务器
// 查询污染之地集结
message QueryPollutedArmyInfo {
    int32 x = 1;
    int32 y = 2;
    int64 armyId = 3;
}

message QueryPollutedArmyInfoRt {
    AlliancePollutedArmy armyList = 1;
    repeated PollutedArmyMember members = 2;
}

// msgType = 2514
// 客户端 -> 服务器
// 观看污染
message WatchPolluted {
    int32 x = 1;
    int32 y = 2;
    int64 pollutedId = 3;
}

message WatchPollutedRt {
    int32 smallMonsterNum = 3; //小怪总数量
    int32 normalMonsterNum = 4; //中怪总数量
    int64 endTime = 6; // 结束时间
    int32 armyLimit = 9;
    int32 armyNum = 10;
    int64 myArmyId = 13; //我所在的队伍id
    repeated LongToIntKV normalMonsterState = 14; // 1-可以打,0-不可以打
    int32 armyMemberLimit = 15;
    repeated PollutedMonsterByType pollutedMonsterByType = 16;
}

message PollutedMonsterByType {
    int32 monsterX = 3;
    int32 monsterY = 4;
    int64 id = 6;
    int32 monsterType = 7;
}

// msgType = 2515
// 客户端 -> 服务器
// 踢被污染的军队玩家
message KickPollutedArmyPlayer {
    int32 x = 1;
    int32 y = 2;
    int64 armyId = 3;
    int64 kickPlayerId = 4; //解散的话就传自己的id
}

message KickPollutedArmyPlayerRt {
    int64 kickPlayerId = 1;
}

// msgType =2516
// 客户端 -> 服务器
// 在线活动领奖
message OnlineHeroReward {
}

message OnlineHeroRewardRt {
    int32 currentStageId = 1; //当前领奖id
}

// msgType =2517
// 客户端 -> 服务器
// 更换领主皮肤
message ChangeLordSkin {
    int32 lordSkinId = 1; //皮肤id
}

message ChangeLordSkinRt {
    int32 currentLordSkinId = 1; //皮肤id
}

// msgType = 2518
// 客户端 -> 服务器
// 更换领主皮肤
message BuyLordSkin {
    int32 lordSkinId = 1; //皮肤id
}

message BuyLordSkinRt {
    int32 LordSkinId = 1; //皮肤id
}

message PollutedArmyMember {
    string name = 2; //玩家名字
    int32 photo = 3; //玩家头像
    int64 id = 8; //玩家ID
    PhotoViewInfo photoInfo = 9; //玩家头像
    int64 fightValue = 10;
    int32 isLeader = 11;
}


message SimplePlayerVo {
    int64 id = 1;
    string name = 2;
    int32 photoProtoId = 3;
    int32 photoFrameProtoId = 4;
    int32 kingLv = 5;
    int64 power = 6;
    int32 castleLv = 7;
    int64 allianceId = 8;
    string allianceShortName = 9;
    int32 areaNo = 10;
    string openId = 11; // 用户标识
    string userName = 12; // QQ/微信好友昵称
    string pictureUrl = 13; // QQ/微信好友头像 URL
    int32 offlineTime = 14; // 离线时间
    string sopenId = 15;
    int32 clientType = 16; // os
    int32 privilege = 17;
    int32 privilegeOverTime = 18;
}

message QueryPlayerByOpenIdRt {
    repeated SimplePlayerVo players = 2;
}

// msgType = 2520
// 客户端 -> 服务器
// 我的宝藏信息 (可挖掘的+挖掘中+等待领奖都在一个消息)
message QuerySelfTreasure {
}

message QuerySelfTreasureRt {
    SelfTreasurePb selfTreasurePb = 1; // 我的宝藏数据
    repeated TreasurePb treasures = 2; // 宝藏数据
}

message TreasurePb {
    int64 treasureId = 1; // 宝藏ID
    int32 protoId = 2; // 宝藏模板ID
    int32 okTime = 3; // 0-等待挖掘  非0表示挖掘结束时间 -1表示已经被人家给秒了 可以直接领奖
    int64 helpPlayerId = 4; // 帮助你的/给你加速的玩家ID
    string helpPlayerName = 5; // 帮助你的/给你加速的玩家名字
    PhotoViewInfo photoInfo = 6; // 宝藏主人头像数据
    int64 playerId = 7; // 玩家ID
    string name = 8; // 主人名字
    int32 helpChat = 9; // 是否请求过帮助了 0-否 1-是
}

message SelfTreasurePb {
    int32 freeCount = 1; // 今日挖掘次数
    int32 freeCountTime = 2; // 免费挖掘下次回复时间
    int32 autoRefTime = 3; // 自动刷新倒计时
    int32 helpCount = 4; // 今日帮助次数
    int32 refCount = 5; // 今日刷新次数,看红警会越来越贵 他UI没显示 我先给了
    int32 lastRefTime = 6; // 上次刷新时间
}

// msgType = 2521
// 客户端 -> 服务器
// 全盟宝藏数据
message QueryAllianceTreasure {
}

message QueryAllianceTreasureRt {
    repeated TreasurePb treasures = 1; // 宝藏数据
    SelfTreasurePb selfTreasurePb = 2; // 我的宝藏数据
}

// msgType = 2522
// 客户端 -> 服务器
// 挖掘宝藏
message WorkTreasure {
    int64 treasureId = 1; // 唯一ID
}

message WorkTreasureRt {
    int32 freeCountTime = 1; // 免费挖掘下次回复时间
}

// msgType = 2523
// 客户端 -> 服务器
// 帮助别人挖掘宝藏
message HelpTreasure {
    int64 treasureId = 1; // 唯一ID
    int64 treasurePlayerId = 2; // 玩家ID
}

message HelpTreasureRt {
}

// msgType = 2524
// 客户端 -> 服务器
// 加速别人挖掘宝藏
message QuickTreasure {
    int64 treasureId = 1; // 唯一ID
    int64 treasurePlayerId = 2; // 玩家ID
}

message QuickTreasureRt {
}

// msgType = 2525
// 客户端 -> 服务器
// 宝藏领奖
message RewardTreasure {
    int64 treasureId = 1; // 唯一ID
    int64 treasurePlayerId = 2; // 玩家ID
}

message RewardTreasureRt {
}

// msgType = 2526
// 客户端 -> 服务器
// 刷新宝藏
message RefreshTreasure {
}

message RefreshTreasureRt {
}

// msgType = 2527
// 客户端 -> 服务器
// 宝藏求助
message SendHelpTreasure {
    int64 treasureId = 1; // 唯一ID
}

message SendHelpTreasureRt {
}

// msgType = 2529
// 客户端 -> 服务器
// 七日活动犒赏令领取
message QueryFestivalDropLmt {
    int32 purchaseActivityId = 1; //活动id
}

message QueryFestivalDropLmtRt {
    map<int32, int64> lmtVo = 2; // key行为类型，value当前值
}


// msgType = 2530
// 客户端 -> 服务器
// 隐私开关
message PrivacySwitchOpt {
    int32 type = 1; // eg. 1.排行榜匿名 2.充值匿名
    int32 on = 2; // 开启 1， 关闭 0
}

message PrivacySwitchOptRt {
}

// msgType = 2531
// 客户端 -> 服务器
// 查询隐私开关
message QueryPrivacySwitch {
}

message QueryPrivacySwitchRt {
    repeated IntToIntKV switch = 2;
}

// msgType = 2532
// 客户端 -> 服务器
// 三日限时兑换商店
message TimeExchangeShop {
    int32 exchangeId = 1; //商品id
    int32 num = 2; //购买数量
}

message TimeExchangeShopRt {
}

// msgType = 2533
// 客户端 -> 服务器
// 七日活动犒赏令领取
message GetFestivalBossReward {
    int32 purchaseActivityId = 1; //活动id
    repeated int32 commonLv = 2; //普通领取奖励
    repeated int32 highLv = 3; //高阶领取奖励
    repeated int32 specLv = 4; //特殊领取奖励
}

message GetFestivalBossRewardRt {
    repeated FestivalBossRewardInfo festivalBossRewardInfo = 1;
}
message FestivalBossRewardInfo {
    int32 stage = 1; //领取阶段
    repeated int32 lv = 2; //领取等级
}

// MsgType = 2534
// 客户端 -> 服务端
// 查询七日boss攻击信息
message QueryFestivalBossdAtk {
    int64 bossId = 1;
}

message QueryFestivalBossdAtkRt {
    repeated FestivalBossdAtk atkInfo = 1;
}

message FestivalBossdAtk {
    string shortName = 1;
    string playerName = 2;
    int64 atkNum = 3;
    int64 bloodNum = 4;

}

// msgType = 2535
// 客户端 -> 服务器
// 查询联盟内七日boss
message QueryFestivalBoss {
}

message QueryFestivalBossRt {
    repeated FestivalBossRecord record = 1;
}

message FestivalBossRecord {
    string shortName = 1;
    string playerName = 2;
    int64 bloodNum = 3;
    int32 x = 4;
    int32 y = 5;
    int32 exitTime = 6;
    int32 protoId = 7;
}

// msgType = 2536
// 客户端 -> 服务器
// 查询节日排行
message QueryFestivalRewardRank {
    int32 activityId = 1;
    int32 page = 2;
    int32 num = 3;
}

message QueryFestivalRewardRankRt {
    repeated QueryRankInfoRt playerRank = 1;
    QueryRankInfoRt myPlayerRank = 2;
}

// msgType = 2537
// 客户端 -> 服务器
// 进入战场
message EnterBattleField {
    int64 battleFieldId = 1; // 战场id
}

message EnterBattleFieldRt {
    int64 battleFieldId = 1; // 战场id
    int32 openTime = 2; // 战场开启时间
    int64 overTime = 3; // 结束时间

    repeated BattleFieldAllianceScoreInfo scoreInfos = 11;

    repeated BattleFieldWonderInfo wonderInfos = 21;
    repeated BattleFieldCannonInfo cannonInfos = 22;
    repeated BattleFieldCityInfo cityInfos = 23;

    repeated AllianceMarkEnum allianceMarks = 98; //联盟标记
    PlayerPowerChangeVo playerPowerChangeVo = 99; // 实力信息
    CityInfo cityInfo = 100; //城池信息
    repeated EffectInfo effects = 161;
    repeated RedPointInfo worldRedPointInfos = 164; //红点信息
    repeated BuffVo buffs = 171; // 玩家的buff集合
    repeated WalkGroup myWalks = 180; //自己的所有行军线路
    repeated IntToLongKV slgSoldier = 237; // 兵营中当前兵量, key为soldierID
    BarracksWoundedSoldierInfo barracksWoundedSoldierInfo = 238; // 伤兵信息
    repeated LongToIntKV warnDatas = 240; //预警数据 行军组Id-runType
    repeated ChargeBuffInfo battleFieldChargeBuff = 300; // 战场充能buff
    AllianceCallInfo allianceCallInfo = 301;    // 联盟召集
}

message BattleFieldAllianceScoreInfo {
    int64 allianceId = 1;
    string allianceShortName = 2;
    int32 flagColor = 3;
    int32 flagStyle = 4;
    int32 flagEffect = 5;
    int32 partition = 6; // 小区ID

    int64 allianceScore = 11;   // 联盟积分
    int32 scoreSpeed = 12;  // 积分速度 X/秒
    int32 lastCalTime = 13; // 上次计算积分的时间
    int64 occupyTime = 14;  // 占领总时间

    int64 killScore = 21;   // 击杀积分
    int64 farmScore = 22;   // 采集积分
    int64 occupyScore = 23; // 占领积分
    int64 donateScore = 24; // 捐献积分
}

// 战场奇观信息
message BattleFieldWonderInfo {
    int32 protoId = 1;
    int64 belongAllianceId = 2;

    int64 playerId = 11;
    string playerName = 12;
    string allianceShortName = 13;
    PhotoViewInfo photoInfo = 14; //玩家头像
}

// 战场炮塔信息
message BattleFieldCannonInfo {
    int32 protoId = 1;
    int64 belongAllianceId = 2;

    int64 playerId = 11;
    string playerName = 12;
    string allianceShortName = 13;
    PhotoViewInfo photoInfo = 14; //玩家头像
}

// 战场城池信息
message BattleFieldCityInfo {
    int32 protoId = 1;
    int64 belongAllianceId = 2;

    int32 atkCount = 11;    // 已经攻击次数
    int32 nextCanAtkTime = 12;  // 下次可攻击时间

    int64 playerId = 21;
    string playerName = 22;
    string allianceShortName = 23;
    PhotoViewInfo photoInfo = 24; //玩家头像
}

// msgType = 2539
// 客户端 -> 服务器
// 离开战场
message ExitBattleField {
}

message ExitBattleFieldRt {
}

// msgType = 2540
// 客户端 -> 服务器
// 战场--科技查询
message BattleFieldTechnologyQuery {
}

message BattleFieldTechnologyQueryRt {
    map<int32, int32> technologyInfo = 2; // key:科技类型, value:对应的经验值
    string resVo = 3;   // 当前的资源
}

// msgType = 2542
// 客户端 -> 服务器
// 查询占领历史
message QueryNpcCityOccupyHistory {
    int32 npcCityId = 1; //npc城池id
}

message QueryNpcCityOccupyHistoryRt {
    repeated AllianceOccupyInfo occupyHistory = 1;
    repeated AllianceOccupyInfo giveUpHistory = 2;
}

// msgType = 2543
// 客户端 -> 服务器
// 查询占领npc城池
message QueryOccupyNpcCity {
}

message QueryOccupyNpcCityRt {
    repeated NpcCityInfo infos = 1;
}

message NpcCityInfo {
    int32 npcId = 1;
    int32 state = 3; // 当前状态 0、免战 1、可攻打 2、攻打中
    int32 stateOverTime = 4; // 状态结束时间 0代表无限
    int64 wallHp = 5; // 城墙血量
    int32 wallRefTime = 6; // 上次刷新城墙血量的时间
    int32 wallRecoverSpeed = 7; // 城墙血量回复速度(可能是负值)
    int32 giveUpStartTime = 8; // 舍弃开始时间
    int32 giveUpOverTime = 9; // 舍弃开始时间
    int32 giveUpCount = 10; // 舍弃次数
}

// msgType = 2544
// 客户端 -> 服务器
// 查询npc城池排行
message QueryNpcCityFirstOccupyRank {
    int32 npcCityId = 1; // 配置id
}

message QueryNpcCityFirstOccupyRankRt {
    AllianceOccupyInfo firstOccupyInfo = 2; // 首占信息
    repeated WorldPlayerRankInfo killRankInfo = 3; // 首杀信息
    repeated WorldPlayerRankInfo tearDownRankInfo = 4; // 拆迁信息
}

// msgType = 2545
// 客户端 -> 服务器
// 查询拆家兵量信息
message QueryTearDownSoldierInfo {
    int32 x = 1;
    int32 y = 2;
}

message QueryTearDownSoldierInfoRt {
    int64 mainPlayerId = 1;
    repeated MassForce tearDownForces = 41; //拆家部队信息
    repeated IntToIntKV effects = 42; //效果
    int64 maxSolider = 43; //最大可增援数量
    RequireSoldier requireSoldier = 44; // 需要的兵信息
}

// msgType = 2546
// 客户端 -> 服务器
// 查询能否行军
message CheckCanWalk {
    int32 x = 1;
    int32 y = 2;
    int64 targetId = 3;
    int32 runType = 4;
    repeated IntToLongKV soldiers = 5;
}

message CheckCanWalkRt {
    int32 errorCode = 1;
    int32 removeCover = 2;
}

// msgType = 2547
// 客户端 -> 服务器
// 舍弃npc城池
message GiveUpNpcCity {
    int32 npcCityId = 1;
}

message GiveUpNpcCityRt {
}

// msgType = 2548
// 客户端 -> 服务器
// 取消舍弃npc城池
message CancelGiveUpNpcCity {
    int32 npcCityId = 1;
}

message CancelGiveUpNpcCityRt {
}

// msgType = 2549
// 客户端 -> 服务器
// 设置需要的士兵信息
message SetNeedSoldier {
    int64 massId = 1;
    int64 allianceBuildId = 2; // 增援的联盟建造id
    int32 npcCityId = 3; // 增援的npc城池id
    int32 wonderId = 4; // 奇观id
    int32 cannonId = 5; // 炮塔id

    RequireSoldier requireSoldier = 11;
}

message SetNeedSoldierRt {
}

// msgType = 2550
// 客户端 -> 服务器
// 联盟争霸--段位排行
message AllianceHegemonyRankQuery {
    int32 page = 1;
    int32 num = 2;
}

message AllianceHegemonyRankQueryRt {
    repeated QueryAllianceRankVo queryAllianceRankVos = 2; // 排行内容
    int32 page = 3;
    int32 myAllianceRank = 4; // 我帮派的排行  0表示不再前100
    int64 myAllianceScore = 5; // 我帮派的成绩
}

// msgType = 2551
// 客户端 -> 服务器
// 联盟争霸--查询
message AllianceHegemonyQuery {
    int32 strategy = 1; // 或一下 eg.1报名状态，2奖励领取状态, 4当前积分，8联盟历史战绩 16匹配结果 32联盟战力排名 64本次战斗结果...
    int64 targetId = 2;
}

message AllianceHegemonyQueryRt {
    repeated int32 type = 2;
    int32 applyStatus = 3;               // 报名状态
    int32 dailyRewardRecord = 4;         // 战前补给领取, 1表示已经领取
    int64 rankScore = 5;                 // 当前联盟段位积分
    repeated HegemonyRecord history = 6; // 历史战绩
    HegemonyAvatar opponent = 7;         // 匹配的对手
    int32 allianceRankNo = 8;            // 联盟战力排名
    HegemonyRecord fightResult = 9;      // 当前战绩
    int64 battleFieldId = 10;            // 战场id

    message HegemonyRecord {
        HegemonyAvatar me = 1;
        HegemonyAvatar opponent = 2;
        int32 time = 3;
    }

    message HegemonyAvatar {
        int64 allianceId = 1;
        string allianceName = 2;
        string allianceShortName = 3;
        int32 flagColor = 4;
        int32 flagStyle = 5;
        int32 flagEffect = 6;
        int64 power = 7;
        int64 rankScore = 8; // 段位积分
        int32 chgScore = 9; // 变化的段位积分
        int32 battleScore = 10; // 战斗中的积分
        int32 memberNum = 11;
        int32 fightResult = 12;
        int32 areaId = 13; // 游戏大区ID
        int32 partition = 14; // 小区ID
    }
}

message AllianceHegemonyTimeInfo {
    int32 startTime = 1;        // 活动开启的时间
    int32 nowState = 2;         // 当前状态
    int64 battlefieldId = 3;    // 战场id
    int32 applyState = 4;       // 当前联盟报名状态
}

// msgType = 2552
// 客户端 -> 服务器
// 联盟争霸--报名
message AllianceHegemonyApply {
    EApply opt = 1;

    enum EApply {
        SignUp = 0; // 报名
        Cancel = 1; // 取消
    }
}

message AllianceHegemonyApplyRt {
    int32 applyStatus = 2;
}

// msgType = 2553
// 客户端 -> 服务器
// 联盟争霸--战前补给领取
message AllianceHegemonyReceive {
    EReward type = 1;
    enum EReward {
        DAILY = 0; // 战前补给
        RANK = 1; // 段位宝箱
    }
}

message AllianceHegemonyReceiveRt {
}

// msgType = 2554
// 客户端 -> 服务器
// 联盟争霸--历史战力排行
message AllianceHegemonyHistoryRank {
}

message AllianceHegemonyHistoryRankRt {
    QueryAllianceRankRt rankInfo = 2;
}

// msgType = 2557
// 客户端 -> 服务器
// 查询战场积分排名
message QueryBattleFieldPlayerScoreRank {
}

message QueryBattleFieldPlayerScoreRankRt {
    repeated BattleFieldJoinInfo joinInfos = 1; // 参与信息
    repeated BattleFieldPlayerScoreRankInfo rankInfos = 2;  // 排行榜信息
    BattleFieldPlayerScoreRankInfo myRankInfo = 3;  // 我的排行信息
}

message BattleFieldJoinInfo {
    BattleFieldAllianceScoreInfo scoreInfo = 1;
    int32 joinNum = 2;  // 参与人数
    int64 occupyTime = 3;   // 总占领时间
    int32 occupyStartTime = 4;  // 开始占领时间（用于计算占领时长）
}

message BattleFieldPlayerScoreRankInfo {
    int32 rank = 1;
    int64 playerId = 2;
    string playerName = 3;
    int64 allianceId = 4;
    string allianceShortName = 5;
    PhotoViewInfo photoInfo = 6; //玩家头像
    int32 heroId = 7;   // 实力最强的英雄模板id

    int64 playerScore = 11;  // 玩家个人积分
    int32 scoreSpeed = 12;  // 积分速度 X/秒
    int32 lastCalTime = 13; // 上次计算积分的时间

    int64 killScore = 21; // 个人击杀积分
    int64 farmScore = 22;   // 个人采集积分
    int64 donateScore = 23; // 捐献积分
    int64 occupyScore = 24; // 占领积分
}

// msgType = 2558
// 客户端 -> 服务器
// 秒战场加速
message ClearBattleFieldTime {
    int32 clearType = 1; // 要加速的功能  1-科技 2-造兵 3-秒治疗兵 4-秒建筑 5- 秒锻造  6- 秒武将升星  7-秒武将升阶  8 -秒晋升  9-秒联盟宝藏  12-秒治疗兵(活动)
    repeated IntToIntKV clearProps = 2; //使用的加速道具，若为空 则代表使用元宝秒所有CD
    int32 allowOverFlow = 3; //是否允许溢出 0、否 1、是
    repeated IntToIntKV chargeBuffs = 4;    // 一起使用的充能buff
}

message ClearBattleFieldTimeRt {
}

// msgType = 2559
// 客户端 -> 服务器
// 使用战场充能buff
message UseBattleFieldChargeBuff {
    int32 id = 1;
    int64 param1 = 2;
    int64 param2 = 3;
    int32 num = 4;
}

message UseBattleFieldChargeBuffRt {
}

// msgType = 2560
// 客户端 -> 服务器
// 使用城池技能
message UseBattleFieldCitySkill {
    int32 cityId = 1;
    int32 targetCityId = 2;
    int32 targetCannonId = 3;
    int32 targetWonderId = 4;
}

message UseBattleFieldCitySkillRt {
}

// msgType = 2561
// 客户端 -> 服务器
// 战场迁城
message MoveCityInBattleField {
    int32 x = 1;
    int32 y = 2;
    int32 useDiamond = 3;   // 是否使用水晶
}

message MoveCityInBattleFieldRt {
}

// msgType = 2562
// 客户端 -> 服务器
// 联盟补给商队--查询
message QueryAllianceSupply {
}

message QueryAllianceSupplyRt {
    int64 todayGainNum = 2;                             // 本日通过赠与获得的奖励数量
    map<int32, SupplyResourceInfo> resInfo = 3;         // 自己的资源请求信息, 如果一条没有发起，则map里没有值
    repeated SupplyMemberRequestInfo requestInfo = 4;   // 盟友发起的请求信息
}

message SupplyResourceInfo {
    int32 resMainType = 1;
    int32 leftSeconds = 2;       // 请求剩余结束的时间(秒)
    int64 supplyAllNum = 3;      // 发起请求的总资源数
    int64 supplyBeGiveNum = 4;   // 期间被赠与的总数
    int64 supplyReceivedNum = 5; // 已经领掉的总数
    int32 overTime = 6;          // 请求剩余结束的时间戳
}

message SupplyMemberRequestInfo {
    PhotoViewInfo photoInfo = 1;
    string playerName = 2;
    int64 playerId = 3;
    int64 supplyAllNum = 11;    // 发起的请求总数
    int64 supplyRemainNum = 12; // 剩余的请求数
    int32 supplyLeftSecs = 13;  // 剩余的时间
    int32 resMainType = 14;     // 资源类型
}

// msgType = 2563
// 客户端 -> 服务器
// 联盟补给商队--发送请求
message AllianceSupplyRequest {
    int32 resMainType = 1; // 发起请求的资源类型
}

message AllianceSupplyRequestRt {
    map<int32, SupplyResourceInfo> resInfo = 2;
}

// msgType = 2564
// 客户端 -> 服务器
// 联盟补给商队--进行一次补给赠与
message AllianceSupplyGive {
    int64 playerId = 1;     // 指定玩家id
    int32 resMainType = 2;  // 资源类型
}

message AllianceSupplyGiveRt {
    int32 errorCode = 2;
    SupplyMemberRequestInfo requestInfo = 3;   // 盟友发起的请求信息
    string resVo = 4;                          // 获得的额外奖励
    int64 todayGainNum = 5;
}

// msgType = 2565
// 客户端 -> 服务器
// 联盟补给商队--领取补给请求奖励
message AllianceSupplyReceive {
    int32 resMainType = 1;
}

message AllianceSupplyReceiveRt {
    map<int32, SupplyResourceInfo> resInfo = 2;
}

// msgType = 2566
// 客户端 -> 服务器
// 联盟BOSS斗兽场--查询
message AllianceColosseumQuery {
    int32 activityId = 1;
}

message AllianceColosseumInfo {
    int32 bossProtoId = 1;
    int32 callTime = 2;
    int64 totalHp = 3;
    int64 remainHp = 4;
    int32 donateCount = 5;
}

message AllianceColosseumQueryRt {
    AllianceColosseumInfo bossInfo = 2;     // 召唤的boss信息
    int32 donateCount = 3;                  // 已经捐献的次数
    TopPlayerInfo memberInfo = 4;
    TopAllianceInfo allianceInfo = 5;
    int64 totalDamage = 6;                  // 累计伤害
    repeated AllianceBuildVo allianceBuildVos = 11; // 联盟建筑
    int32 nextBossTime = 12;                // boss进入cd后下次可以开启的时间
    map<int32, int64> bossHp = 13;          // key: bossId, value:hp
    int32 maxBossKilledLv = 14;             // 联盟最大击杀等级
    int32 maxKilledLv = 21;                 // 个人最大击杀等级
    repeated int32 receivedLvs = 22;        // 已经领取的等级

    message TopPlayerInfo {
        int64 playerId = 1;
        string playerName = 2;
    }

    message TopAllianceInfo {
        int64 allianceId = 1;
        string allianceName = 2;
        string allianceShortName = 3;
        int32 flagColor = 4;
        int32 flagStyle = 5;
        int32 flagEffect = 6;
    }
}

// msgType = 2567
// 客户端 -> 服务器
// 联盟BOSS斗兽场--操作
message AllianceColosseumOpt {
    ColosseumOpt opt = 1;
    int32  activityId = 2;

    // region 捐献的参数
    int32 count = 11;
    // endregion

    // region 开启的参数
    ColosseumOpenType open = 21;    // 开启的类型
    int32 bossLv = 22;              // 开启或者预约开启
    int32 reserveTime = 23;         // 预约开启的时间戳
    // endregion

    // region 领取击杀奖励的参数
    repeated int32 receiveLv = 31;           // 领取的等级
    // endregion

    enum ColosseumOpt {
        NIL = 0;
        DONATE = 1;         // 进行捐献
        OPEN = 2;           // 开启召唤
        RECEIVE = 3;        // 领取击杀奖励
    }

    enum ColosseumOpenType {
        PASS = 0;
        RIGHT_OFF = 1; // 马上开启
        RESERVE = 2;   // 预约开启
    }
}

message AllianceColosseumOptRt {
    AllianceColosseumInfo bossInfo = 2;
    int32 code = 3;
    string resVo = 4;
    repeated int32 receivedLvs = 31;
}


// msgType = 2571
// 客户端 -> 服务器
// 中立城--界面查询
message NeutralCityQuery {
    int32 strategy = 1; // 1:积分赛季 2:占领城信息 4:报名城市信息 8:所有联盟积分分布 16:积分城的报名信息 32:赠送记录
}

message NeutralCityQueryRt {

    repeated int32 strategy = 2;
    ScoreCityInfo scoreCityVO = 3;
    repeated NeutralCityInfo occupyVO = 4; // 我占领的
    repeated NeutralCityRegisterInfo registerVO = 5; // 我注册的

    repeated NeutralCityPointInfo rankVO = 6; // 所有段位

    repeated NeutralCityInfo pointCityInfo = 7; // 积分城状态

    repeated RecordVO recordVO = 8;   // 记录


    message ScoreCityInfo {
        int32 openTime = 1;
        int32 overTime = 2;
        int32 order = 3;  // 所处赛季的场次
        int32 season = 4; // 当前所处赛季
        int32 points = 5; // 总积分
        map<int32, DistributeVO> killDistributableInfo = 6;
        map<int32, DistributeVO> occupyDistributableInfo = 7; // 赠送奖励剩余信息,key:npcCity的id
    }

    message NeutralCityRegisterInfo {
        int32 protoId = 1;
        repeated int32 registerOrder = 2; // 报名信息
        int32 applyType = 3;                // 1手动报名，2自动报名
    }

    message NeutralCityInfo {
        int32 protoId = 1;
        int32 state = 2; // 状态
        int32 startTime = 3;
        int32 overTime = 4;     // 状态的结束时间
        int64 allianceId = 11;  // 归属联盟id
        string shortName = 12;  // 联盟名字

        int32 occupyTime = 13;  // 开始占领的时间
        int64 occupyAllianceId = 14;
        string occupShortName = 15;
        int32 effective = 16; // 效果是否生效
    }

    message NeutralCityPointInfo {
        int64 allianceId = 1; //联盟id
        string shortName = 2; //联盟名字
        string name = 3; //联盟名字
        int32 lan = 4; // 联盟语言
        int32 flagColor = 5; // 联盟旗帜的颜色
        int32 flagStyle = 6; // 联盟旗帜的样式
        int32 flagEffect = 7; // 联盟旗帜图案
        string leaderName = 8;

        int32 points = 11;
    }

    message DistributeVO {
        map<int64, int32> playerNum = 1; // 玩家和对应已经分配的次数
        int32 remainNum = 2;    // 剩余数量
    }

    message RecordVO {
        string operatorName = 1;// 发起人名字
        int32 operatorPos = 2;  // 发起人职位
        string giftedName = 3;  // 被赠送者名字
        int32 protoId = 4;      // 城池id
        int32 type = 5;         // 0首杀，1占领
        int32 num = 6;          // 赠送数量
        int64 time = 7;         // 赠送时间/毫秒
    }
}


// msgType = 2572
// 客户端 -> 服务器
// 中立城--一些操作
message NeutralCityOpt {
    int32 strategy = 1; // 1:报名 2:取消报名 3:赠送奖励

    int32 registerNpcCityProtoId = 11;
    repeated int32 registerOrder = 12; // 对应basic表islandHegemonyChoiceTime字段的下标

    repeated GiftedVO giftedVO = 31;          // 被赠与者

    message GiftedVO {
        int64 giftedPlayerId = 31;          // 被赠与者
        int32 giftedNpcCityProtoId = 32;
        int32 giftedNum = 33;
        GiftedType giftedType = 34;
    }

    enum GiftedType {
        FIRST_KILL = 0;
        OCCUPY = 1;
    }
}

message NeutralCityOptRt {
    string resVO = 2;
    repeated int32 registerOrder = 3;
    int32 npcCityProtoId = 4;
    map<int32, NeutralCityQueryRt.DistributeVO> killDistributableInfo = 11;
    map<int32, NeutralCityQueryRt.DistributeVO> occupyDistributableInfo = 12;
}

// msgType = 2580
// 客户端 -> 服务器
// 关注社区活动--界面查询
message FollowCommunityQuery {

}

message FollowCommunityQueryRt {
    int64 followCommunityRewardTime = 1;//领取奖励的时间戳,非0表示已领取
}

// msgType = 2581
// 客户端 -> 服务器
// 关注社区活动--领奖
message ReceiveFollowCommunityReward {

}

message ReceiveFollowCommunityRewardRt {
    string reward = 1;//奖励信息
}

// msgType = 2582
// 客户端->服务器
// 请求英雄回声商店信息
message QueryHeroEchoShop {

}

message QueryHeroEchoShopRt {
    HeroEchoInfo lastHeroEchoShop = 1;
    HeroEchoInfo currentHeroEchoShop = 2;

    message HeroEchoInfo {
        int32 currentNo = 1; // 活动期数Id
        int32 coinBuyTime = 2; // 金币购买的次数
        map<int32, int32> buyInfo = 3; // <商品Id, 已购买次数>
        int32 shopId = 4; // 活动商店Id
    }
}



// msgType = 2583
// 客户端 ->服务器
// 请求购买英雄回声
message PurchaseHeroEchoShop {
    uint32 itemId = 1; //道具Id
    uint32 num = 2;    // 数量
}


message PurchaseHeroEchoShopRt {
    uint32 itemId = 2;
    uint32 num = 3;    // 数量
}

// msgType = 2584
// 客户端 -> 服务器
// 幸运宝箱信息获取协议
message QueryLuckyTreasure {
    int32 protoId = 1; // 模板id
}

message QueryLuckyTreasureRt {
    int32 multi = 1;  //当前倍数
    int32 count = 2;  //已抽次数
    repeated BoxInfo boxInfo= 3; //宝箱信息,  没选大奖时为空
    repeated IntToIntKV rewardState = 4; // 阶段奖励信息 key: condition， value：1表示已经领取,  0表示没有领取
}


message BoxInfo{
    int32 boxProtoId = 1 ;  //配置id
    int32 showPosition = 2; //宝箱位置, 没开过为0, 开过的宝箱记录展示用的下标(有效值从1开始)
    int32 historyMulti = 3; //历史倍率 0代表未领奖, 或者领奖时无倍率加成(1倍时会发0,用来表示不用特殊处理), 发几就是几倍抽的
}

// msgType = 2585
// 客户端 -> 服务器
//幸运宝箱选择大奖协议
message LuckyTreasureChooseBig {
    int32 protoId = 1; // 模板id
    int32 bigProtoId = 2; //大奖的配置id
}

message LuckyTreasureChooseBigRt {
    int32 multi = 1;  //当前倍数
    repeated BoxInfo boxInfo= 2; //宝箱信息,  没选大奖时为空
    int32 count = 3;  //已消耗道具数
}

// msgType = 2586
// 客户端 -> 服务器
//开幸运宝箱协议
message PlayLuckyTreasure {
    int32 protoId = 1; // 模板id
    int32 showPosition = 2;
}

message PlayLuckyTreasureRt {
    int32 multi = 1;  //当前倍数
    int32 count = 2;  //已抽次数
    BoxInfo boxInfo= 3; //领取到的宝箱信息
}


// msgType = 2587
// 客户端 -> 服务器
//幸运宝箱领取阶段奖励协议
message LuckyTreasureGetStageReward {
    int32 protoId = 1; // 模板id
    int32 stage = 2; //目标分数
}

message LuckyTreasureGetStageRewardRt {
    repeated IntToIntKV rewardState = 1; // 阶段奖励信息 key: condition，未领取不发         value：1表示已经领取,  0表示没有领取
}

// msgType = 2591
// 客户端 -> 服务器
//私人订制查询活动信息
message QueryPrivateCustomizationGiftInfo {
    int32 activityId = 1; // 活动id
}


message QueryPrivateCustomizationGiftInfoRt {
    int32 activityId = 2; // 活动id
    repeated PrivateCustomizationInfo giftInfo = 3;
}

//私人定制礼包信息
message PrivateCustomizationInfo {
    int32 giftId = 1;//礼包id
    repeated IntToStringKV rewards = 2;//坑位id->礼包信息
}

// msgType = 2592
// 客户端 -> 服务器
//私人订制活动，礼包自选道具变更信息
message ChangePrivateCustomizationGiftInfo {
    int32 activityId = 1; // 活动id
    int32 giftId = 2;//礼包id
    repeated IntToIntKV change = 3;//坑位下标->自选道具在奖励池中下标
}

message ChangePrivateCustomizationGiftInfoRt {
    repeated IntToIntKV change = 2;//坑位下标->自选道具在奖励池中下标
}

// msgType = 2596
// 客户端 -> 服务器
//收回功能性建筑，1.是功能建筑2.是高级装饰物，满足这两个才可以收回!!!!
message InnerCityReclaimTheBuilding {
    repeated int64 innerCityId = 2; // 注意必须是同一种装饰建筑
}

message InnerCityReclaimTheBuildingRt {

}

// msgType = 2597
// 客户端 -> 服务器
//将功能性建筑直接从建筑背包移到当前布局中
message InnerCityBuildingPlacement {
    int64 id = 1;
    int32 x = 2;
    int32 y = 3;
}

message InnerCityBuildingPlacementRt {

}

// msgType = 2598
// 客户端 -> 服务器
//使用高级装饰物特效
message UseAdvancedDecorationSpecial {
    int64 innerCityId = 1;
}

message UseAdvancedDecorationSpecialRt {
    int32 buildingDataProtoId = 2;
}



//==============================================================================================================================================
// ====== 子消息=================================================================================================================================
//==============================================================================================================================================

message RankActivityInfo {
    int32 activityId = 1;
    int32 startTime = 3;
    int32 endTime = 4;
}

message CasinosWinner {
    int64 playerId = 1; // 玩家id
    string playerName = 2; // 玩家名字
    int32 areaNo = 3; // 服务器编号
    string allianceShortName = 4; // 联盟简称
    int64 giftNum = 5; // 中奖数量
    int32 date = 6; // 中奖日期
    int32 belongState = 7;
}

message propVo {
    int32 protoId = 1;
    int32 num = 2;
}

message LotteryInfo {
    int32 protoId = 1; //配置Id
    int32 lotteryType = 3; //1、普通抽卡 2、高级抽卡 3、开服抽奖 4、活动抽奖
    int32 nextFreeTime = 11; //下次免费时间，-1代表无线
    int32 drawCount = 12; //累计抽奖次数
    int32 freeLotteryCount = 16; //当天已经抽的免费次数
    int32 nextRefFreeCountTime = 18; //下次刷新免费次数时间
    int32 drawCountForLimit = 19; // 次数限制中已使用的次数

    //下面的字段废弃，全部读配置表
    int32 replaceProtoId = 2; //替换的配置Id todo 废弃
    int32 freeCount = 10; //剩余免费次数，为0时nextFreeTime才有效 todo 废弃
    int32 starTime = 14; //开始时间  todo 废弃
    int32 overTime = 15; //结束时间  todo 废弃
    string oneLotteryCost = 4; //单抽消耗，奖励格式
    string tenLotteryCost = 5; //十连抽消耗，奖励格式
    string mustGet = 6; //必得道具，奖励格式
    string showProps = 7; //展示列表，奖励格式
    repeated IntToIntKV reachDrops = 9; //达成次数掉落 <次数,掉落包> dropbag表
    repeated IntToIntKV securityDrops = 17; //保底掉落 <次数,掉落包>
}

message LotteryScoreInfo {
    int32 score = 1;//当前积分
    int32 rewardCount = 2;//领奖次数
    int64 totalScore = 3;//累计积分
}

//活动抽奖大奖记录
message ActivityLotteryWonderRecord {
    int32 lotteryTime = 1; //时间
    int64 playerId = 2; //玩家Id
    string name = 3; //玩家名称
    string allianceShortName = 4; //玩家联盟简称
    repeated IntToIntKV receiveProps = 5; //获得的道具
    int32 rewardFrom = 6; // 1、活动抽奖 2、次数奖励 3、招募
}

message IntToIntKV {
    int32 key = 1;
    int32 value = 2;
}

message IntToStringKV {
    int32 key = 1;
    string value = 2;
}

message LongToLongKV {
    int64 key = 1;
    int64 value = 2;
}

message LongToIntKV {
    int64 key = 1;
    int32 value = 2;
}

message IntToLongKV {
    int32 key = 1;
    int64 value = 2;
}

message LongToStringKV {
    int64 key = 1;
    string value = 2;
}

message CityInfo {
    int32 x = 1;
    int32 y = 2;
    string name = 3;
    int32 cityType = 4; //城池类型
    int64 cityId = 5;
    int32 lv = 6;
    int32 fireEndTime = 7; // 自动灭火的时间，单位秒
    int64 wallHp = 8; //血量
    int32 wallHpRefreshTime = 9; //血量刷新时间
    int32 flagEditedRecordSize = 10; // 旗帜被他人记录数
    int32 posChangeFlag = 11; // 离线期间是否发生过强制迁城  0-否 1-是 (不包含离线太久被清出沙盘逻辑)
}

message ResourceInfoRt {
    int64 gold = 7; // 元宝
    int64 bindGold = 8; // 绑定元宝
    int32 jjcCoin = 10; // 竞技币
    int64 allianceCoin = 12; // 竞技币
    int64 heroExpPool = 13; // 武将英雄池
    int64 casinoCoin = 14; // 赌场：神圣
    int64 goldCoin = 15; // 挑战金币
    int64 silverCoin = 16; // 挑战银币
    int64 dragonCrystal = 17; //龙晶
    int64 dragonSoul = 18; //龙魂
    int64 heroLoveExpPool = 19; //英雄亲密度经验池
    int64 medalScore = 20; //勋章积分
    int64 heroMedal = 21; // 英雄纹章初级
    int64 breakthroughValue = 22; // 修为
    int64 equipTurntableCoint = 23; // 装备转盘积分
    int64 heroMedals = 24; // 英雄纹章中级
    int64 heroMedalss = 25; // 也英雄纹章高级
    int64 kungfuSoul = 26; // 武魂
    int64 culturePoint = 27; //文化值
    int64 buildPoint = 28; //建筑值
    int64 researchPoint = 29; //科技值
    int64 merit = 30; //战功
    int64 todayMerit = 31; //今日获得的战功
    int32 meritRefTime = 32; //战功刷新时间
    int64 meritCoin = 33; //战功币
    int64 tencentCoin = 34; // 腾讯代币
    int64 oldDragonCoin = 35; // 古龙币
    int64 tencentRmb = 36; // 腾讯点券
    int64 reliableStone = 37; // 可靠石头
    int64 reliableFood = 38; // 可靠粮食
    int64 reliableWood = 39; // 可靠木头
    int64 reliableCoin = 40; // 可靠金币
    int64 reliableIron = 41; // 可靠晶矿
    int64 crusadeCoin = 42; // 讨伐币
    int64 mithril = 43; // 秘银
    int64 allianceOrder = 44; // 联盟令
    int64 copperCoin = 45; // 铜币
    int64 expeditionCoin = 46; // 远征币
    int64 adventureCoin = 47; // 冒险币
}

message TacticsInfoRt {
    int32 tacticsId = 1;
    int32 tacticsNum = 2;
}

message PlayerWalkInfoRt {
    int64 forceId = 1;
    int64 startTime = 2;
    int64 finishTime = 3;
    int32 departureX = 4;
    int32 departureY = 5;
    int32 targetedX = 6;
    int32 targetedY = 7;
}

message ForceInfo {
    int64 forceId = 1;
    int64 qianfengHeroId = 2;
    int64 zhongjianHeroId = 3;
    int64 dayingHeroId = 4;
    int32 heroProtoId = 5;
    int32 heroLvUpNum = 6;
    int32 heroLv = 7;
    int32 forceAllBingli = 8;
    int32 forceState = 9;
}
message AddInForce {
    int64 heroId = 1; //武将ID
    int32 inForceState = 2; ////在部队中的什么位置  0-不在部队内 3-前锋 2-中军 1-大营
    int64 force = 3; //所属部队ID
    int32 conscriptionStartTime = 4; //征兵开始时间
    int32 conscriptionEndTime = 5; //征兵结束时间
    int32 getBingli = 6; //征兵可得兵力
    int64 geziId = 7; //唯一ID
}

message GeneralsInFo {
    int64 heroId = 1;
    int32 heroProtoId = 2;
    int32 lv = 3;
    int32 city = 4;
    int32 advancedNum = 5;
    int32 wakes = 6;
    int32 troops = 7;
}

message HeroEndTime {
    int64 heroId = 1; //格子ID  格子ID!!!!!
    int32 startTime = 2;
    int32 endTime = 3;
    int32 getBingli = 4;
}

// 战斗简报
message BattleReportInfo {
    int64 playerId = 1; //战报归属玩家Id 废弃
    int32 reportType = 2; // 改用邮件类型
    int32 fightTime = 3; // 战斗时间
    int32 areaNo = 4; //区服Id
    int32 fightAddressX = 5; // 战斗地点X坐标
    int32 fightAddressY = 6; // 战斗地点Y坐标
    int64 fightDetailId = 7; //战斗详情Id  大多数用该Id，合并的战报用里面具体的Id
    int64 battleFieldId = 8;    // 战场id

    PvpFightReport pvpTroopsFightReport = 9; // 玩家对玩家           reportType = 1
    MassRuinsFightReport massRuinsFightReport = 10; // 集结遗迹/奇观npc/内城迷雾npc               reportType = 4/18/19
    HunterFightReport hunterFightReport = 11; // 魔物猎杀               reportType = 2
    repeated TransportReport transportReport = 12; // 运输战报              reportType = 9
    repeated CollectReport collectReport = 13; // 采集战报              reportType = 8
    ScoutReport scoutReport = 15; // 侦察战报               reportType = 6
    repeated BeScoutReport beScoutReport = 16; // 被侦查战报         reportType = 7
    HunterFightReport allianceHunterFightReport = 17; // 联盟魔物猎杀         reportType = 10
    HunterFightReport worldHunterFightReport = 18; // 世界魔物猎杀            reportType = 11
    HunterCallInfo hunterCallInfo = 21; //召唤礼信息  reportType = 15
    JjcFightReport jjcFightReport = 22; //竞技场战报 reportType = 16
    StationDefReport stationDefReport = 23; //驻扎部队防守战报 reportType = 17
    FailReport failReport = 24; //失败战报 reportType = 20
    CollectResReport collectResReport = 25; // 新版采集战报               reportType = 22
    PvpFightReport fightResWalk = 26; // 攻打资源线          reportType = 23
    MultiHunterFightReport multiHunterFightReport = 27; //新版打魔物战报   reportType = 24/25
    TrustReport trustReport = 28; //托管战报 reportType = 26
    PveRobFightReport pveRobFightReport = 29; //Pve拦路怪战斗战报 reportType = 27
    repeated WorldWonderApplyInfo worldWonderApplyInfo = 30; // 新的奇观战开启时候的奇观时间开启情况
    repeated SummonRewardDetail summonRewardDetail = 31; // 圣女奖励详情
    repeated LongToIntKV thumbsUpRecords = 32;    // 点赞记录

    //下面是新的slg战报
    SlgFightForceReport fightStationForceReport = 100; //打部队战报
    SlgFightBossReport fightBossReport = 101; //打魔物战报
    repeated SlgFarmResCollectReport farmResCollectReport = 102; //采集战报
    SlgFightCastleReport fightCastleReport = 103; //打主堡战斗
    SlgFightRelicReport fightRelicReport = 104; //打遗迹巢穴战报
    SlgFightNpcReport fightNpcReport = 105; //打npc战报
    SlgFightBuildReinforceForceReport fightBuildReinforceForceReport = 106; //打建筑增援部队
    SlgScoutReport slgScoutReport = 107; //侦查战报
    SlgFightRelicRewardReport fightRelicRewardReport = 108; //打遗迹巢穴奖励战报
    SlgFightPveRobReport fightPveRobReport = 109; //打内城怪物战报
    SlgFightPveCityReport fightPveCityReport = 110; //打内城城池战报
    repeated ExploreMapNpcReport exploreMapNpcReport = 111; //探索地图NPC战报
    RobotFightCastleReport robotFightCastleReport = 112; //机器人打玩家主堡
    RobotFightBuildReinforceForceReport robotFightBuildReinforceForceReport = 113; //机器人打联盟建筑
    SlgFightAllianceNewBossReport slgFightAllianceNewBossReport = 114; //打联盟boss
    AllianceNewBossAwardReport allianceNewBossAwardReport = 115; //联盟boss结算
    WorldBossRankReport worldBossRankReport = 116; // 世界boss结算
    SlgFightCannonReport slgFightCannonReport = 117; //炮塔攻击日月皇城战报
    SlgFightPollutedReport slgFightPollutedReport = 118; //打污染之地
    EliminatePollutedReport eliminatePollutedReport = 119; //三消污染之地
    EliminateMonsterReport eliminateMonsterReport = 120; //三消世界boss精英魔物
    GameRankReport gameRankReport = 121;
    SlgFightSummonReport summonReport = 122;
    SlgFightRandomEventReport slgFightRandomEventReport = 123; // 内城随机事件slg战报
    repeated AssistMemberReport assistMemberReport = 124; //运输战报
    FestivalBossReport festivalBossReport = 125; //七日boss
    TearDownNpcCityReport tearDownNpcCityReport = 126; // 拆墙战报
    TearDownAllianceBuildReport tearDownAllianceBuildReport = 127; // 联盟建筑拆墙战报
    BattleFieldAllianceRewardReport battleFieldAllianceRewardReport = 128; // 战场联盟奖励邮件
    BattleFieldPlayerRewardReport battleFieldPlayerRewardReport = 129;  // 战场个人奖励邮件
    BattleFieldCitySkillUseReport battleFieldCitySkillUseReport = 131;  // 战场城池技能使用战报
    SlgFightMilitaryPlaceForceReport fightMilitaryPlaceForceReport = 132;   // 打军事设施战报
    SlgAllianceDefCannonAttackReport allianceDefCannonAttackReport = 133;  // 炮塔攻击战报
    SlgFightAllianceColosseumReport allianceColosseumReport = 134; // 斗兽场战报
    SlgFightAllianceNewBossReportV2 allianceNewBossReportV2 = 135; // 军团演武战报v2
    SlgFightSummonReportV2 summonReportV2 = 136; // 圣女战报v2
    SlgFightRelicPartpointReport fightRelicPartpointReport = 137; //打围剿指令巢穴战报
}

message WorldWonderApplyInfo {
    int32 wonderId = 1;
    int32 applyType = 2; // 我们联盟的报名情况
    int32 openTime = 3; // 系统定的开启时间
}

message SummonRewardDetail {
    PhotoViewInfo photoInfo = 1; //玩家头像
    string shortName = 2; //
    string playerName = 3; //
    string res = 4; // 奖励
    int64 playerId = 5;
}

//region 新的slg战报

// 战场城池技能使用战报
message BattleFieldCitySkillUseReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    SlgBattleHurtForReport hurts = 4;
    int32 atkCount = 5;
    int32 citySkillId = 6;

    int32 cityId = 11;  // 释放技能的城池id
    int32 targetCityId = 12;    // 目标城池id
    int32 targetCannonId = 13;  // 目标炮塔id
    int32 targetWonderId = 14;  // 目标奇观id
}

// 战场联盟奖励邮件
message BattleFieldAllianceRewardReport {
    int32 fightResult = 1;
    repeated BattleFieldJoinInfo joinInfos = 2; // 参与信息
    repeated BattleFieldPlayerScoreRankInfo rankInfos = 3;  // 自己联盟排行榜信息
    BattleFieldPlayerScoreRankInfo occupyMvpRankInfo = 4;  // 占领mvp排行信息
    BattleFieldPlayerScoreRankInfo farmMvpRankInfo = 5;  // 占领mvp排行信息
    BattleFieldPlayerScoreRankInfo killMvpRankInfo = 6;  // 采集mvp排行信息
}

// 战场个人奖励邮件
message BattleFieldPlayerRewardReport {
    int32 fightResult = 1;
    BattleFieldPlayerScoreRankInfo myRankInfo = 3;  // 我的排行信息

    int64 maxKillScore = 21; // 历史个人最高击杀积分
    int64 maxFarmScore = 22;   // 历史个人最高采集积分
    int64 maxDonateScore = 23; // 历史个人最高捐献积分
    int64 maxOccupyScore = 24; // 历史个人最高占领积分
}

// 拆npc城池战报
message TearDownNpcCityReport {
    int32 npcCityId = 1;
    int64 tearDownHp = 2;
    int64 maxHp = 3;
    int64 leftHp = 4;
}

// 拆联盟建筑战报
message TearDownAllianceBuildReport {
    int64 tearDownHp = 2;
    int64 maxHp = 3;
    int64 leftHp = 4;

    int32 protoId = 11;
    int64 allianceId = 12;
    string allianceName = 13;
    string allianceShortName = 14;
    int32 flagColor = 15;
    int32 flagStyle = 16;
    int32 flagEffect = 17;
}

// 日月皇城炮塔打奇观
message SlgFightCannonReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 protoId = 3;
    SlgBattleHurtForReport hurts = 4;
}

message SlgBattleHurtForReport {
    int64 playerId = 1;
    repeated IntToLongKV damages = 2;
}

// slg打部队战报
message SlgFightForceReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
}

message SlgBattleGroupForReport {
    repeated SlgBattleUnitForReport units = 1;
    repeated IntToIntKV effects = 2;
    repeated LordEquip lordEquips = 3;
    repeated int32 heroSharedEquips = 4;
    int64 leaderPower = 5;
    repeated SlgBattlePlayerForReport players = 6;
    repeated IntToIntKV hieronEffects = 7;
    repeated IntToIntKV suppressEffects = 8;
    int32 severeWoundRate = 10; //重伤率
    int32 dieRate = 11; //死亡率
    int64 powerPlayerId = 12; // 取效果的玩家id
}

message SlgBattleUnitForReport {
    int64 playerId = 1;
    repeated SlgBattleHeroForReport heros = 2;
    repeated SlgBattleSoldierForReport soldiers = 3;
    repeated IntToLongKV killSoldier = 4; // 废弃
}

message SlgBattlePlayerForReport {
    int64 playerId = 1;
    string playerName = 2;
    int32 castleX = 3;
    int32 castleY = 4;
    int64 allianceId = 11;
    string allianceShortName = 12;
    PhotoViewInfo photoInfo = 21; //玩家头像
}

message SlgBattleHeroForReport {
    int32 protoId = 1;
    int32 level = 2;
    int32 awake = 3;
    int64 heroPower = 4;
    repeated int32 skills = 5;
    int64 soldierCarry = 6;
    int32 joinFight = 10; //是否参与战斗
    repeated SlgBattleHeroSkillForReport skillReport = 11;

    int64 id = 100;
}

message SlgBattleHeroSkillForReport {
    int32 skillId = 1; // 技能ID
    int32 skillEffId = 2; // 技能效果ID，暂时无用，技能效果ID提供的数值将汇总给技能 @Deprecated
    int64 hurt = 3; // 击杀数
    int64 cure = 4; // 治疗数
    int64 hudun = 5; // 护盾抵消数
    int64 extraHurt = 6; // @Deprecated
    int64 protect = 7; // 降伤/减伤技能效果保护数
    int32 times = 10; // 技能生效次数
}

message SlgBattleSoldierForReport {
    int32 protoId = 1;
    int64 leftNum = 2; //剩余兵量
    int64 minorWoundNum = 3; //轻伤数量
    int64 severeWoundNum = 4; //重伤数量
    int64 dieNum = 5; //死亡数量
    int64 cureNum = 6; //被治疗数量 废弃
    int64 killNum = 7; //杀敌数 废弃
    repeated IntToLongKV killSoldier = 8; // 击杀信息
    int64 statHurt = 9; // 累积造成伤害
    int64 statToughness = 10; //累积承受伤害
}

// slg打魔物战报
message SlgFightBossReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 7;
    int32 bossId = 2;
    int32 damageRate = 3; //魔物受伤比例
    int32 fightResult = 4;
    string res = 5;
    repeated HeroAddExpInfo addExps = 6; //英雄获得的经验
    string firstRes = 8; // 叛军首次击杀奖励
    int32 shineWeapon = 9; // 领主天赋技能光明武器次数，如未触发则是0
    string shineWeaponRes = 10; // 领主天赋技能光明武器产出的额外奖励，不含首次
}

// slg新团演武战报
message SlgFightAllianceNewBossReportV2 {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 bossId = 3;   // 对应bossActivityLevel表id
    int32 fightResult = 4;
    string res = 5; // 奖励
}

message HeroAddExpInfo {
    int64 heroId = 1;
    int32 oldLv = 11;
    int32 oldExp = 12;
    int32 newLv = 21;
    int32 newExp = 22;
    int32 realAddExp = 31;
    int32 expOverFlow = 32; //经验是否溢出
}

// slg打遗迹巢穴战报
message SlgFightRelicReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 8;
    int32 relicId = 2;
    int32 damageRate = 3; //巢穴受伤比例
    int32 fightResult = 4;
    repeated LongToStringKV res = 5;
    int64 mainPlayerId = 6;

    repeated LongToStringKV leaderRes = 7;
    repeated PlayerHurtReport playerHurt = 9;
}
// slg打遗迹巢穴战报
message SlgFightRelicPartpointReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 8;
    int32 relicId = 2;
    int32 damageRate = 3; //巢穴受伤比例
    int32 fightResult = 4;
    repeated LongToStringKV res = 5;
    int64 mainPlayerId = 6;

    repeated LongToStringKV leaderRes = 7;
    repeated PlayerHurtReport playerHurt = 9;
    int32 partpointScore = 10;
}
// slg打圣女战报
message SlgFightSummonReportV2 {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 summonId = 3; //圣女配置id
    int32 fightResult = 4;
    repeated LongToStringKV res = 5; //玩家ID对应奖励,玩家具体信息见atkGroup
    int64 mainPlayerId = 6;//队长id
}

// slg打圣女战报
message SlgFightSummonReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 8;
    int32 relicId = 2;
    int32 fightResult = 4;
    repeated FightSummonRecord record = 5;
}

message FightSummonRecord {
    string shortName = 1;
    string playerName = 2;
    int32 atkNum = 3;
    PhotoViewInfo photoInfo = 6; //领主头像
}

// slg打遗迹巢穴奖励信息战报
message SlgFightRelicRewardReport {
    repeated SlgBattlePlayerForReport player = 1;
    int32 relicId = 2;
    repeated LongToStringKV res = 3;
}

// slg打内城怪物战报
message SlgFightPveRobReport {
    SlgBattleGroupForReport atkGroup = 1;
    int32 robId = 2;
    int32 damageRate = 3; //受伤比例
    int32 fightResult = 4;
    string res = 5;
}

// slg打内城怪物战报
message SlgFightPveCityReport {
    SlgBattleGroupForReport atkGroup = 1;
    int32 cityId = 2;
    int32 damageRate = 3; //受伤比例
    int32 fightResult = 4;
    string res = 5;
}

// slg采集资源
message SlgFarmResCollectReport {
    int32 resCollectId = 1;
    int32 farmTime = 2;
    int32 farmX = 3;
    int32 farmY = 4;
    string res = 5;
    string extendRes = 6;
    string realRes = 7;
}

// 运输资源
message AssistMemberReport {
    int32 time = 1;
    string playerName = 2;
    int32 type = 3;
    string res = 4;
    int64 playerId = 5;
    int32 result = 10; // 运输结果
    string returnRes = 11; // 返还的资源
}

//机器人打玩家主堡战报
message RobotFightCastleReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    repeated SlgBattleKillInfoForReport killInfo = 3;
    int32 fightResult = 4;
    int32 robotId = 5;
    int32 robotPosX = 7;
    int32 robotPosY = 8;
    repeated LongToLongKV scoreInfos = 9;
    LongToIntKV failNum = 10;
}

//机器人打联盟建筑增援部队战报
message RobotFightBuildReinforceForceReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    repeated SlgBattleKillInfoForReport killInfo = 3;
    int32 fightResult = 4;
    int32 protoId = 5;
    int32 robotId = 6;
    int32 robotPosX = 7;
    int32 robotPosY = 8;
    repeated LongToLongKV scoreInfos = 9;
}

message SlgBattleKillInfoForReport {
    int64 playerId = 1;
    repeated IntToLongKV killSoldiers = 2;
}

// slg打完成城池战斗
message SlgFightCastleReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
    repeated SlgPlunderResForReport plunderRes = 4;

    repeated HeroInformationForProperties atkBePrisonHeros = 10;
    repeated HeroInformationForProperties defBePrisonHeros = 11;
}

// slg掠夺资源信息
message SlgPlunderResForReport {
    int64 playerId = 1;
    string res = 2;
    string extendRes = 3;
    string realRes = 4;
    repeated int32 plunderLimitType = 5; //掠夺达到上限的类型
}

// slg打建筑增援部队战报
message SlgFightBuildReinforceForceReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
    int32 protoId = 4;
}

// slg打军事设施部队战报
message SlgFightMilitaryPlaceForceReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
    int32 protoId = 4;
    int64 allianceId = 5;
    string allianceShortName = 6;
}

// 联盟防御炮塔攻击战报
message SlgAllianceDefCannonAttackReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 protoId = 3;
    SlgBattleHurtForReport hurts = 4;
}

// slg打npc战报
message SlgFightNpcReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
    int32 protoId = 4;
    int32 npcId = 5;
}

// slg内城随机事件战报
message SlgFightRandomEventReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3; // 战斗结果
    int32 protoId = 4; // 事件模板Id
    int32 soldierTeamId = 5; // soldierTeam模板Id
    int64 eventId = 6; // 事件唯一id
    int32 resSingleWarProtoId = 7; // 事件所属资源点模板id
    string reward = 8; // 奖励
    repeated HeroAddExpInfo addExps = 9; //英雄获得的经验
}

//三消世界boss/精英魔物战报
message EliminateMonsterReport {
    int64 totalPower = 1;
    SlgBattlePlayerForReport player = 2;
    repeated SlgBattleHeroForReport heros = 3;
    int32 monsterId = 4;
    string resVo = 5;
    LongToStringKV res = 6;
    int64 damage = 7;
    int32 perCent = 8;
    int32 npcType = 9;
}

//三消世界 七日boss战报
message FestivalBossReport {
    int64 totalPower = 1;
    SlgBattlePlayerForReport player = 2;
    repeated SlgBattleHeroForReport heros = 3;
    int32 monsterId = 4;
    string resVo = 5;
    LongToStringKV res = 6;
    int64 damage = 7;
    int32 perCent = 8;
    int64 totalHp = 10;
}

// 游戏内的排行邮件
message GameRankReport {
    int32 type = 1;
    int32 protoId = 2;
    repeated GameRankInfo rankInfo = 3;
}
message GameRankInfo {
    string allianceName = 1;
    string playerName = 2;
    int64 value = 3;
    int32 rank = 4;
}

//三消污染之地战报
message EliminatePollutedReport {
    int64 totalPower = 1;
    SlgBattlePlayerForReport player = 2;
    repeated SlgBattleHeroForReport heros = 3;
    int32 monsterId = 4;
    int32 score = 5;
    LongToStringKV res = 6;
    int64 damage = 7;
    int32 perCent = 8;
    int64 totalHp = 9;
}

// slg打污染之地战报
message SlgFightPollutedReport {
    SlgBattleGroupForReport atkGroup = 1;
    SlgBattleGroupForReport defGroup = 2;
    int32 fightResult = 3;
    int32 pollutedProId = 4;
    int32 monsterPvpProId = 5;
    int32 monsterType = 6; //1-小怪 2-中怪 3-boss
    repeated LongToStringKV res = 7;
    repeated LongToIntKV addExps = 8; //英雄获得的经验
    int32 score = 9;
}

// slg打联盟boss战报
message SlgFightAllianceNewBossReport {
    SlgBattleGroupForReport atkGroup = 1;
    string allianceName = 2;
    string playerName = 3;
    int32 rank = 4;
    int64 hurt = 5;
    repeated IntToLongKV soldierHurt = 6;

}

// 联盟boss结算战报
message WorldBossRankReport {
    repeated LordActivityRankPlayer player = 2;
    int32 myRank = 3;
    int32 mapNpcId = 4;
    int32 isKilled = 5; // boss是否击杀, 否的话说明boss是逃跑
    int32 isLastKill = 6; // 是否是最后一击
    string rankResVo = 7; // 排名奖励
    string killResVo = 8; // 最后一击奖励
    LordActivityRankPlayer lastKillPlayer = 9; // 最后一击玩家
}

// 联盟boss结算战报
message AllianceNewBossAwardReport {
    string killReward = 2;
    int32 bossId = 3;
    int32 massCount = 4;
    int64 totalDamage = 5;
    repeated NewBossReport newBossHurtReport = 6;
    int64 attPlayerId = 7;
    int64 totalHp = 8;
}

message NewBossReport {
    int64 attPlayerId = 1;
    int64 damage = 2;
    int32 headIcon = 3;
    string name = 4;
    string hurtReward = 5;

    PhotoViewInfo photoInfo = 6; //领主头像
    string allianceShortName = 7;
}

message NewBossHurtReport {
    int64 attPlayerId = 1;
    int64 damage = 2;
}

message PlayerHurtReport {
    int64 attPlayerId = 1;
    int64 damage = 2;
}

// slg打联盟boss斗兽场战报
message SlgFightAllianceColosseumReport {
    SlgBattleGroupForReport atkGroup = 1;
    string allianceName = 2;
    string playerName = 3;
    AllianceColosseumInfo colosseumInfo = 4;
    int64 hurt = 6;
    repeated IntToLongKV soldierHurt = 7;
    map<int64, int64> hurtMap = 8;
}

// slg侦查战报
message SlgScoutReport {
    int32 scoutLv = 1; //位运算值，非直接的侦查等级
    int32 cellType = 2;
    int64 targetId = 3;
    int32 isMass = 4; //是否集结

    PlayerNameInfo playerInfo = 10;

    // 1级侦查效果
    string res = 100;
    int64 wallMaxHp = 101;
    int64 wallHp = 102;
    repeated int32 plunderLimitType = 103; //掠夺达到上限的类型

    // 2级侦察效果
    repeated ReinforceGroup reinforceGroup = 110;

    // 9级效果
    repeated IntToIntKV effect = 160; //科研效果
    repeated IntToIntKV effectDebuff = 161; //科研效果
}

message ReinforceGroup {
    // 3级效果
    int64 evaluateTotalNum = 120; //估算兵总量
    //6级效果
    PlayerNameInfo players = 1; //全体指挥官名称
    // 5级效果-估算兵量 5级效果-精确兵量
    repeated IntToLongKV soldierNum = 2; //城内/部队兵量
    repeated HeroForWalk heros = 3; // 守城英雄
    //12级效果
    repeated IntToIntKV talent = 4; //领主天赋
    repeated IntToIntKV talentDebuff = 6; //领主天赋debuff
    //英雄装备
    repeated int32 equip = 5;
}

message SlgScoutHeroInfo {
    int32 heroUseType = 1; //英雄使用类型 1、主被动技能都生效 2 被动技能生效 3 主动技能生效
    HeroInformationForProperties hero = 2;
}
//endregion

message TrustReport {
    FightPlayerInfo playerInfo = 1; //托管玩家信息
    repeated TrustFarmInfo farmInfos = 2; //采集信息
}

message TrustFarmInfo {
    int32 resId = 1; //采集点配置Id
    int32 farmTime = 2; //采集结束时间
    string res = 3; //采集到的资源
    string props = 4; //采集到的道具
}

message MultiHunterFightReport {
    repeated HunterFightReport hunterFightReport = 1;
    HunterRewardReport hunterRewardReport = 2; //魔物奖励战报
}

message HunterRewardReport {
    int64 id = 1; //魔物唯一Id，用于邮件合并
    int32 monsterId = 2; //魔物模板Id
    string atkReward = 3; //攻击奖励
    string killReward = 4; //击杀奖励
    string rankReward = 5; //排行奖励
}

message CollectResReport {
    string resVo = 1; //获得的资源
    repeated HeroInfoForReport heros = 2; //英雄信息
    int32 farmTime = 5; // 采集时间
    int32 farmAddressX = 6; // 采集地点X坐标
    int32 farmAddressY = 7; // 采集地点Y坐标
    int64 resLimit = 9; // 资源储量限制,无的话填-1
    int64 origin = 10; // 资源已有量,采集结算前
    int64 target = 11; // 采集计划获得的产量(未考虑储量限制的情况下)
    int64 cutDown = 12; // 由于资源储量限制被削减的采集量,仅资源
    int32 resId = 13; //资源Id
    repeated ResHelpInfo helpPlayerInfo = 14; //帮助者信息
    repeated ResRobInfo robPlayerInfo = 15; //打劫者信息
}

message ExploreMapNpcReport {
    int32 npcProtoId = 1;
    int32 explored = 4; // 是否探索过 0-否 1-是
    int32 exploreX = 5;
    int32 exploreY = 6;
    int32 exploreTime = 7;
    string reward = 10;
}

message ResHelpInfo {
    int64 playerId = 1;
    string name = 2;
    string shortName = 3;
    string allianceName = 4;
    string allianceShortName = 5;
    int32 helpTime = 6; //帮助时间
    string res = 7; //帮助的资源
    int32 x = 8; //帮助者的坐标X
    int32 y = 9; //帮助者的坐标Y
    int32 photoId = 10; //头像
    int32 thanked = 11; //是否已感谢
    int32 belongState = 12;
    int64 helpId = 20; //帮助唯一Id
}

message ResRobInfo {
    int64 playerId = 1;
    string name = 2;
    string shortName = 3;
    string allianceName = 4;
    string allianceShortName = 5;
    int32 robTime = 6; //打劫时间
    string beRobRes = 7; //被打劫的资源
    int32 fightResult = 8; //战斗结果
    int32 x = 9; //打劫者的坐标X
    int32 y = 10; //打劫者的坐标Y
    int32 belongState = 11;
}

message FailReport {
    string titleLan = 1; //标题
    repeated string titleParms = 2; //标题参数
    string failReasonLan = 3; //失败原因 lan
    repeated string reasonParms = 4; //原因参数
}

message StationDefReport {
    int64 atkPlayerId = 1; //攻击方玩家Id
    string atkPlayerName = 2; //攻击方玩家名称
    string atkAllianceShortName = 3; //攻击方联盟简称
    int32 atkPosX = 4; //攻击方坐标X
    int32 atkPosY = 5; //攻击方坐标Y
    int64 defPlayerId = 6; //防守方玩家Id
    string defPlayerName = 7; //防守方玩家名称
    string defAllianceShortName = 8; //防守方联盟简称
    int32 defPosX = 9; //防守方坐标X
    int32 defPosY = 10; //防守方坐标Y
    int32 atkBelongState = 11;
    int32 defBelongState = 12;
}

message JjcFightReport {
    int32 fightType = 1; // 1-进攻  2-防守
    int32 fightResult = 2; // 战斗结果  1-失败  2-成功
    int32 rankChange = 3; // 变化名次,正数上升.负数就是下降
    string enemyName = 4; // 敌人名字
    int32 enemyPhoto = 5; // 敌人头像
    string enemyAllianceName = 6; // 敌人帮派名
    int32 defRank = 7; //防守方排行
    repeated JjcFightForceInfo atkJjcFightForce = 8; //攻击方竞技场部队
    repeated JjcFightForceInfo defJjcFightForce = 9; //防守方竞技场部队
    int32 robotId = 10; // 如果是0就是跟玩家战斗 非0就是机器人模板
    int32 isTimeOut = 11; // 是否超时战报
    int64 otherPlayerId = 12; // 对手玩家ID
    int32 enemyChangeScore = 13; // 对手分数变化 正数上升.负数就是下降
    int32 belongState = 14;
}

message JjcFightForceInfo {
    int32 protoId = 1; //武将模板
    int32 level = 2; //武将等级
    int32 starLv = 3; //武将进阶次数
    int32 awake = 4; //觉醒等级
}

//魔物召唤礼战报
message HunterCallInfo {
    int32 monsterId = 1; //魔物Id
    string resVo = 2; //奖励信息
    FightPlayerInfo callPlayer = 3; //召唤者信息
    repeated FightPlayerInfo helpers = 4; //帮助者信息
}

//---------------------------------------------------------玩家对玩家                reportType = 1-----------------------------
message PvpFightReport {
    int32 fightType = 1; // 我方进攻还是防守
    int32 fightResult = 2; // 战斗结果  1-失败,2-成功,相对于进攻方
    FightPlayerInfo atkPlayer = 3;
    FightPlayerInfo defPlayer = 4;
    RewardInfoForReport reward = 5; // 奖励信息
    repeated HeroInfoForReport atkHeros = 6; // 攻击方英雄信息
    repeated HeroInfoForReport defHeros = 7; // 防守方英雄信息
    int32 wonderId = 8; //奇观Id
    int32 cityState = 9; //0-非城池战 1-城池站,就是是不是攻击主堡
    int32 worldCastleId = 10; // 外城城池id
    int32 worldCastleLv = 11; // 战斗之前的外城城池等级
    int32 farm = 12; // 是不是采集,0否,1是
    string plunderRes = 13; // 掠夺的资源,需要发给双方
    int32 defResProtect = 14; //防守方是否新手资源保护
    int32 wallBuildingLv = 15; //城墙建筑等级
    int32 resBobFight = 16; //是否打劫资源线战斗
    int32 worldCheckPointId = 17; //关卡Id
    int32 allianceBuildId = 18; //联盟建筑Id
    int64 allianceBuildDurability = 19; //联盟建筑那就读
    string allianceShortName = 20; //联盟简称
    int32 resId = 21; //资源矿Id
    repeated SimpleHeroInfo atkBePrisonedHero = 22; // 进攻方被俘虏的英雄
    repeated SimpleHeroInfo defBePrisonedHero = 23; // 防守方被俘虏的英雄
    int32 defPrisonerNum = 24; // 防守方监狱里囚犯数量
    int32 defCastleLv = 25; // 防守方主堡等级
    int32 canChangeFlag = 26; // 能否修改旗帜
    int32 resPointId = 30; //资源点Id
    int32 mapBuffId = 31; //地图buff点Id

    int32 atkMapBuffId = 40; //攻击方的buffId
    int32 defMapBuffId = 41; //防守方的buffId

    int32 atkAutoRecover = 50; //攻击方兵是否自动恢复满
    int32 defAutoRecover = 51; //攻击方兵是否自动恢复满

    int32 runType = 100; //行军类型
}

message SimpleHeroInfo {
    int64 heroId = 1;
    int32 heroProtoId = 2;
    int32 lv = 3;
    int32 star = 4;
    int32 awake = 5;
    int32 quality = 6;
}

//---------------------------------------------------------集结遗迹/奇观npc/内城迷雾npc   reportType = 4/18/19-----------------------------
message MassRuinsFightReport {
    int32 fightResult = 2; // 战斗结果:  1-失败,2-成功,相对于进攻方
    FightPlayerInfo atkPlayer = 3;
    FightPlayerInfo defPlayer = 4;
    RewardInfoForReport reward = 5; // 奖励信息
    repeated HeroInfoForReport atkHeros = 6; // 攻击方英雄信息
    repeated HeroInfoForReport defHeros = 7; // 防守方英雄信息
    int32 wonderId = 8; //奇观Id
    int32 worldCheckPointId = 9; //关卡Id
    int32 resId = 10; //资源矿Id
    int32 enemySoliderId = 11; //贼兵配置Id

    int32 atkMapBuffId = 40; //攻击方的buffId
    int32 atkAutoRecover = 50; //攻击方兵是否自动恢复满
}

message PveRobFightReport {
    // 内城PVE拦路怪战报
    int32 robProtoId = 1;
    int32 fightResult = 2;
    FightPlayerInfo atkPlayer = 3;
    RewardInfoForReport reward = 5; // 奖励信息
    repeated HeroInfoForReport atkHeros = 6; // 攻击方英雄信息
    repeated HeroInfoForReport defHeros = 7; // 防守方英雄信息
}

//---------------------------------------------------------魔物猎杀             reportType = 3-----------------------------
message HunterFightReport {
    HunterFightInfo hunterFightInfo = 1; //猎杀战斗信息

    repeated HeroInfoForReport heros = 2; //我方英雄数据
    int32 kingExp = 3; //领主经验
    string resVo = 4; //资源奖励信息
    string finishResVo = 5; //最后一击奖励格式
    string allianceResVo = 6; //联盟礼物奖励（非奖励格式）
    int32 photoId = 7; //领主头像
    int32 kingExpAfterFight = 8; // 打架后的领主经验
    int32 kingLvAfterFight = 9; // 打架后的领主等级
    int32 jjcScore = 10;
    int32 pveBuffId = 11; // pve内城buffId,若无则为0
    PhotoViewInfo photoInfo = 12; //领主头像

    int32 fightTime = 19; // 战斗时间
    int64 fightDetailId = 20; //战报详情Id
}

//---------------------------------------------------------运输战报             reportType = 4-----------------------------
message TransportReport {
    int64 transportPlayerId = 1; //运输玩家Id
    string transportPlayerName = 2; //运输玩家的名字
    string transportPlayerShortName = 3; //运输玩家的简称
    int32 transportPosX = 4; //运输玩家的坐标
    int32 transportPosY = 5; //运输玩家的坐标
    int64 beTransportPlayerId = 6; //被运输玩家Id
    string beTransportPlayerName = 7; //被运输玩家的名字
    string beTransportPlayerShortName = 8; //被运输玩家的简称
    int32 beTransportPosX = 9; //被运输玩家的坐标
    int32 beTransportPosY = 10; //被运输玩家的坐标
    int64 allianceId = 11; //联盟ID
    string allianceName = 12; //联盟名称
    string allianceShortName = 13; //联盟简称
    string resVo = 14; //运输资源
    int32 transportTime = 15; // 运输时间
    PhotoViewInfo transportPlayerPhotoInfo = 18;
    PhotoViewInfo beTransportPlayerPhotoInfo = 19;
}

//---------------------------------------------------------采集战报             reportType = 5-----------------------------
message CollectReport {
    string resVo = 1; //获得的资源
    repeated HeroInfoForReport heros = 2; //英雄信息
    int32 resType = 3; //资源类别
    int32 resLv = 4; //资源点等级
    int32 farmTime = 5; // 采集时间
    int32 farmAddressX = 6; // 采集地点X坐标
    int32 farmAddressY = 7; // 采集地点Y坐标
    int64 resLimit = 9; // 资源储量限制,无的话填-1
    int64 origin = 10; // 资源已有量,采集结算前
    int64 target = 11; // 采集计划获得的产量(未考虑储量限制的情况下)
    int64 cutDown = 12; // 由于资源储量限制被削减的采集量,仅资源
    int32 resId = 13; //资源Id
}

//---------------------------------------------------------被侦察战报                          -----------------------------
message BeScoutReport {
    int32 result = 1; //1 被侦察成功 2 被侦察失败
    FightPlayerInfo playerInfo = 2; //侦察玩家信息
    int32 cellType = 3; // 侦察的地块类型 1 资源点 3 遗迹 4 玩家 5 奇观 6 空地 9 据点
    int32 relicId = 4; // 遗迹Id
    int32 strongholdLv = 5; // 据点等级
    int32 resType = 6; //资源类别
    int32 resLv = 7; //资源点等级
    int32 beScoutTime = 8; // 被侦查时间
    int32 beScoutAddressX = 9; // 被侦查地点X坐标
    int32 beScoutAddressY = 10; // 被侦查地点Y坐标

    int32 runType = 30;
}

//---------------------------------------------------------侦察战报-----------------------------
message ScoutReport {
    int32 result = 1; // 1 侦察成功 2 侦察失败
    int32 cellType = 2; // 侦察的地块类型 1 资源点 4 玩家 6 空地
    int32 accurate = 3; // 是否是精确值,1精确值,0不是
    int32 lv = 4; // 每1级侦查效果对应于1个二进制位,1,2,4,8,16...
    int32 resType = 5; //资源类别
    int32 resLv = 6; //资源点等级
    string reward = 7; // 城内资源
    string canPlunderRes = 8; //可掠夺资源
    repeated TerritoryBuilding territoryBuilding = 12; // 领地建筑
    repeated int32 castleBuffs = 13; // 城池Buff效果值
    ScoutForceInfo defForce = 14; // 防守部队 侦察等级没到或没有的没有
    repeated IntToIntKV effect = 20; // 英雄攻防的效果加成_类型和值
    int64 rsNumInCastle = 21; // 主堡里的预备兵数量
    int32 worldCastleId = 22; // 外城城池id

    int32 runType = 30;
}

//侦察玩家信息
message ScoutPlayerInfo {
    FightPlayerInfo playerInfo = 1; // 玩家(集结手)信息
    int32 laridState = 2; // 领主状态 0-不明 1-行军中 2-被抓 3-藏兵 4-城内集结 5-死亡 6-城内
}

//领地强化
message TerritoryEffectInfo {
    int32 territoryEffectNum = 1; //领地强化数量 没有强化开启填0
    repeated TerritoryEffect territoryEffect = 2; //领地强化详情
}

message TerritoryEffect {
    int32 protoId = 1; //领地强化id
    int32 add = 2; //强化万分比
}

//城墙耐久
message TerritoryDurable {
    int32 durableRate = 1; //万分比
    int32 totalDurable = 2; //总耐久  侦察等级没到不填
}

//陷阱
message ScoutTrapsInfo {
    int32 type = 1; //1-总数显示模糊值，陷阱列表不显示 2 总数和陷阱列表显示模糊 3 都是精确值
    int32 trapCount = 2; //陷阱总数
    repeated ScoutTrap scoutTrap = 3; //侦察等级没到不显示
}

message ScoutTrap {
    int32 protoId = 1; //陷阱id
    int32 count = 2; //数量
}

//侦查部队
message ScoutForceInfo {
    ScoutPlayerInfo playerInfo = 1; //玩家信息
    ScoutHerosInfo heroInfo = 2; //英雄信息
    ScoutSoliderInfo soliderInfo = 3; //士兵信息

    int64 power = 5; // 部队战力
}

//侦查英雄
message ScoutHerosInfo {
    int32 herosNum = 1; // 英雄数量
    repeated HeroInfoForReport heros = 2; // 英雄详情 侦察等级没到的话没有
}

//侦察士兵
message ScoutSoliderInfo {
    int32 type = 1; //1-总数显示模糊值，部队列表不显示 2 总数和部队列表显示模糊 3 都是精确值 4、兵种类别
    int32 soliderCount = 2; //部队总数
    repeated ScoutSoliderByArmyType scoutSoliderByArmyType = 3; //侦查的士兵类别
    repeated ScoutSolider scoutSolider = 4; //侦察士兵部队
}

message ScoutSoliderByArmyType {
    int32 armyType = 1; //兵种
    int32 count = 2; //数量
}

message ScoutSolider {
    int32 protoId = 1; //id
    int32 count = 2; //数量
}

//领地建筑
message TerritoryBuilding {
    int32 buildId = 1; //陷阱id
    int32 lv = 2; //数量
}

message HunterFightInfo {
    int32 monsterId = 1; //魔物模板Id
    int64 monsterLeftHp = 2; //魔物本次战斗后剩余血量
    int64 bloodConsumption = 3; //消耗血量
    int32 consume = 4; //行动力消耗
    int32 fightTimeOut = 5; // 是否打到了回合耗尽 0-是 1-否
    int64 id = 6; //唯一Id
}

message FightInfoForReport {
    FightPlayerInfo fightPlayerInfo = 1; //玩家信息
    repeated SoliderInfoForReport soliders = 3; //玩家部队信息
    repeated KillInfoForReport killInfos = 4; //击杀信息
}

message KillInfoForReport {
    int32 killSoliderId = 1; //击杀的士兵Id
    int32 killSoliderNum = 2; //击杀的士兵数量
}

message FightPlayerInfo {
    string name = 2; //玩家名字
    int32 photo = 3; //玩家头像
    int32 posX = 4; //玩家坐标X
    int32 posY = 5; //玩家坐标Y
    int32 level = 6; //玩家等级
    int32 vipLevel = 7; //玩家Vip等级
    int64 id = 8; //玩家ID
    int64 allianceId = 9; //联盟ID
    string allianceName = 10; //联盟名称
    string allianceShortName = 11; //联盟简称
    int32 allianceRnum = 12; // 联盟阶级
    int32 countryPos = 13; //国家官职
    int32 jjcScore = 14;
    int32 belongState = 15;
    PhotoViewInfo photoInfo = 16; //玩家头像
}

//战报中奖励信息
message RewardInfoForReport {
    int32 kingExp = 1; //君主经验
    string resVo = 2; //资源奖励信息
}

//英雄数据
message HeroInfoForReport {
    int32 isLarid = 5; //是否是领主
    int32 curExp = 6; //当前经验
    int32 addExp = 7; //增加的经验
    int32 expOverFlow = 8; //经验是否溢出
    int32 originHp = 9; // 战前血量
    int32 afterHp = 10; // 战斗后血量
    int32 estimateMaxHp = 11; // 估计的最大带兵量
    int32 recoverHp = 12; //回复血量
    int64 hurt = 13; //伤害

    HeroInformationForProperties heroInformationForProperties = 20;
}

//巨龙数据
message DragonInfoForReport {
    int32 protoId = 1; //配置Id
    int32 lv = 2; //等级
    int32 awake = 3; //阶级
    string name = 4; //名字
    repeated IntToIntKV skills = 5; //技能
}

//士兵数据
message SoliderInfoForReport {
    int32 protoId = 1; //配置ID
    int32 totalNum = 2; //总兵力
    int32 woundedNum = 3; //伤兵量
    int32 diedNum = 4; //死兵量
}


message EasyFightInfo {
    int32 readState = 1; //阅读状态 0-未读 1-已读
    int32 fightType = 2; //战斗类型  1-攻击别人  2-防守
    int32 fightTime = 3; //战斗时间
    int32 fightAddressX = 4; //战斗地点X坐标
    int32 fightAddressY = 5; //战斗地点Y坐标
    int32 fightResult = 6; //战斗结果  1-进攻方全灭  2-防守方全灭  3-规定回合未结束
    repeated BattleHeroInfo myHeroInfo = 7; //我方阵容信息
    int32 myForceAllBingli = 8; //我方本部队总兵力(战斗前)
    int32 myAfterBingli = 9; //我方本部队总兵力(战斗后)
    repeated BattleHeroInfo otherHeroInfo = 10; //敌方阵容信息
    int32 otherForceAllBingli = 11; //敌方本部队总兵力(战斗前)
    int32 otherAfterBingli = 12; //敌方本部队总兵力(战斗后)
    int64 detailFightInfoId = 13; //详细战报的ID
    int64 easyFightInfoId = 14; //简单战报的ID
    string myName = 15; //我的名字
    string otherName = 16; //敌方玩家名
    string otherAllianceName = 17; //敌方玩家帮派名
    int32 gongchengNum = 18; //攻城值
    int32 isOccSuc = 19; //是否成功占领  0-没有  1-成功占领
    int64 walkId = 20; //本场战斗是哪次行军引起的
    string fightAddressName = 21; //战斗地点的名字
    string occName = 22; //被沦陷的人名字 -- (如果结尾是&表示是盟主)
    string allianceShortName = 23; //敌军帮派简称
    int32 occErrorCause = 24; //战斗胜利但是没有成功占领的原因  0-正常  1-因为地块已达到上限,所以无法占领
    int32 pohuaiGongxun = 25; //破坏获得的荣誉值
    int32 pohuaiParam = 26; //破坏获得的荣誉值时候的百分比
    string myAllianceName = 27; //我方帮派名字
    string myAllianceShortName = 28; //我方帮派简称
    string atkFaceProto = 29; //进攻方头像
    string defFaceProto = 30; //防守方头像
}

message BattleHeroInfo {
    int32 address = 1; //位置
    int64 heroId = 2; //ID
    int32 protoId = 3; //模版ID
    int32 lv = 4; //等级
    int32 advLv = 5; //升阶
    int32 shangBing = 6; //伤兵数量
}

// 用于计算英雄属性需要的字段,不应该缺字段,唯一id除外,拿不到填0,尽量填
message HeroInformationForProperties {
    int64 heroId = 1; // 唯一编号
    int32 heroProtoId = 2; // 模板编号
    int32 lv = 3; // 等级
    int32 advLv = 4; // 星级
    int32 awake = 5; // 进阶等级
    int32 skill1 = 6; // 技能
    int32 quality = 7; // 品质
    int32 subQuality = 8; // 小品质,也称段
    repeated IntToIntKV fightEffects = 14; // 战斗的时候会用到的科技效果
    int32 slgSkill1 = 15; // slg技能1
    int32 slgSkill2 = 16; // slg技能2
    int32 slgSkill3 = 17; // slg技能3
    int32 awakeSkill = 18; // 觉醒技能
    repeated int32 heroEquip = 19; // 英雄装备,全发,需要自己过滤掉色系不同的
    int32 breakLv = 20; // 突破等级
    int32 eliSkill1 = 21; // 三消技能
    int32 slgSkill4 = 22; // slg技能4
}

message DetailedQueryHerosInFo {
    int64 heroId = 1; // 唯一编号
    int32 heroProtoId = 2; // 模板编号
    int32 heroTrainCampPos = 3; // 英雄训练营格子位置,0表示不在格子上
    int32 lv = 4; // 等级
    int32 advLv = 5; // 星级
    int32 awake = 6; // 进阶等级
    int32 breakLv = 7; // 突破等级
    int32 exp = 11; // 经验
    int32 skill1 = 15; // 技能
    int32 eliSkill1 = 16; // 三消技能
    int32 slgSkill1 = 20; // slg技能1
    int32 slgSkill2 = 21; // slg技能2
    int32 slgSkill3 = 22; // slg技能3
    int32 slgSkill4 = 23; // slg技能4
    int32 intSkillId1 = 31; // 武将内政技能1
    int32 intSkillId2 = 32; // 武将内政技能2
    int32 intSkillId3 = 33; // 武将内政技能3
    int32 intSkillId4 = 34; // 武将内政技能4
    int32 intSkillId5 = 35; // 武将内政技能5
    int32 awakeSkill = 36; // 觉醒技能
    int32 starLvUpEndTime = 38; // 升星结束时间
    int32 superLvUpEndTime = 39; // 升阶结束时间
    int64 heroPower = 40; // 英雄实力
    int32 heroPveEnergy = 47; // PVE玩法行动力
    int32 lastHeroPveEnergyTime = 48; // 上次回复时间
    int32 quality = 49;
    int32 state = 50; // 英雄状态,监狱使用
    int32 stateStartTime = 51; // 状态变更起始时间
    int32 stateEndTIme = 52; // 状态变更结束时间
    string ransom = 53; // 赎金
    int32 subQuality = 55; // 小品质,也称段
    int32 resetCount = 56; //  重置次数
    int32 lastResetTime = 57; // 最近一次重置时间
    int32 originLevel = 58; // 放入训练营后原等级
    repeated IntToIntKV fightEffects = 61; // 战斗的时候会用到的科技效果


}

//英雄状态信息
message HeroStateInFo {
    int64 heroId = 1; // 唯一编号
    int32 heroProtoId = 2; // 模板编号
    int32 mainHeroState = 3; // 领主属性状态字段 0-不是领主 1-正常状态领主 2-等待逃脱中 3-等待处决 4-可处决 5-吃毒蘑菇中 6-死亡中 7-可领取复活 8-藏宝地穴中 9-虚拟英雄 用作buff填充
    int32 heroPosState = 4; //废弃 英雄位置状态 0、在主堡内 1、在大地图上 2、在内城中
    int32 intHeroAddress = 5; // 非0表示武将在执政中,这个值表示执政位ID
    int32 mainHeroStartTime = 6; // 领主状态的开始时间
    int32 mainHeroOverTime = 7; // 领主状态的结束时间
    int32 belongNpcCastle = 8; //归属的NPC城池Id
    int32 inNpcCastleDef = 9; //在npc城池防守布阵中
    string ransom = 11; // 赎金
    string reward = 12; // 悬赏
    int64 prisonHostPlayerId = 13; // 关押者玩家id
    string prisonHostPlayerName = 14; // 关押者玩家名
    int32 prisonHostPhotoId = 15; // 关押者头像
    int32 prisonHostScore = 16;
    int32 hurtOverTime = 17; //重伤结束时间
    int32 belongState = 18;
}

// 玩家在线活动信息
message OnlineHeroInfo {
    int64 onlineHeroFinishTime = 1; //活动结束时间
    int32 currentStageId = 2; // 当前阶段id
    int64 currentFinishTime = 3; //当前阶段结束时间
}

message BuildingInFo {
    int32 type = 1;
    int32 lv = 2;
    int32 completeTime = 3;
    int32 state = 4;
    int32 x = 5; // 建筑所在位置的x坐标
    int32 y = 6; // 建筑所在位置的y坐标
    int32 destroyTime = 7;
    int64 helpId = 8; // 帮助里面的唯一ID
    int64 buildingId = 9; // 建筑唯一ID
    int32 direction = 10; // 建筑的方向
}

message CellInfo {
    int32 x = 1;
    int32 y = 2;
    int32 type = 3;
    int32 belong = 4;
    int32 isBuilding = 5;
    int32 buildingTime = 6;
}

message ExpeditionInFo {
    int32 num = 1;
    int32 allNum = 2;
    int32 castleType = 3;
    int64 id = 4;
    string castleName = 5;
    int32 distance = 6; //*100 原为float类型
}

message HeroLevelUpInFo {
    int64 heroId = 1;
    int32 heroProtoId = 2;
    int32 lv = 3;
    int32 attack = 4; //原为float 现*100为int
    int32 magic = 5; //原为float 现*100为int
    int32 defence = 6; //原为float 现*100为int
    int32 speed = 7; //原为float 现*100为int
    int32 attCity = 8; //原为float 现*100为int
    int32 points = 9;
    int32 experience = 10;
}

//显示内容：
//1. 自己的主城、分城、要塞、军营、码头
//2. 同盟成员的主城、码头
//3. 同盟下级成员的主城、码头
//4. 其他玩家的码头
//5. 同盟所属的NPC城池、关卡
//6. 非同盟所属的NPC城池、关卡
message ShowMapInfo {
    int32 x = 1; //坐标X
    int32 y = 2; //坐标Y
    int32 type = 3; //详见LandBase中类型，但只会包括:100-主城;106-玩家要塞;107-玩家军营;201~205、250-NPC城池;301-野外要塞;302-野外军营;303-关卡;304-码头
    int32 relation = 4; //关系:0-自己;1-同盟成员;2-同盟下级成员;3-其他玩家;4-同盟所属;5-非同盟联盟
    string alceName = 5; //如果是NPC城池或关卡，并且被占领，则会返回占领联盟的名称
    string alceShortName = 6; //如果是NPC城池或关卡，并且被占领，则会返回占领联盟的简称
    string taiShouName = 7; //如果是NPC城池或关卡，被占领城主，并且任命城主，则会返回被任命的玩家名称
}

message QueryRankInfoRt {
    string name = 1;
    int32 photoProtoId = 2;
    int64 score = 3;
    string allianceShortName = 4;
    int64 playerId = 5; //玩家ID
    int32 curentPos = 6; // 官职
    string nickName = 7; // 玩家昵称
    int32 robotProtoId = 8; // 可能排行榜里的是机器人，发一个模板id
    string allianceName = 9; // 联盟全称
    int32 floor = 10; //最新推图关卡
    int32 rank = 11; //排名
    int64 dragonId = 12; //巨龙唯一Id，查询用
    int32 dragonProtoId = 13; //巨龙模板
    int32 dragonAwake = 14; //巨龙阶级
    string dragonName = 15; //巨龙名称
    int32 dragonfloor = 16; //最新爬塔关卡
    int32 jjcScore = 19; // 竞技场积分
    repeated HeroInfo heroInfo = 20; // jjc布阵信息
    int32 belongState = 21; // 联盟所属洲
    PhotoViewInfo photoInfo = 22;
    int64 allianceId = 23;
    HeroInformationForProperties strongestHero = 24; // 最强的英雄信息
    repeated HeroTinyInfo battleHeroArray = 25; // 英雄阵容
    int32 anonymous = 26; // 匿名开启状态
}

message HeroTinyInfo {
    int32 protoId = 1;
    int32 level = 2;
    int32 awake = 3;
    int32 x = 4; // 占位,客户端发过来是几就是几
}

message BuildCityInfo {
    int32 x = 1; //建造中城池的坐标X
    int32 y = 2; //建造中城池的坐标Y
    int32 completeTime = 3; //建造中城池完成时间
    int32 type = 4; //正在建造的类型
    string name = 5; //建造的城池的名字
}

message MarkInfo {
    int32 landX = 1;
    int32 landY = 2;
    int32 areaNo = 3; // 服务区ID
    int32 group = 4; // 分组类型
    string name = 5; // 名字
    int64 id = 6; // 标记点唯一ID
}

message ConscriptionInfo {
    int64 heroId = 1;
    int32 num = 2;
}

message AllianceQueryReqListInfo {
    int64 id = 1; //玩家ID
    string name = 2; //玩家名称
    int32 photoProtoId = 3; //玩家头像
    int64 fightValue = 6; //战斗力
    int32 jjcSocre = 7;
    int32 belongState = 8;
    int32 photoFrameProtoId = 9;//头像框ID
}

message AllianceQueryPlayerInfo {
    int64 id = 1; //玩家ID
    string name = 2; //玩家名称
    int32 photoProtoId = 3; //头像模版ID
    int64 ctrbtTotal = 4; //总贡献
    int64 ctrbtWeek = 5; //本周贡献
    int64 mertsWeek = 6; //本周功勋
    int64 powerValue = 7; //玩家战斗力
    int32 landX = 9; //坐标X
    int32 landY = 10; //坐标Y
    int32 isOnline = 12; //玩家是否在线：0-不在线；1-在线
    repeated int32 positions = 13; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
    int32 tsLandX = 14; //如果是某个郡城的守，值为郡城的坐标X
    int32 tsLandY = 15; //如果是某个郡城的守，值为郡城的坐标Y
    int32 occupiedFlag = 16; //是否沦陷标志位：1-沦陷；0-没有沦陷
    int64 makeOverTime = 17; //如果是盟主会有执行盟主转让操作的时间戳
    string nickName = 18; //玩家昵称
    int32 weekResearchHonor = 19; //本周捐赠科技获得的贡献
    int32 weekHonor = 20; //本周获得的贡献
    int32 weekShalu = 21; //本周杀戮值
    int32 weekXisheng = 22; //本周牺牲值
    int32 weekPohuai = 23; //本周破坏值
    int32 lastOffTime = 24; // 上次离线时间
    int32 mapAreaNo = 25; // 玩家所属的服务器编号
    int32 monsterScore = 26; // 本日获得魔物积分
    int32 lastGetMonsterScore = 27; // 上次获得魔物积分时间
    int32 currentPos = 28; //当前官职
    repeated DiamondInfoChangeVo diamondInfo = 29; // 玩家特定途径获得钻石的记录
    int32 jjcScore = 30; // 竞技场积分
    int32 belongState = 31;
    int32 trustNum = 32; //托管数量
    PhotoViewInfo photoInfo = 33; // 头像
    int32 huoyueduValue = 34; // 活跃度
    int32 totalHuoyueduValue = 35; // 总活跃度
    repeated DiamondInfoChangeVo propQuickInfo = 36; // 玩家特定途径获得加速道具的记录
    int32 todayNewMemberActivity = 37;//新联盟活跃度---玩家活跃度
    int32 totalNewMemberActivity = 38;//新联盟活跃度---总活跃度
}

message AllianceQueryRelationInfo {
    int64 id = 1; //联盟ID
    string name = 2; //联盟名称
    string shortName = 3; //联盟简称
    int64 playerId = 5; //盟主ID
    string playerName = 6; //盟主名称
    int32 reservePlayers = 8; //联盟成员数
    int32 limitPlayers = 9; //成员上限
    int64 powerValue = 10; //联盟势力值
    int32 relationShipId = 11; //外交关系：1-友好；2-敌对
    int32 npcCityNum = 12; //占领的NPC城池数量
    int32 nextWaijiaoCount = 13; // 下次外交时间
    int32 belongState = 14;
}


message AllianceQueryLogInfo {
    int32 dt = 1; //日志记录时间戳
    int32 typ = 2; //日志类型编号
    int32 photoProtoId = 3; //头像Id
    repeated string lgs = 4; //参数数组
    int32 jjcScore = 5;
    PhotoViewInfo photoInfo = 6; // 头像
}

// 1.攻城略地   Value1:破敌值;Value2:攻城值;Value3:战损值;Value4:0
// 2.联盟战争   Value1:荣誉值;Value2:破敌值;Value3:攻破军营/要塞;Value4:耐久值
message AllianceMissionProInfo {
    int32 photoProtoId = 2; //玩家头像模版ID
    int64 playerId = 3; //玩家ID
    string playerName = 4; //玩家名字
    int32 value1 = 5; //统计值1
    int32 value2 = 6; //统计值2
    int32 value3 = 7; //统计值3
    int32 value4 = 8; //统计值4
    repeated int32 positions = 9; //职位
}

message AllianceInfo {
    int64 id = 1; //联盟Id
    string name = 2; //联盟名称
    string shortName = 3; //联盟简称
    int32 joinAllianceTime = 4; // 加入联盟时间
    repeated int32 positions = 5; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
    int32 color = 6; //旗帜的颜色（没有设置过，则值为0）
    int32 style = 7; //旗帜的样式（没有设置过，则值为0）
    int32 effect = 8; //旗帜的图案（没有设置过，则值为0）
    int32 allianceLv = 9;
    int32 nextConveneTime = 10; // 被任命后的召集时间
    int32 lastTpTime = 11; // 上次回城时间
    int32 allianceBuildNum = 12; // 建造完毕的据点数
    repeated AllianceMarkEnum allianceMark = 14; // 联盟标记
    repeated IntToIntKV allAllianceBuildNum = 15; // 联盟各类型的建筑数量
    int32 canPlayerTreasureTime = 20;
    int32 memberNum = 21; //联盟人数
    int32 newMemberActivityLv = 22;//新联盟活跃度等级
}

message AllianceQueryWithStateInfo {
    int64 id = 1; //联盟ID
    string name = 2; //联盟名称
    string shortName = 3; //联盟简称
    int64 playerId = 6; //盟主ID
    string playerName = 7; //盟主名称
    int32 reservePlayers = 8; //成员数
    int32 limitPlayers = 9; //数量上限
    int32 belongState = 10;
}

message AllianceMissionInfo {
    int64 id = 1; //联盟目标ID
    int32 type = 2; //联盟目标类型：1-攻城掠地:攻打NPC城池；2-联盟战争:对某个联盟发动战争
    int32 x = 3; //【1-攻城掠地】的NPC城池坐标X
    int32 y = 4; //【1-攻城掠地】的NPC城池坐标Y
    int64 aid = 5; //【2-联盟战争】的联盟ID
    string allianceName = 6; //【2-战场杀敌】的联盟名称
    string allianceShortName = 7; //【2-战场杀敌】的简称名称
    int32 over = 8; //结束时间，单位:小时
    int32 endTime = 9; //发布的结束时间
}

message AllianceMissionRankInfo {
    int64 playerId = 1; //玩家ID
    string playerName = 2; //玩家名称
    int32 value = 3; //数值
    int32 rank = 4; //排名
    int32 belongState = 5;
}

message AllianceQueryMissionPaidInfo {
    int32 protoId = 1; //礼包模板ID
    int32 times = 2; //当日已购买次数
    int32 totalTimes = 3; //当日总购买次数
}


message AllianceExchangeDemandInfo {
    int64 demandId = 1; //需求ID（每个换卡需求的唯一ID）
    int64 playerId = 2; //玩家ID
    string playerName = 3; //玩家名称
    repeated int32 positions = 4; //职位
    int32 endTime = 5; //结束时间
    int32 protoId = 6; //模板ID
    int32 ownQty = 7; //背包中拥有的卡牌数量
    int32 donateQty = 8; //捐献卡牌：玩家捐献数
    int32 nowQty = 9; //收集进度：当前对方收集数
    int32 targetNum = 10; //收集目标数量
}


message ChestPrize {
    int32 protoId = 1; // 类型 -1铜钱 -2元宝 >0武将模板编号
    int32 num = 2; // 数量
}

// 宝箱信息
message ChestInfo {
    int32 freeCnt = 1; // 免费宝箱数量
    int32 freeTime = 2; // 免费宝箱刷新时间
    int32 killIsPrize = 3; // 是否已领取击杀宝箱
    int32 killNum = 4; // 击杀数量
}

message AchievementReportVo {
    int32 type = 1;
    string data = 2;
    string expires = 3;
    int32 bcover = 4;
}

// 进入聊天室界面
message TalkInfo {
    int64 chatRoomId = 1; // 聊天室id
    int32 chatType = 2; // 聊天室类型
    string chatRoomName = 3; // 聊天室名字
    string lastMessage = 4; // 最新一句聊天内容
    int32 readState = 5; // 是否已读
    int32 lastTime = 6;
    repeated int32 photoProtoId = 7; // 头像id
    int64 otherPlayerId = 8; // 如果是私聊  对方玩家ID
    int32 isOnline = 9; // 如果是私聊  对方是否在线
    string allianceName = 10; // 如果是私聊  对方的联盟名称
    string allianceShortName = 11; // 如果是私聊  对方的联盟简称
    string masterName = 12; // 群主名字
    int32 vipLv = 13; // VIP等级
    int32 areaNo = 14; // 服务器编号
    int64 fightValue = 15; // 战斗力
    int32 playerNum = 16; // 群内玩家数
    int32 belongState = 17;
}

// 聊天室信息
message ChatRoomMessage {
    int64 messageId = 1; // 消息唯一Id
    int64 chatRoomId = 2; // 聊天室唯一Id
    string name = 3; // 说话人
    string playerShortName = 4; // 角色昵称
    string allianceName = 5; // 联盟名称
    string allianceShortName = 6; // 联盟简称
    repeated int32 positions = 7; // 职位
    int32 showTime = 9; // 是否显示时间
    int32 photoProtoId = 10; // 头像
    string message = 11; // 内容
    int32 readType = 12; // 阅读方式
    repeated string params = 13; // 参数
    int32 messageType = 14; // 消息类型  1-普通消息  2-红包消息
    int32 redBagState = 16; // 红包类型 1-可领取 2-已领取 3-已过期 4- 已领完
    int32 office = 17; // 官职Id
    int32 vipLv = 18; // vip等级
    int32 areaNo = 19; // 服务器编号
    int32 belongState = 20;
}


message PlayerIds {
    string playerName = 1;
    int64 playerId = 2; // 玩家ID
}

//任务实例
message Task {
    int64 taskId = 1; // 任务唯一ID
    int32 taskProtoId = 2; // 任务模板ID
    int32 taskState = 3; // 任务状态 0-进行中 1-已完成 2-已领取奖励
    int64 taskFinish = 4; // 任务当前进度, 任务中间状态1
    int32 overTime = 5; // 任务过期时间 -1表示不限时
    int32 sideQuestProtoId = 6; // 支线任务模板id
    int32 cityId = 7; // 所属城池id
    int64 taskFinish102 = 8; // 任务中间状态2
    int64 taskFinish103 = 9; // 任务中间状态3
    int32 researchProtoId = 10; // 绑定的科技模板唯一id
}

//成就实例
message Achievement {
    int64 id = 1; // 成就唯一ID
    int32 protoId = 2; // 成就模板ID
    int32 state = 3; // 成就状态 0-进行中 1-已完成 2-已领取奖励
    repeated ProgressInfo allProgress = 4; // 成就当前进度
}

message ProgressInfo {
    int32 checkType = 1; //条件类型
    int32 progress = 2; //进度
}

// 进入邮件界面
message MailInfo {
    int64 mailId = 1; //邮件id
    int32 type = 2; //邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件 4、联盟邀请 5、普通战斗邮件 6、竞技场战斗邮件
    int64 playerId = 3; //发送者Id
    string playerName = 4; //发送者名字
    string playerNickName = 5; //发送者简称
    int64 allianceId = 6; //联盟ID
    string allianceShortName = 7; //联盟简称
    MailTitleAndCon mailTitleAndCon = 8; //邮件信息
    string attach = 9; //邮件附件
    int32 isRead = 10; //邮件是否已读 0、未读 1、已读
    int32 isDraw = 11; //是否领取       0、有道具且未领取 1、无道具或已领取
    int32 sendTime = 12; //发送时间
    int32 isSign = 14; //是否收藏
    BattleReportInfo report = 15; //战报基本信息
    int32 photoId = 16; //头像Id
    int32 jjcScore = 17;
    int64 extendId = 18; //扩展Id，用于查询
    int32 belongState = 19;
    PhotoViewInfo photoInfo = 20;
    string extend1 = 21; // 扩展字段 当前用于关联军事设施战报
    int32 iconId = 22;  // 图标
}

message MailTitleAndCon {
    int32 readType = 1; //邮件结构体的读取类型 1-读lan (一般都是游戏内发的) 2-直接读取内容(一般都是后台发的)
    LanFormat title = 2; //邮件标题
    LanFormat content = 3; //邮件内容
}

message LanFormat {
    string lan = 1; //lan内容
    repeated string param = 2; //lan参数
}

// 详细的联盟玩家在线信息
message MemberPlayerInfo {
    int64 playerId = 1; //玩家id
    string playerName = 2; //名字
    repeated int32 positions = 4; //玩家联盟职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
    int32 isOnline = 5; //玩家是否在线
    int32 protoId = 6; //玩家头像id
    int32 belongState = 7;
}

// 联盟聊天内容信息
message AllianceChatMessage {
    int64 messageId = 1;
    string sendName = 2; // 发送人名字
    string message = 3; // 聊天内容
    MassGroup massGroup = 4; // 集结信息
    EasyFightInfo easyFightInfo = 5; // 分享战报
}

// 联盟统计信息
message AllianceCountInfo {
    int32 day = 1; //查询期间：0-今天；1-昨天
    int64 playerId = 2; //玩家ID
    string playerName = 3; //玩家名称
    int32 contributions = 4; //贡献
    int32 meritorious = 5; //功勋
    int32 landDurables = 6; //拆地值
    int32 cityDurables = 7; //攻城值
}

// 联盟邮件主题
message AllianceTopicInfo {
    int64 topicId = 1; //主题ID
    int32 type = 2; //主题类型：40-联盟全体成员 41-白虎团邮件 42-青龙团邮件 43-玄武团邮件 44-朱雀团邮件
    int64 playerId = 3; //发布的玩家ID
    string playerName = 4; //发布的玩家名称
    int32 photoProtoId = 5; //发布者的头像模版
    string title = 6; //发布标题
    int32 lastAt = 7; //最后一次回复时间
    int32 isRead = 8; //是否已经读取
    int32 isSign = 9; //是否收藏
}

// 联盟邮件回复
message AllianceReplyInfo {
    int64 replyId = 1; //回复的回复ID
    int64 playerId = 2; //回复的玩家ID
    string playerName = 3; //回复的玩家名称
    string playerShortName = 4; //回复的玩家昵称
    repeated int32 positions = 5; //回复者的职位
    int32 photoProtoId = 6; //回复者的头像模版
    string message = 7; //回复内容
    int32 replyAt = 8; //回复时间
    int32 vipLv = 9; //vip等级
    int32 curentPos = 10; // 官职
}

// 请求捐卡信息
message AllianceQueryDemandInfo {
    int64 demandId = 1; //需求ID（每个换卡需求的唯一ID）
    int32 protoId = 2; //模板ID
    int32 endTime = 3; //结束时间
    int32 qty = 4; //收集数量
    int32 dmQty = 5; //需求数量
}

// 头像信息
message PhotoInfo {
    int32 protoId = 1;
    int32 isUse = 2; //0 未使用 1 使用
    int32 isClear = 3; //0 未解锁 1 解锁
    int32 gainTime = 4;
    int32 overTime = 5; //消失时间，0代表永久
}

// 头像显示信息
message PhotoViewInfo {
    int32 photoProtoId = 1; // 头像模板Id
    int32 photoFrameProtoId = 2; // 相框模板Id
    string pictureUrl = 3; // 头像URL地址
    int32 privilege = 4; // 渠道特权, eg. 1'wechat 2'QQ
}

// 英雄三消stash信息
message HeroBasicInfo {
    int64 atkW = 1; // 攻击  +
    int64 defW = 2; // 防守   +
    int64 hpW = 3; // 生命  +
    int64 baoJiW = 4; // 暴击  +
    int64 hit = 5; // 命中  +
    int64 baoJiHurt = 6; // 暴击伤害 +
    int64 miss = 7; //  闪避  +
    int64 colourAtk = 8; //  属性攻
    int64 colourStreng = 9; //  属性减抗
    int64 waterDef = 10; //  水抗
    int64 fireDef = 11; //  火抗
    int64 windDef = 12; //  木抗
    int64 lightDef = 13; //  光抗
    int64 darkDef = 14; //  暗抗
    int64 slgSoldierCarry = 15; // slg带兵量 +
    int64 slgAtkRate = 16; //slg国力系统攻击力加成
    int64 slgHpRate = 17; //slg国力系统血量加成
}

//==============================================================================================================================================
// ====== 主推消息.消息头从3000开始=================================================================================================================================
//==============================================================================================================================================
// msgType = 3000
// 服务器 -> 客户端
// 刷新资源
message RefreshMoney {
    ResourceInfoRt res = 1;
}

// msgType = 3001
// 服务器 -> 客户端
// 开始服务器维护
message EnterMaintenance {
    int32 enterMark = 1;
}

// msgType = 3004
// 服务器 -> 客户端
// 武将属性变化推送
message HeroStateChange {
    repeated HeroStateInFo heros = 1;
}

// msgType = 3009
// 服务器 -> 客户端
// 产量变化主推
message YieldChange {
    int32 addWood = 1;
    int32 addIron = 2;
    int32 addFood = 3;
    int32 addStone = 4;
    int32 addCoin = 5;
    int32 useFood = 6; //耗粮数量
    int32 calcTime = 7; //计算时间点
    int64 wood = 11;
    int64 food = 12;
    int64 iron = 13;
    int64 stone = 14;
    int64 coin = 15; // 铜钱
    int64 oldDragonCoin = 16; // 古龙币
    int64 reliableStone = 17; // 可靠石头
    int64 reliableFood = 18; // 可靠粮食
    int64 reliableWood = 19; // 可靠木头
    int64 reliableCoin = 20; // 可靠木头
    int64 reliableIron = 21; // 可靠木头
    int64 mithril = 22; // 秘银
}

// msgType = 3010
// 服务器 -> 客户端
// 武将信息变化主推
message HeroChange {
    repeated DetailedQueryHerosInFo heroInfo = 1; //武将信息
}

// msgType = 3011
// 服务器 -> 客户端
// 问卷完成推送
message SurveyCompleteNotice {
    int64 surveyId = 1; // 完成的问卷id
    repeated string sid = 2;
}

// msgType = 3012
// 客户端 -> 服务器
// 贞德点赞
message AssistSummonMailNotice {
    string playerName = 1;
    int64 playerId = 2;
    int32 assistType = 3;
}

// msgType = 3013
// 客户端 -> 服务器
// 联盟聊天点赞
message AssistAllianceChatNotice {
    string playerName = 1;
    int64 playerId = 2;
}

// msgType = 3014
// 服务器 -> 客户端
// 土地归属发生变化主推
message UpdateLandBelong {
    repeated NewEveryLandInfo lands = 1; //格子信息
    repeated CellPoint dels = 2; // 需要恢复成原始状态的地块坐标
}

message CellPoint {
    int32 x = 1;
    int32 y = 2;
}

// msgType = 3015
// 服务器 -> 客户端
// 令牌增加发生变化主推
message DecreeChange {
    int32 time = 1; //上次政令结算时间
    int32 decreeLimit = 2; //政令数量上限
    int32 decreeNum = 3; //当前政令数量
    int32 changeNum = 4; // 改变量
}

// msgType = 3018
// 服务器 -> 客户端
// 联盟信息变化推送
message AllianceInfoChange {
    int32 infoChangeType = 1; //联盟信息变化类别 1、清除联盟数据 2、联盟名称 4、联盟简称 8、联盟公告 16、联盟人数 32、联盟旗帜
    int64 id = 2; //联盟Id
    string name = 3; //联盟名称
    string shortName = 4; //联盟简称
    string notice = 5; //联盟公告
    int32 memberNum = 6; //联盟人数
    int32 flagColor = 7; //联盟旗帜颜色
    int32 flagStyle = 8; //联盟旗帜样式
    int32 flagEffect = 9; //联盟旗帜图案
    repeated RedPointInfo redPoints = 13; //红点
    string systemNotice = 14; // 系统联盟公告
    int32 allianceFightApply = 15; //我的联盟联盟战报名状态
    int32 allianceLv = 16;
    int64 allianceExp = 17;
    int32 belongState = 18;
    int64 mainAllianceId = 19;
    int32 canPlayerTreasureTime = 20;
}

// msgType = 3023
// 服务器 -> 客户端
// 联盟职位变化
message AlliancePosChange {
    int64 id = 1; //联盟Id
    repeated int32 positions = 5; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
    int32 nextConveneTime = 6; // 被任命后的召集时间
}

// msgType = 3034
// 服务器 -> 客户端
// 活跃度变化
message HuoyueduChange {
    int32 huoyuedu = 1; // 活跃度
    int32 huoyueduTime = 2; // 当前活跃度任务创建时间
    int32 huoyueduCastleLv = 3; // 本次活跃度是几级的城堡领取的
}

// msgType = 3035
// 服务器 -> 客户端
// 任务变化
message TaskChange {
    repeated TaskOperation taskOperations = 1;
    int32 fromWorld = 2; // 区分是否来自地图服务器,仅用于排错
}

// msgType = 3037
// 服务器 -> 客户端
// 悬赏变化
message PollutedArmyChange {
    int64 armyId = 1;
    int64 pollutedId = 2;
    int32 smallMonsterNum = 3;
    int32 normalMonsterNum = 4;
    int64 endTime = 6;
    int32 bossX = 7;
    int32 bossY = 8;
    int32 pollutedProId = 9;
    repeated LongToStringKV members = 11; //成员id-名字  第一个是队长id
    int32 bossNum = 12;
}

// msgType = 3038
// 服务器 -> 客户端
// 探访神庙变化
message VisitQuestUpdate {
    VisitQuestInfo visitQuest = 1;
}

message TaskOperation {
    int32 operationType = 1; //1-新增了一个任务  2-完成了一个任务  3-任务信息发生改变 (进度改变)
    Task task = 2;
}

// msgType = 3039
// 服务器 -> 客户端
// 救援物资邮件id推送
message RescueEmailIdUpdate {
    int64 emailId = 1;
}

// msgType = 3040
// 服务器 -> 客户端
// 拜访神庙弹界面
message VisitQuestPop {
    int32 checkPop = 1; // 1-弹界面，2-不弹界面
}

// msgType = 3055
// 服务器 -> 客户端
// 游戏公告主推
message NoticeInfo {
    Notice noticeInfos = 1; //公告内容
    int32 noticeType = 2; //公告类型（1.屏幕中央 2.聊天框 4.屏幕下方）
    int64 playerId = 3; //玩家Id，代表发给个人还是全体
}


message Notice {
    int32 readType = 1; //邮件结构体的读取类型 1-读lan (一般都是游戏内发的) 2-直接读取内容(一般都是后台发的)
    string noticeLanId = 2; //公告内容lanId
    repeated string noticeParams = 3; //公告参数
    string rawLanId = 11;
}

// msgType = 3060
// 服务器->客户端
// 偷菜数据进游戏推送
message CabbageDataInfo {
    CabbageInfo cabbageInfo = 1;
}

// msgType = 3061
// 服务器->客户端
// 自动打野推送
message AutoFightCommonBossInfo {
    int32 autoState = 1; // 0-取消，1-开始
    int32 endReason = 2; // 2-战斗失败，3-道具不足，4-权限不足，5离线
    repeated IntToIntKV itemList = 3;
}

// msgType = 3062
// 服务器->客户端
// 充能buff变更
message ChargeBuffChange {
    repeated ChargeBuffInfo chargeBuff = 1;
}

// msgType = 3073
// 服务器 -> 客户端
//  解散聊天室
message RoomDel {
    int64 roomId = 1; //聊天室id
}

// msgType = 3076
// 服务器 -> 客户端
// 群组聊天消息主推
message GroupChatInfo {
    ChatInfo message = 1; //消息
}

// msgType = 3079
// 服务器 -> 客户端
// 私聊消息主推
message PrivateChatInfo {
    repeated ChatInfo message = 1; //消息
}

// msgType = 3080
// 服务器 -> 客户端
//  接收聊天消息
message NewChatMessage {
    ChatInfo chatInfo = 1; //聊天消息
}

// msgType = 3081
// 服务器 -> 客户端
//  玩家物品背包变化
message BagChange {
    repeated BagChangeInfo changeInfo = 1;
}

message BagChangeInfo {
    int32 changeType = 1; //变化的类型  1-新增/变化  2-减少
    BagInfo bagInfo = 2; //背包道具信息
}

message SoldierCardInfo {
    int64 id = 1; // 兵卡id
    int32 lv = 2; // 兵卡等级
    int32 exp = 3; // 兵卡经验
    int64 heroId = 4; // 佩戴此兵卡的英雄
    int32 equipProtoId = 5; // 兵卡道具ID
}

// msgType = 3100
// 服务器 -> 客户端
// 联盟邮件新主题或新回复通知
message AllianceTopicReplyChange {
    int64 topicId = 1; //新消息邮件主题ID
}

message RemoveXY {
    int32 x = 1;
    int32 y = 2; //玩家取得正在造的建筑名字
}

// msgType = 3111
// 服务器 -> 客户端
// 聊天气泡更改
message ChatBubbleChange {
    int32 protoId = 1;
    int32 gainTime = 2;
    int32 overTime = 3;
}

// msgType = 3112
// 服务器 -> 客户端
// 当日采集次数变化
message ChangePickUpCount {
    int32 pickUpCount = 1;
    int32 nextRefreshTime = 2;
}

// msgType = 3113
// 服务器 -> 客户端
// 神庙信息变化
message ChangeNpcCityActivity {
    NpcCityActivity npcCityActivity = 1;
}

// msgType = 3114
// 服务器 -> 客户端
// 可打污染之地的等级变化
message ChangeCanFightPollutedLv {
    int32 pollutedLv = 1;
}

// msgType = 3121
// 服务器 -> 客户端
// 玩家科技信息变化
message ResearchChange {
    ResearchInfo research = 1;
}

message ResearchInfo {
    int32 researchId = 1; // 科技ID
    int32 researchLv = 2; // 科技等级
    int32 researchOverTime = 3; // 科技完成时间
    int64 helpId = 4; // 帮助里面的唯一ID
    int32 helpNum = 5; //帮助过的人数
    int32 usingRewardTime = 6; // 使用中的奖励时间
}

// msgType = 3122
// 服务器 -> 客户端
// 玩家获得帮助提示窗
message GetAllianceHelp {
    string helpPlayerName = 1; // 帮助人的名字
    int32 helpType = 2; // 被帮忙的类型
}

// msgType = 3123
// 服务器 -> 客户端
// 玩家兵量变化
message BarracksNumChange {
    repeated IntToLongKV soldier = 1; // 兵数量变化,key:SoldierID,value:数量
}

message BarracksInfo {
    int32 soldierId = 1; // 士兵模板ID
    int32 soldierNum = 2; // 士兵数量
    int32 overTime = 3; // 造兵结束时间
    int32 nowMakeNum = 4; // 正在造的士兵数量
    int32 canCureNum = 5; // 当前可治疗的士兵数量
    int32 nowCureNum = 6; // 当前正在治疗的士兵数量
    int32 cureOverTime = 7; //治疗结束时间
    int32 cureQueue = 8; // 所属治疗队列
    int32 canEventCureNum = 12; // 当前可治疗(活动)的士兵数量
    int32 nowEventCureNum = 13; // 当前正在治疗(活动)的士兵数量
    int32 eventCureOverTime = 14; //治疗(活动)结束时间
    int32 eventCureQueue = 15; // 所属治疗(活动)队列
    int32 makeNeedTime = 16; // 造兵需要时间
    int32 cureNeedTime = 17; // 治疗需要时间
    int32 eventCureNeedTime = 18; // 治疗(活动)需要时间
}

// msgType = 3124
// 服务器 -> 客户端
// 建筑的某些公共信息变化的推送
message BuildInfoByAllianceHelp {
    int64 cityId = 1; // 建筑所在城池ID
    int32 buildType = 2; // 建筑类型
    int32 x = 3; // 建筑位置坐标x
    int32 y = 4; // 建筑位置坐标y
    int64 helpId = 5; // 帮助表中的ID
    int32 overTime = 6; // 建造结束时间
    int64 buildingId = 7; // 建筑唯一ID
}

// msgType = 3125
// 服务器 -> 客户端
// 玩家帮派科技变化信息
message AllianceResearchChange {
    OpenAllianceResearchInfo research = 1;
}

// msgType = 3126
// 服务器 -> 客户端
// 玩家造兵队列变化
message BarracksQueueChange {
    SlgBarracksQueueInfo slgBarracksQueueInfo = 1; // todo 废弃
    repeated SlgBarracksQueueInfo currentSlgBarracksQueueInfo = 2;
}

message BarracksWoundedSoldierInfo {
    repeated IntToLongKV woundedSoldier = 1; // 现存的伤兵
    repeated IntToLongKV curingSoldier = 2; // 治疗中的伤兵(依然占用伤兵名额)
    int32 curingStart = 3; // 治疗开始时间
    int32 curingEnd = 4; // 治疗结束时间
}

// msgType = 3127
// 服务器 -> 客户端
// 玩家伤兵变化
message BarracksWoundedSoldierChange {
    BarracksWoundedSoldierInfo barracksWoundedSoldierInfo = 1;
}

// msgType = 3128
// 服务器 -> 客户端
// 兵营训练成功加兵
message BarracksAddFromTrainSuccess {
    repeated IntToLongKV soldier = 1;
}

message BarracksRefugeSoldierInfo {
    repeated IntToLongKV refugeSoldier = 1; // 避难中的士兵
    int32 refugeStart = 2; // 避难开始时间
    int32 refugeEnd = 3; // 避难结束时间
    int32 lastCancelTime=4; //最后一次取兵的时间
}

// msgType = 3129
// 服务器 -> 客户端
// 玩家避难兵变化
message BarracksRefugeSoldierChange {
    BarracksRefugeSoldierInfo barracksRefugeSoldierInfo = 1;
}

// msgType = 3133
// 服务器 -> 客户端
// VIP变化
message VipChange {
    int32 vipLv = 1; //vip等级
    int32 vipExp = 2; //vip经验
    int32 nextVipExp = 3; // 明天登陆获得的经验
    repeated IntToIntKV vipDayReward = 4; // 可领取的每日经验(不含当前等级),vip等级->生成的时间
    uint64 vipExpireTime = 5;        // vip 过期时间
}

// msgType = 3134
// 服务器 -> 客户端
// 君主经验变化
message KingExpChange {
    int32 kingLv = 1; //君主等级
    int64 kingExp = 2; //君主经验
}

// msgType = 3135
// 服务器 -> 客户端
// 进游戏时的public服推送过来的数据(通过game)
message EnterGamePublicRt {
    repeated client2server.RedPointInfo redPointInfos = 23; //红点信息
    AllianceBossVo allianceBossVo = 2;
    int32 fightCount = 3; // 可战斗次数
    int32 lastFightTime = 4; // 战斗次数上次变化时间
    int32 allianceFightState = 5; // 联盟的联盟战 报名情况
    int32 myAllianceFightState = 6; // 我的联盟战 报名情况
    int32 allianceFightCounts = 7; // 我的联盟战剩余战斗次数
    int32 allianceLv = 8;
    int64 allianceExp = 9;
    string systemDescription = 10; // 系统联盟公告
    string description = 11; // 联盟公告
}

message AllianceLivenessVo {
    int32 allianceLivenessLv = 1; //联盟活跃度等级
    int32 allianceLivenessExp = 2; //联盟活跃度经验
    int32 allianceLivenessScore = 3; //联盟今日获得的活跃度积分
    int32 allianceLivenessGiftId = 4; //联盟今日获得的箱子ID
    int32 allianceLivenessTodayLv = 5; //当天使用的活跃度等级
}

message WalkRobot {
    int32 startX = 1;
    int32 startY = 2;
    int32 gotoX = 3;
    int32 gotoY = 4;
    int64 walkOnlyId = 5; // 这条线的唯一ID
    int64 groupId = 6; //行军组Id
    int32 runType = 7; // 行军类型
    int32 goRunType = 8; //行军前往时的行军类型
    int64 massId = 9; //集结Id

    int32 robotId = 10; //机器人配置Id

    int64 startTime = 11;
    int64 overTime = 12;
    int32 robEndTime = 13; //打劫结束时间
    int32 robProtectEndTime = 14; //打劫保护结束时间
    float currentSpeed = 15; //当前速度
    int32 initialWalkTime = 16; //初始行军时间

    repeated GridTime path = 17; //路径点

    int32 lordState = 18; //领主拜访神庙状态
    int32 informationId = 19; //情报id

    //玩家信息
    int64 playerId = 21;
    string playerName = 22;
    PhotoViewInfo photoInfo = 23; //领主头像
    int32 jjcScore = 24;

    //联盟信息
    int64 allianceId = 31;
    string allianceShortName = 32;
    int32 belongState = 33;

    int32 buffId = 41; //部队采集到的BuffId
    int32 buffOverTime = 42; //buff消失时间
    int32 iconType = 43;
    int32 iconOverTime = 44;

    int64 targetAllianceId = 99; //目标联盟Id
    int32 kingHeroProtoId = 100; //领主英雄配置Id
    int32 cellType = 101; // 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
    int32 npcId = 102;
    int32 bossId = 103; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到

    string targetPlayerName = 104; //目标玩家的名称
    string targetPlayerShortName = 105; //目标玩家简称
    int64 targetPlayerId = 117;

    int32 areaNo = 106;
    int32 isScoutHome = 107; //是否侦查回城 0-否 1-是
    int64 fightHomeId = 108; //战斗回城标记 0代表非战斗回城 同Id代表归属同一个战斗组

    int32 resRate = 109; //采集资源翻的倍率
    string props = 110; //掉落的道具，奖励格式

    int32 allianceBuildId = 111; //联盟建筑Id

    repeated int32 heroIds = 112; //部队英雄Id列表
    repeated IntToLongKV soldiers = 113; //兵信息
    int32 startOpenFog = 114; // 1-是 0-否

    int32 currentSkinId = 115; // 领主皮肤
    int32 accelerateCount = 116; // 累计使用行军加速次数

    int32 targetCellType = 200; //目的地地块类型
    int32 targetProtoId = 201; //目的地模板Id
    string targetName = 202; //目的地玩家名称
    SkinInfo skinInfo = 203; // 行军形象
}

message GridTime {
    int32 x = 1;
    int32 y = 2;
    int64 centerTime = 3; //到达该点的中心时间
}

// msgType = 3140
// 服务器 -> 客户端
// 行军线的新增与删除
message WalkRobotShow {
    int32 showTye = 1; // 1-新增  2-删除
    repeated WalkRobot walkRobots = 2;
}

// msgType = 3141
// 服务器 -> 客户端
// 战斗通知
message AttackNotice {
    int64 reportId = 1; //战报ID
    BattleReportInfo report = 2;
}

// msgType = 3142
// 服务器 -> 客户端
// 行军组通知
message NoticeWalkGroupChange {
    int32 changeType = 1; //1-新增  2-删除 3-更新
    int32 walkGroupType = 2; //1-自身行军组 2-预警/运输线
    WalkGroup walkGroup = 3; //新增的行军组
}

//行军组信息
message WalkGroup {
    int64 groupId = 1; //行军组Id
    int32 startX = 2;
    int32 startY = 3;
    int32 gotoX = 4;
    int32 gotoY = 5;
    int32 createdTime = 6; // 行军组的创建时间
    int64 mainPlayerId = 7; //主玩家Id
    int64 massId = 8; //集结Id
    int32 massState = 9; //集结状态

    int32 startRunType = 11; //出发时的行军类型
    int32 runType = 12; //行军类型
    int32 forceState = 13; //部队状态
    int32 startTime = 18; //开始时间
    int32 overTime = 19; //结束时间
    int64 walkOnlyId = 20; //这条线的唯一ID
    repeated ForceInfoInWalk forces = 21; //非预警部队信息
    WarningInfoInWalk warnInfo = 22; //预警部队信息
    int32 initialWalkTime = 25; //初始行军时间
    int32 watchTime = 27; //查看时间
    int32 robEndTime = 50; //打劫结束时间
    int32 nextActionTime = 51; //下次可以行动时间
    int32 buffId = 52; //部队采集到的BuffId
    int32 buffOverTime = 53; //buff消失时间
    int32 shelterUseTime = 55; //藏兵cd结束时间

    int32 targetCellType = 56; //目的地地块类型
    int32 targetProtoId = 57; //目的地模板Id
    string targetName = 58; //目的地玩家名称
    int64 occBuildAllianceId = 59; // 如果是联盟建筑的话 当前占领着这个建筑的联盟ID

    int32 lastSendExpressionTime = 60; //上次发送表情时间

    repeated GridTime path = 70; //路径点

    int32 startOpenFog = 80; //开始开雾
    int32 autoFightCommonBoss = 81; //是否是自动打野
    int64 autoFightNpcCityId = 82; // 自动打城模板id
    int64 autoFightAlceBuildId = 83; // 自动打旗模板id

    int32 nextDecisionTime = 100; //下次决策行动时间
}

message FarmInfo {
    int32 resType = 1; //资源类型
    int64 farmNum = 2; //采集到的资源量
    int32 rate = 3; //资源翻的倍率
    string props = 4; //掉落的道具，奖励格式
    string initialProps = 5; //初始掉落的道具，奖励格式
    int64 initialFarmNum = 6; //初始采集到的资源量
    int32 robProtectOverTime = 7; //打劫保护时间
    int32 canHelpNum = 8; //可帮助次数
    int32 farmTime = 9; //采集时间
    repeated ResHelpInfo helpPlayerInfo = 14; //帮助者信息
    repeated ResRobInfo robPlayerInfo = 15; //打劫者信息

    int32 resId = 20;
}

message ForceInfoInWalk {
    int64 playerId = 1;
    string playerName = 2;
    int32 playerPhoto = 3; //头像
    string allianceName = 4;
    string allianceShortName = 5;
    repeated HeroForWalk heros = 6;
    repeated SoliderForWalk soliders = 7;
    repeated SoliderForWalk woundSoldiers = 8;
    FarmInfo farmInfo = 9;
    int32 belongState = 10;
    int32 queueId = 11;
    PhotoViewInfo photoInfo = 16;
}

message WarningInfoInWalk {
    int64 playerId = 2;
    string playerName = 3;
    int32 playerPhoto = 4; //头像
    string allianceName = 5;
    string allianceShortName = 6;
    int32 heroNum = 7; //英雄数量
    int32 soliderNum = 8; //士兵估算总量
    int32 isLordInForce = 9; //是否君主在部队内
    repeated HeroForWalk heros = 10; //英雄信息
    repeated SoliderByArmyType soldiersByType = 11; //士兵类别分类的估算值
    repeated SoliderForWalk vagueSoliders = 12; //士兵估算量
    repeated SoliderForWalk exactSoliders = 13; //士兵精确量
}

message SoliderByArmyType {
    int32 armyType = 1; //兵种
    int32 soliderCount = 2;
}

// msgType = 3145
// 服务器 -> 客户端
// 获得一个联盟礼物
message GetNewAllianceGift {
    AllianceGiftVo allianceGiftVo = 1; // 礼物
}

// msgType = 3146
// 服务器 -> 客户端
// 联盟大礼物数据发生变化
message AllianceGiftChange {
    AllianceBigGiftVo allianceBigGiftVo = 1;
}

// msgType = 3150
// 服务器 -> 客户端
// 运输请求发生变化
message TransportRequestChange {
    int32 requestNum = 1;
}

//运输请求
message TransportRequest {
    int64 transportReqId = 1;
    string res = 2;
    int64 playerId = 3;
    string name = 4;
    int32 photo = 5;
}

// msgType = 3151
// 服务器 -> 客户端
// buff变化
message BuffChange {
    int32 changeType = 1; // 变化类型  1-新增  2-过期
    BuffVo buff = 2;
}

message BuffVo {
    int64 buffId = 1; // 服务器buff唯一ID
    int32 buffProtoId = 2; // buff模版ID
    int32 buffOverTime = 3; // buff过期时间
    int32 buffStartTime = 4; // buff开始时间
}

// msgType = 3154
// 服务器 -> 客户端
// 通知lan
message NoticeLanMsg {
    string lanId = 1;
    repeated string params = 2;
}

// msgType = 3155
// 服务器 -> 客户端
// 玩家活动信息发生变化
message PlayerActivityChange {
    repeated OpenActivityVo activitys = 1;
}

message OpenActivityVo {
    int64 id = 1; //唯一id
    int32 activityId = 2; // 活动ID  eventInformation-Id
    int32 myRank = 3; // 我的排名
    int32 castleLv = 4; // 我参与这个活动时的主堡等级
    int32 score = 6; // 只有联盟活动的时候会给,个人活动会刷的
}

// msgType = 3156
// 服务器 -> 客户端
// 活动信息发生变化
message ServerActivityChange {
    repeated ServerActivity serverActivitys = 1;
}

//活动信息
message ServerActivity {
    int64 id = 1;
    int32 eventTimeId = 2; //eventTime-id
    int32 effectiveOverTime = 3; //生效结束时间
    int32 overTime = 4; //活动结束时间
}

// msgType = 3158
// 服务器 -> 客户端
// 联盟活跃信息发生变化
message AllianceLivenessVoChange {
    AllianceLivenessVo allianceLivenessVo = 1; //当前次数
}

// msgType = 3161
// 服务器 -> 客户端
// 玩家实力变化
message PlayerPowerChange {
    PlayerPowerChangeVo playerPowerChangeVo = 1;
}

message PlayerPowerChangeVo {
    int64 playerPower = 1; //玩家实力
    int64 buildStrength = 2; //玩家建筑实力
    int64 heroStrength = 3; //玩家武将实力
    int64 researchStrength = 4; //玩家科研实力
    int64 soliderStrength = 5; //玩家士兵实力
}

// msgType = 3164
// 服务器 -> 客户端
// 成就信息变化
message AchievementChange {
    repeated Achievement achievement = 1; //成就信息
}

// msgType = 3165
// 服务器 -> 客户端
// 产量上限变化主推
message StoreLimitChange {
    int64 woodLimit = 1;
    int64 ironLimit = 2;
    int64 foodLimit = 3;
    int64 stoneLimit = 4;
    int64 coinLimit = 5;
    int64 heroExpPoolLimit = 6;
}

// msgType = 3166
// 服务器 -> 客户端
// 官职变化主推
message CountryPositionChange {
    int64 playerId = 1; //玩家ID
    int32 currentPos = 2; //当前的官职信息
}

// msgType = 3167
// 服务器 -> 客户端
// 城池位置变化主推
message CastlePosChange {
    int32 posX = 1;
    int32 posY = 2;
    int64 battleFieldId = 3;
}

// msgType = 3168
// 服务器 -> 客户端
// 建筑升级完毕主推
message InnerCityInfoChanged {
    int32 op = 1; // 1新增 2删除 3 变化
    InnerCityInfo innerCityInfo = 2; // 建筑信息
}

// msgType = 3169
// 服务器 -> 客户端
// 奇观部队变化
message WonderForceChange {
    int32 changeType = 1; // 1-新增 2-删除 3-更新
    repeated MassForce forces = 2;
}

// msgType = 3170
// 服务器 -> 客户端
// 赦免次数变化
message AmnestyCountChange {
    int32 amnestyCount = 1; //赦免次数
}

//个人猎杀记录
message HunterRecord {
    int32 posX = 1; //坐标x
    int32 posY = 2; //坐标Y
    int32 bossId = 3; //魔物配置Id
    int32 nowHp = 4; //当前血量
    int32 haveHunterNum = 5; //已猎杀的同盟人数
    string callPlayerName = 9; //召唤者名称
    int32 callPlayerPhoto = 10; //召唤者头像
    string callAllianceShortName = 11; //召唤者联盟简称
    int32 disappearTime = 12; //消失时间
}

//猎杀邀请信息
message HunterInviteInfo {
    int64 inviteId = 1; //邀请Id
    int64 inviteTime = 2; //最新邀请时间
    int32 bossId = 3; //魔物配置Id
    int64 nowHp = 4; //当前血量
    int32 haveHunterNum = 5; //已猎杀的同盟人数
    int64 pltAreaNo = 6; //区服Id
    int32 posX = 7; //坐标x
    int32 posY = 8; //坐标Y
    string callPlayerName = 9; //召唤者名称
    int32 callPlayerPhoto = 10; //召唤者头像
    string callAllianceShortName = 11; //召唤者联盟简称
    int32 disappearTime = 12; //消失时间
    int32 belongState = 13;
}

// msgType = 3175
// 服务器 -> 客户端
// 推图体力变化
message StrengthChange {
    int32 strength = 1; //体力值
    int32 strengthTime = 2; //玩家是当前体力值的时间
}

// msgType = 3176
// 服务器 -> 客户端
// 魔物受伤信息
message MonsterDamageInfo {
    int32 posX = 1; //坐标x
    int32 posY = 2; //坐标Y
    int32 bossId = 3; //魔物配置Id
    int64 costHp = 4; //扣除的血量
    int64 groupId = 5; //绑定的行军组Id
}

// msgType = 3177
// 客户端 -> 服务器
// 收藏数量变化
message MarkNumChange {
    int32 changeInfo = 1;
}

// msgType = 3178
// 客户端 -> 服务器
// 竞技场排名变化
message ArenaRankChange {
    int32 changeInfo = 1;
}

// msgType = 3179
// 客户端 -> 服务器
// 竞技奖励变化
message ArenaRewardGet {
    int64 gold = 1; //钻石数量
    int64 jjCoin = 2; // 竞技b数量
}

// msgType = 3183
// 服务器 -> 客户端
// 新图鉴开启
message NewLibraryItem {
    repeated int32 newItem = 1; // 新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
}

// msgType = 3184
// 服务器 -> 客户端
// 奖励的推送
message GetRes {
    int32 actionType = 1; // 奖励行为
    string resString = 2; // 获得的奖励
}

// msgType = 3185
// 客户端 -> 服务器
// 好友信息变化
message FriendApplySuccess {
    int32 type = 1; // 1：新增，2：修改，3：删除
    FriendInfo friendInfo = 2; // 好友信息
}

// msgType = 3187
// 客户端 -> 服务器
// 活动入口开放时间
message ActivityEnterTimeChange {
    repeated ActivityEnterTimeInfo enterTimeInfo = 1; // 活动入口开放时间
}

// msgType = 3188
// 客户端 -> 服务器
// 进入游戏推聊天室信息
message EnterGameChatRoomInfo {
    ChatRoom chatRoomInfo = 1; // 上线时候一条条推
}

// msgType = 3189
// 客户端 -> 服务器
// 推陌生人的基本信息
message SendStrangerInfo {
    FriendInfo strangerInfos = 1; // 陌生人消息
}

// msgType = 3191
// 服务器 -> 客户端
// 奇观被占领
message WonderOccupied {
    int64 allianceId = 1; // 奇观占领联盟的Id
    string allianceShortName = 2;
    string allianceName = 3;
    int64 playerId = 4; // 指挥官id
    string playerName = 5;
    int32 wonderProtoId = 6; // 被占领的奇观的模板Id
    int64 worldId = 7; // 占领奇观人的世界ID
}

// msgType = 3192
// 服务器 -> 客户端
// 配置检测推送 (仅用于内部使用)
message CheckConfig {
    string info = 1; // 推送的内容
}

// msgType = 3195
// 服务器 -> 客户端
// 新手登录礼
message NewLoginGift {
    int32 changeType = 1; // 1-增加 2-删除 3-更新
    LoginGiftInfo loginGiftInfo = 2;
}

// msgType = 3196
// 服务器 -> 客户端
// 成长基金
message NewGrowthFund {
    int32 changeType = 1; // 1-增加 2-删除 3-更新
    GrowthFundInfo growthFundInfo = 2;
}

// msgType = 3197
// 服务器 -> 客户端
// 联盟boss建筑状态
message AllianceNewBossState {
    int32 state = 1; // 1-拆除 2-建成
    int32 buildOkTime = 2; // 建造完成的时间
}

// msgType = 3198
// 服务器 -> 客户端
// 联盟boss开启
message AllianceNewBossIsOpen {
    int32 state = 1; // 1-开启 2-关闭
}

// 会员卡数据
message ClubCardInfo {
    int32 clubCardId = 1; // 会员卡ID
    int32 clubCardOverTime = 2; // 会员卡过期时间
    int32 lastGetMonthRewardTime = 3; // 玩家上次领取月卡时间
}

// 犒赏令数据
message Appreciations {
    int32 protoId = 1; // 配置表的唯一ID 并非是activityId
    int32 payFlag = 2; // 付款标记  0-否 1-是
    int32 nowScore = 3; // 当前见覅恩
    repeated AppreciationsRewardInfo appreciationsRewardInfos = 4; // 犒赏令的领奖情况
}

// 犒赏令的领奖情况
message AppreciationsRewardInfo {
    int32 step = 1; // 积分档位
    int32 normalRewad = 2; //  普通奖励是否领取 0-否 1-是
    int32 payRewad = 3; // 充值奖励是否领取 0-否 1-是
}


message SurpriseGiftPackage {
    int32 giftId = 1; // 唯一ID
    int32 buyCount = 2; // 购买次数
    int32 overTime = 3; // 消失时间
    string extend = 4; // 扩展字段 目前用于获得英雄的那个惊喜礼包时 传入英雄ID
}

message PrivateChatUnreadInfo {
    int64 friendId = 1;
    int32 unreadNum = 2;
}

// msgType = 3210
// 服务器 -> 客户端
// 酒馆免费次数推送
message WineHallFreeNotice {
    int32 freeCount = 1; // 当前免费次数
    int32 nextFreeTime = 2; // 下一次免费次数出现的时间(仅当前免费次数为0时有效)
}

// msgType = 3211
// 服务器 -> 客户端
// 偷菜活动被偷了
message CabbageBeStolenNotice {
    StolenRecord stolenRecord = 1;
    CabbageFieldInfo cabbageFieldInfo = 2;
}

// msgType = 3250
// 服务器 -> 客户端
// 酒馆免费次数推送
message InnerCityFatigueChange {
    int64 innerCityFatigueValue = 1; // 内城建筑工人疲劳值
    int32 innerCityFatigueRefreshTime = 2; // 内城建筑工人疲劳值刷新时间
}

// MsgType = 3260
// 服务器 -> 客户端
// 三消怪物更新,仅少量更新,每日刷新不会推送
message EliminateMonsterOnMapChange {
    repeated EliminateMonsterOnMap add = 1; // 新增雷达三消魔物
    repeated EliminateMonsterOnMap del = 2; // 删除雷达三消魔物，模板不一定会赋值
    int32 remainTaskCount = 3;              // 剩余可以做任务的次数
}

message EliminateMonsterOnMap {
    int32 posX = 1;
    int32 posY = 2;
    int32 eliminateMonsterProtoId = 3;
    int32 expireTime = 4; // 失效时间,时间戳秒,删除时不会赋值
    int32 protoId = 5; // 探测表的id
    int64 taskId = 6; // 绑定的任务id
    int32 teamId = 7;
}

// MsgType = 3261
// 服务器 -> 客户端
// 雷达怪物更新
message RadarMonsterOnMapChange {
    repeated RadarItemOnMap itemVO = 1; // 全量雷达怪物
}

message RadarItemOnMap {
    int32 protoId = 1;      // 探测表的id
    int32 posX = 2;
    int32 posY = 3;
    int32 expireTime = 4;   // 失效时间,时间戳秒
    int64 taskId = 5;       // 绑定的任务id
    int32 teamId = 6;       // 绑定的阵容id
}

// MsgType = 3270
// 服务器 -> 客户端
// 特殊体力更新
message EnergySpecialChange {
    EnergySpecialInfo energySpecialInfo = 1; // 特殊体力信息
}

// ====================  4/3200号消息拆分  ====================
// msgType = 3300
// 服务器 -> 客户端
// 运输请求数据初始化(增量协议3150)
message TransportRequestInit {
    repeated TransportRequest req = 1;
}

// msgType = 3302
// 服务器 -> 客户端
// 成就信息初始化(3164)
message AchievementInit {
    repeated Achievement achievement = 1;
}

// msgType = 3303
// 服务器 -> 客户端
// 狩猎信息初始化(3174)
message HunterInfoInit {
    int32 autoHunter = 1; //是否自动猎杀
    int32 autoUseEnergy = 2; //是否自动使用行动力
}

// msgType = 3304
// 服务器 -> 客户端
// 王国信息初始化
message WonderInfoInit {
    int32 currentPos = 116; //当前的官职信息
    int32 buffCoolTime = 117; //王国buff冷却时间
}

// msgType = 3305
// 服务器 -> 客户端
// 随机事件初始化
message RandomEventInit {
    RandomEventDataInfo randomEventDataInfo = 1;
}
// msgType = 3320
// 服务器 -> 客户端
// 玩家标签变更,推的是全量
message PlayerTagChange {
    repeated IntToLongKV tags = 1; // 1敌对,2友好
}
// msgType = 3321
// 服务器 -> 客户端
// 联盟标签变更,推的是全量
message AllianceTagChange {
    repeated IntToLongKV tags = 1; // 1敌对
}
// msgType = 3350
// 服务器 -> 客户端
// 皮肤信息初始化
message SkinInfoInit {
    repeated SkinInfo skins = 1; // 皮肤信息
}

// msgType = 3351
// 服务器 -> 客户端
// 玩家额外信息初始化
message PlayerAddInfoInit {
    string nickName = 1; // 昵称
}

// msgType = 3352
// 服务器 -> 客户端
// 联盟礼物信息初始化
message AllianceGiftInfoInit {
    int32 openSendAllianceGift = 1; //是否开启联盟赠礼功能
}

// msgType = 3353
// 服务器 -> 客户端
// 标记信息初始化
message MarkInfoInit {
    int32 maxMark = 1; // 收藏上限
}

// ====================  4/3200号消息拆分 end ====================

// msgType = 3355
// 服务器 -> 客户端
// 推送客户端触发满额礼包
message TriggerQuotaBag {
    QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3356
// 服务器 -> 客户端
// 推送客户端触发礼包
message TriggerGiftBag {
    GiftBagInfo giftBagInfo = 1; // 礼包信息
}

// msgType = 3357
// 服务器 -> 客户端
// 推送客户端满额礼包进度发生变动
message ChangeQuotaBagDegree {
    QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3358
// 服务器 -> 客户端
// 推送客户端满额礼包结束
message FinishQuotaBag {
    QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3359
// 服务器 -> 客户端
// 推送客户端购买礼包成功
message PayGiftBagSuccess {
    GiftBagInfo giftBagInfo = 1; // 礼包信息
}

// msgType = 3360
// 服务器 -> 客户端
// 推送客户端购买月卡成功
message PayMonthCardSuccess {
    MonthCardInfo monthCardInfo = 1; // 月卡信息
}

// msgType = 3361
// 服务器 -> 客户端
// 推送客户端世界奇观状态发生变化
message NotifyWorldWonderStatusChange {
    int32 worldWonderId = 1;
    int32 status = 2;
}

// msgType = 3371
// 服务器 -> 客户端
// 踢玩家下线之前发给客户端的推送
message KickPlayerOffline {
    int32 reason = 1;
}

// msgType = 3372
// 服务器 -> 客户端
// 竞技场累计时间奖励变化
message JjcTimeRewardChange {
    string jjcTimeReward = 1; // 奖励格式字符串
}

// msgType = 3373
// 服务器 -> 客户端
// 着火结束时间变化
message FireEndTimeChange {
    int32 fireEndTime = 1; // 自动灭火的时间，单位秒
    int64 wallHp = 2; //血量
    int32 wallHpRefreshTime = 3; //血量刷新时间
    int64 wallDurability = 4; //耐久度  //耐久度 客户端实际用的时候除以10000
}

// msgType = 3374
// 服务器 -> 客户端
// 城墙回复变化
message WallRecoveryChange {
    int64 wallHp = 1; //血量
    int32 wallHpRefreshTime = 2; //血量刷新时间
}

// msgType = 3375
// 服务器 -> 客户端
// 玩家效果变化
message PlayerEffectChange {
    EffectInfo effectInfo = 1;
}

message EffectInfo {
    int32 effectModule = 1; //效果模块
    repeated EffectKV effect = 2;
}

message EffectKV {
    int32 effectKey = 1;
    int32 effectValue = 2;
}

// msgType = 3376
// 服务器 -> 客户端
// 行为队列变化
message ActionQueueChange {
    int32 actionType = 1; //行为类别
    int32 fromWorld = 5;
    ActionQueue queues = 2; //行为队列,为空时则为删除队列
}

// 行为队列信息
message ActionQueue {
    int32 actionType = 1; //行为类别
    repeated ActorInfo actors = 2; //执行者信息
    int64 timeOut = 3; // 临时队列的过期时间(仅建筑队列使用) 0表示没有获得永久的也没有吃临时队列 1表示已开启额外永久队列 其他值是过期时间的时间戳
}

message ActorInfo {
    int64 id = 1; //执行唯一Id
    int32 protoId = 2; //执行配置Id
    int32 num = 3;
    int32 overTime = 4; //结束时间
    int32 startTime = 5; //开始时间
    int64 helpId = 6; // 帮助ID
    int32 extendQueue = 7;
    int32 protoId2 = 8; // 配置id2
    int32 actionType = 9; //行为类别
    int32 useExtentQueue = 10; //当前队列是否正在使用临时队列
    int32 helpCount = 11; // 当前被帮助次数
    int32 helpMax = 12; // 总共能被帮助次数
}

// msgType = 3377
// 服务器 -> 客户端
// 红点变化
message RedPointChange {
    repeated RedPointInfo redPoints = 1;
}

message RedPointInfo {
    int32 redPointType = 1; // 红点类型
    int64 redPointSubType = 2; // 红点子类型
    int32 redPointNum = 3; // 红点数量
    repeated IntToIntKV param = 4; // 附加类型
}

// msgType = 3378
// 服务器 -> 客户端
// 红点变化
message BuildingViewChange {
    repeated BuildingView buildingViews = 1;
}

// msgType = 3379
// 服务器 -> 客户端
// 行为队列变化
message QueueChange {
    int32 fromWorld = 1; // 服务器字段: World发出的需要赋值为1便于查错
    repeated QueueTypeList multiTypeQueue = 4; // 多类型队列
}

message QueueTypeList {
    int32 actionType = 1;
    repeated QueueInfo queues = 2;
    repeated QueueInfo hide = 3;

}

message QueueInfo {
    // 队列基础属性
    int32 actionType = 1; //队列类别
    int64 actionId = 2; // 队列唯一ID,且仅仅只是队列唯一id
    int32 create = 3; // 队列获得时间
    int32 timeOut = 4; // 队列的过期时间,0表示永久,非0即为临时队列,非空闲临时队列会延期删除
    int32 startTime = 6; // 开始时间
    int32 overTime = 5; // 结束时间
    int32 fromModule = 7; // 队列来源模块(暂时使用效果对应的模块)
    int32 fake = 8; // 默认0,h:1,暂无w(服务器调试专用)

    // 队列工作内容
    int64 id = 20; // 执行唯一Id,比如建筑队列就是建筑唯一id等...
    int32 protoId = 21; // 执行配置id
    int32 num = 22; // 数量
    int32 protoId2 = 23; // 执行配置id2
    repeated IntToIntKV kv = 24; // 开始结束时间,暂时只有食堂使用

    // 帮助相关
    int64 helpId = 40; // 帮助ID
    int32 helpCount = 41; // 当前被帮助次数
    int32 helpMax = 42; // 总共能被帮助次数
}

// msgType = 3380
// 服务器 -> 客户端
// 抽奖活动变化
message LotteryActivityChange {
    int32 changeType = 1;
    LotteryInfo info = 2;
}

// msgType = 3381
// 服务器 -> 客户端
// 惊喜礼包出现
message GetSurpriseGiftPackage {
    SurpriseGiftPackage surpriseGiftPackage = 1;
}

// msgType = 3382
// 服务器 -> 客户端
// 完成了一个GOP通知礼包购买
message SuccessGetGiftPackage {
    int32 giftId = 1; // 礼包唯一ID
}

// msgType = 3383
// 服务器 -> 客户端
// 会员卡信息变化
message ClubCardChange {
    ClubCardInfo clubCardInfo = 1; // 会员卡数据
}

// msgType = 3400
// 服务器 -> 客户端
// 巨龙变化
message DragonChange {
    repeated DragonChangeInfo dragons = 1;
}

message DragonChangeInfo {
    int32 changeType = 1;
    Dragon dragon = 2; //巨龙信息
}

// msgType = 3401
// 服务器 -> 客户端
// 龙蛋变化
message DragonEggChange {
    repeated IntToIntKV eggs = 1;
}

// msgType = 3402
// 服务器 -> 客户端
// 犒赏令数据变化
message AppreciationsChange {
    Appreciations appreciations = 1; // 玩家局部犒赏令任务 整个覆盖
}

// msgType = 3403
// 服务器 -> 客户端
// 世界服重启，客户端需要根据当前状态，重新请求视野
message WorldReboot {
    int64 worldId = 1;
}

// msgType = 3404
// 服务器 -> 客户端
// 联盟boss变化
message AllianceBossChange {
    AllianceBossVo allianceBossVo = 1;
    int32 fightCount = 3; // 可战斗次数
    int32 lastFightTime = 4; // 战斗次数上次变化时间
}

// msgType = 3405
// 服务器 -> 客户端
// 全国buff变化
message CountryBuffChange {
    repeated BuffVo buff = 1;
}

// msgType = 3406
// 服务器 -> 客户端
// 时光之力当前值
message InstanceTimeChange {
    int64 instanceTime = 1;
}

// msgType = 3407
// 服务器 -> 客户端
// 联盟仓库积分当前值
message AllianceBagScoreChange {
    int64 allianceBagScore = 1;
}

// msgType = 3408
// 服务器 -> 客户端
// 当前开着的自定义活动
message NowPurchaseActivityChange {
    repeated NowPurchaseActivity nowPurchaseActivitys = 1;
}

message NowPurchaseActivity {
    int32 purchaseActivityId = 1;
    int32 startTime = 2;
    int32 overTime = 3;
}

// msgType = 3409
// 服务器 -> 客户端
// 玩家特定途径获得钻石的记录覆盖
message DiamondInfoChange {
    repeated DiamondInfoChangeVo diamondInfo = 1; // 玩家特定途径获得钻石的记录
    repeated DiamondInfoChangeVo propQuickInfo = 2; // 玩家特定途径获得加速道具的记录
}


message DiamondInfoChangeVo {
    int32 key = 1; // 行为类型
    int64 dayValue = 2; // 今日数据
    int64 allvalue = 3; // 总数据
}

// msgType = 3412
// 服务器 -> 客户端
// 联盟参赛状态变化
message FightAllianceStateChange {
    int32 allianceFightState = 1; // 联盟战 联盟参赛状态
}

// msgType = 3413
// 服务器 -> 客户端
// 联盟参赛状态变化
message PayNumChange {
    int32 payNum = 1; // 充值积分总额
    int32 userLastPayTime = 2; // 用户上次充值时间(不区分礼包/紫钻)
    int32 lastPayTencentMoneyTime = 3; // 用户上次充值紫钻时间 @Deprecated
    int32 userPayTencentMoneyNum = 4; // 用户紫钻充值数 @Deprecated
    int32 payNum4Task = 5; // 排除特定充值项目、用于充值活动任务的充值积分总额
    int32 payCount = 6; // 玩家充值次数
    int64 payUsdAmount = 7; // 玩家充值额度，并非真实充值额度，而是充值礼包的美元档位总和(单位：美分)
}

// msgType = 3414
// 服务器 -> 客户端
// 竞技场积分变化
message JjcScoreChange {
    int32 jjcScore = 1;
}

// msgType = 3416
// 服务器 -> 客户端
// 行军组战斗确认
message WalkGroupFightConfirm {
    int64 groupId = 1; //行军组Id
    string targetPlayerName = 2; //目标玩家名称
    string targetAllianceShortName = 3; //目标联盟简称
}
// msgType = 3417
// 服务器 -> 客户端
// 联盟战积分变化
message AllianceFightScoreChange {
    int64 defPlayerId = 1; // 联盟战被打的玩家ID
    int32 score = 2; // 变化的积分
    int32 allRevive = 3; // 是否触发了全部复活
}

// msgType = 3418
// 服务器 -> 客户端
// 贼兵变化
message EnemySoliderInfoChange {
    PlayerEnemySoliderInfo playerEnemySoliderInfo = 1;
}

// msgType = 3420
// 服务器 -> 客户端
// 敌人信息新增/变化
message EnemyInfoChange {
    EnemyInfo enemyInfo = 1;
}

// msgType = 3421
// 服务器 -> 客户端
// 关卡被占领
message WorldCheckPointOccupied {
    int64 allianceId = 1; // 奇观占领联盟的Id
    string allianceShortName = 2;
    string allianceName = 3;
    int64 playerId = 4; // 指挥官id
    string playerName = 5;
    int32 worldCheckPointId = 6; // 关卡Id
    int64 worldId = 7; // 占领奇观人的世界ID
}

// msgType = 3422
// 服务器 -> 客户端
// 新的弹幕
message BulletScreenNotice {
    int32 readType = 1; //读取类型 1-读lan (一般都是游戏内发的) 2-直接读取内容(一般都是后台发的)
    LanFormat content = 2; //内容

    ResWalkHelpInfo resWalkHelpInfo = 3; //资源线帮助信息
}

// msgType = 3423
// 服务器 -> 客户端
// 资源矿被占领
message ResOccupied {
    int64 allianceId = 1; // 奇观占领联盟的Id
    string allianceShortName = 2;
    string allianceName = 3;
    int64 playerId = 4; // 指挥官id
    string playerName = 5;
    int32 resId = 6; // 资源矿Id
    int64 worldId = 7; // 占领资源矿人的世界ID
}

// msgType = 3424
// 服务器 -> 客户端
// 奇观战信息变化
message WonderWarInfoChange {
    WonderWarInfo wonderWarInfo = 1;
}

// msgType = 3425
// 服务器 -> 客户端
// 资源矿争夺信息变化
message ResWarInfoChange {
    ResWarInfo resWarInfo = 1;
}

// msgType = 3426
// 服务器 -> 客户端
// 资源矿争夺信息变化
message WorldCheckPointInfoChange {
    WorldCheckPointInfo worldCheckPointInfo = 1;
}

// msgType = 3427
// 服务器 -> 客户端
// 魔物刷新
message MonsterInfoChange {
    int32 nextRefTime = 1;
}

// msgType = 3428
// 服务器 -> 客户端
// 旗帜信息变化
message FlagInfoChange {
    int32 flagEditedRecordSize = 1; // 旗帜被他人记录数
}

// msgType = 3429
// 服务器 -> 客户端
// 有新的联盟邮件
message AllianceMailNotifier {
    MailInfo mailInfo = 1;
}

//msgType = 3430
// 服务器 -> 客户端
// 称号变化
message ChangeDesignationTell {
    int32 changeType = 1; // 变化类型  1-新增 2-删除
    repeated int32 designationProtoId = 3;
}

//msgType = 3431
// 服务器 -> 客户端
// 坐标强制变化
message CellXyConstraintChange {
    int32 mainPlayerX = 1;
    int32 mainPlayerY = 2;
    int32 myPlayerX = 3;
    int32 myPlayerY = 4;
}

//msgType = 3432
// 服务器 -> 客户端
// 在线弹窗
message PopupNotice {
    int32 msgType = 1; //消息类型
    HurtBossPopupNotice hurtBossPopupNotice = 10;
    KillBossPopupNotice killBossPopupNotice = 11;
    FarmPopupNotice farmPopupNotice = 12;
    ResWalkRobPopupNotice resWalkRobPopupNotice = 13;
    DefFailPopupNotice defFailPopupNotice = 14;
    DefSuccessPopupNotice defSuccessPopupNotice = 15;
    HeroBeKillPopupNotice heroBeKillPopupNotice = 16;
    ScoutPopupNotice scoutPopupNotice = 17;
    AtkSuccessPopupNotice atkSuccessPopupNotice = 18;
    AtkFailPopupNotice atkFailPopupNotice = 19;
    AtkWonderPopupNotice atkWonderPopupNotice = 20;
    AtkResPopupNotice atkResPopupNotice = 21;
    AtkCheckPointPopupNotice atkCheckPointPopupNotice = 22;
    AtkEnemySoliderSuccessPopupNotice atkEnemySoliderSuccessPopupNotice = 23;
    AtkEnemySoliderFailPopupNotice atkEnemySoliderFailPopupNotice = 24;
    WalkFightPopupNotice walkFightPopupNotice = 25;
    TrustRequestPopupNotice trustRequestPopupNotice = 26;
    StationPopupNotice stationPopupNotice = 27;
    FarmedResPopupNotice farmedResPopupNotice = 28;
    FarmedMapBuffPopupNotice farmedMapBuffPopupNotice = 29;
    IntoMapNpcPopupNotice intoMapNpcPopupNotice = 30;
    PveAutoFightRobPopupNotice pveAutoFightRobPopupNotice = 31;
    ReinforceAllianceFlagPopupNotice reinforceAllianceFlagPopupNotice = 32;
    OccupyAllianceFlagPopupNotice occupyAllianceFlagPopupNotice = 33;
    FarmResCollectPopupNotice farmResCollectPopupNotice = 34;
    TransportPopupNotice transportPopupNotice = 35;
    FightCastlePopupNotice fightCastlePopupNotice = 36;
    FightForcePopupNotice fightForcePopupNotice = 37;
    FightWonderPopupNotice fightWonderPopupNotice = 38;
    FightResMinePopupNotice fightResMinePopupNotice = 39;
    FightCheckPointPopupNotice fightCheckPointPopupNotice = 40;
    FightRelicPopupNotice fightRelicPopupNotice = 41;
    FightAllianceBuildPopupNotice fightAllianceBuildPopupNotice = 42;
    FightPveCityPopupNotice fightPveCityPopupNotice = 43;
    FightPveRobPopupNotice fightPveRobPopupNotice = 44;
    ExploreMapNpcPopupNotice exploreMapNpcPopupNotice = 45;
    FortuitousTaskNotice fortuitousTaskNotice = 46;
    StationAroundNpcPopupNotice stationAroundNpcPopupNotice = 47;
    TemplatePopupNotice templatePopupNotice = 48;
    InstancePopupNotice instancePopupNotice = 49;
    HurtYanwuPopupNotice hurtYanwuPopupNotice = 50;
    HurtSummonPopupNotice hurtSummonPopupNotice = 51;
    RandomEventPopupNotice randomEventPopupNotice = 52;
    HurtPollutedPopupNotice hurtPollutedPopupNotice = 53;
    SaveSummonPopupNotice saveSummonPopupNotice = 54;
    DestroyPollutedNotice destroyPollutedNotice = 55;
}

// 内城随机事件弹窗
message RandomEventPopupNotice {
    int64 eventId = 1; // 事件唯一Id
    int32 randomEventProtoId = 2; // 事件模板id
    int32 resSingleWarProtoId = 3; // 事件所属资源点模板id
    int32 fightResult = 4; // 战斗结果
    int64 mainExtendId = 5; // 邮件拓展Id
}

// 推图弹窗
message InstancePopupNotice {
    int32 popType = 1; // 弹窗id
    int32 instanceId = 2;
    int32 fightResult = 3;
    int64 mailExtendId = 31; //邮件扩展Id
}

// 在线弹窗模板
message TemplatePopupNotice {
    string titleLanId = 1;
    string contendLanId = 2;
    repeated string param = 3;
    int32 popType = 4; // 弹窗id
    int64 mailExtendId = 31; //邮件扩展Id
}

// 领主部队到达npc附近在线弹窗
message StationAroundNpcPopupNotice {
    int64 groupId = 1;
    int32 npcId = 2;
    int32 x = 3;
    int32 y = 4;
}

// 奇遇任务完成在线弹窗
message FortuitousTaskNotice {
    int64 mailExtendId = 31; //邮件扩展Id
}

// 探索地图NPC在线弹窗
message ExploreMapNpcPopupNotice {
    int32 npcProtoId = 1;
    int32 exploreX = 2;
    int32 exploreY = 3;

    int64 mailExtendId = 31; //邮件扩展Id
}

//打内城怪物的在线弹窗
message FightPveRobPopupNotice {
    int32 robId = 1;
    int32 fightResult = 2;
    string res = 3;

    int64 mailExtendId = 31; //邮件扩展Id
}

//打内城城池的在线弹窗
message FightPveCityPopupNotice {
    int32 cityId = 1;
    int32 fightResult = 2;
    string res = 3;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击玩家主堡在线弹窗
message FightCastlePopupNotice {
    int64 massId = 1;

    int64 playerId = 11;
    string name = 12;
    int64 allianceId = 13;
    string allianceShortName = 14;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击玩家部队在线弹窗
message FightForcePopupNotice {
    int64 massId = 1;

    int64 targetMassId = 10;
    int64 playerId = 11;
    string name = 12;
    int64 allianceId = 13;
    string allianceShortName = 14;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击奇观在线弹窗
message FightWonderPopupNotice {
    int64 massId = 1;

    int32 wonderId = 11;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击资源矿在线弹窗
message FightResMinePopupNotice {
    int64 massId = 1;

    int32 resMineId = 11;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击关卡在线弹窗
message FightCheckPointPopupNotice {
    int64 massId = 1;

    int32 checkPointId = 11;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击巢穴在线弹窗
message FightRelicPopupNotice {
    int64 massId = 1;

    int32 relicId = 11;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//攻击联盟建筑在线弹窗
message FightAllianceBuildPopupNotice {
    int64 massId = 1;

    int32 allianceBuildId = 11;

    int32 fightResult = 21;

    int64 mailExtendId = 31; //邮件扩展Id
}

//运输弹窗
message TransportPopupNotice {
    string resVo = 1; //赞助的资源
    string sponsorName = 2; // 赞助者名字
    int64 sponsorId = 3; //赞助者Id
    int64 sponsorAllianceId = 4; //赞助者联盟Id
    string sponsorAllianceName = 5; //赞助者联盟名字
    int32 sponsorType = 6; //赞助者类型 0：赞助别人 1：被赞助
    int64 mailExtendId = 7; //邮件id
}

//采集资源田弹窗
message FarmResCollectPopupNotice {
    int32 resCollectId = 1; //资源矿Id
    string res = 2; //奖励
    string extendRes = 3; //额外资源
    int64 mailExtendId = 4; //邮件扩展Id
}

message ReinforceAllianceFlagPopupNotice {
    int64 rsNum = 1; // 填兵数
}

message OccupyAllianceFlagPopupNotice {
    string allianceShortName = 1;
    int64 allianceId = 2;
    int32 state = 3;
    int64 rsNum = 4; // 填兵数
}

// Pve拦路怪在线弹窗，类型22
message PveAutoFightRobPopupNotice {
    int32 robId = 1; // 拦路怪模板Id
    int32 fightResult = 2; // 战斗结果
    string reward = 3; // 奖励
    int64 mailExtendId = 4; //邮件扩展Id
}

//攻击魔物弹窗
message HurtBossPopupNotice {
    int32 bossId = 1; //魔物Id
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
}

// 成功解救圣女弹窗
message SaveSummonPopupNotice {
    repeated AtkPlayer atkPlayers = 1;
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
}

message AtkPlayer {
    PhotoViewInfo photo = 1;
    int64 playerId = 2;
    string playerName = 3;
}

// 完全消灭污染之地弹窗
message DestroyPollutedNotice {
    repeated AtkPlayer atkPlayers = 1;
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
}

//攻击演武场
message HurtYanwuPopupNotice {
    int32 bossId = 1; //Id
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
}

//攻击圣女
message HurtSummonPopupNotice {
    int32 summonId = 1; //Id
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
    int32 atkNum = 4;
}

//攻击污染之地
message HurtPollutedPopupNotice {
    int32 protoId = 1; //Id
    int32 fightResult = 2; //战斗结果
    int64 mailExtendId = 3; //邮件扩展Id
}

//击杀魔物弹窗
message KillBossPopupNotice {
    int32 bossId = 1; //魔物Id
    string res = 2; //奖励
    int64 mailExtendId = 3; //邮件扩展Id
}

//采集弹窗
message FarmPopupNotice {
    int32 resId = 1; //资源矿Id
    string res = 2; //奖励
    int64 mailExtendId = 3; //邮件扩展Id
}

//资源线打劫弹窗
message ResWalkRobPopupNotice {
    string res = 1; //丢失资源
    int64 playerId = 2; //打劫者Id
    string name = 3; //打劫者名字
    int64 mailExtendId = 4; //邮件扩展Id
    int64 allianceId = 5; //联盟Id
    string allianceName = 6; //联盟名字
    string allianceShortName = 7; //联盟简称
}

//防守失败弹窗
message DefFailPopupNotice {
    string res = 1; //丢失资源
    int64 playerId = 2; //攻击者Id
    string name = 3; //攻击者名字
    int64 mailExtendId = 4; //邮件扩展Id
    int64 allianceId = 5; //联盟Id
    string allianceName = 6; //联盟名字
    string allianceShortName = 7; //联盟简称
    int32 leftSoliderNum = 9; //剩余士兵数量
    int32 dieSoliderNum = 10; //死亡士兵数量
    int32 runType = 20;
}

//防守成功弹窗
message DefSuccessPopupNotice {
    int32 leftSoliderNum = 1; //剩余士兵数量
    int32 dieSoliderNum = 2; //死亡士兵数量
    int64 playerId = 3; //攻击者Id
    string name = 4; //攻击者名字
    int64 mailExtendId = 5; //邮件扩展Id
    int64 allianceId = 6; //联盟Id
    string allianceName = 7; //联盟名字
    string allianceShortName = 8; //联盟简称
    int32 runType = 20;
}

//英雄被处决弹窗
message HeroBeKillPopupNotice {
    int32 heroId = 1; //被处决的英雄Id
    int64 playerId = 2; //攻击者Id
    string name = 3; //攻击者名字
    int64 mailExtendId = 4; //邮件扩展Id
    int64 allianceId = 6; //联盟Id
    string allianceName = 7; //联盟名字
    string allianceShortName = 8; //联盟简称
}

//侦查弹窗
message ScoutPopupNotice {
    string res = 1; //侦查的资源
    int64 playerId = 2; //被侦查者Id
    string name = 3; //被侦查者名字
    int64 mailExtendId = 4; //邮件扩展Id
    int64 allianceId = 6; //联盟Id
    string allianceName = 7; //联盟名字
    string allianceShortName = 8; //联盟简称
    string canPlunderRes = 9; //可掠夺资源
    int32 runType = 10;
    int64 groupId = 11;
}

//攻击成功弹窗
message AtkSuccessPopupNotice {
    string res = 1; //侦查的资源
    int64 playerId = 2; //被攻击者Id
    string name = 3; //被攻击者名字
    int64 mailExtendId = 4; //邮件扩展Id
    int64 allianceId = 6; //联盟Id
    string allianceName = 7; //联盟名字
    string allianceShortName = 8; //联盟简称
    int32 leftSoliderNum = 9; //剩余士兵数量
    int32 dieSoliderNum = 10; //死亡士兵数量
    int32 runType = 20;
}

//攻击失败弹窗
message AtkFailPopupNotice {
    int32 leftSoliderNum = 1; //剩余士兵数量
    int32 dieSoliderNum = 2; //死亡士兵数量
    int64 playerId = 3; //被攻击者Id
    string name = 4; //被攻击者名字
    int64 mailExtendId = 5; //邮件扩展Id
    int64 allianceId = 6; //联盟Id
    string allianceName = 7; //联盟名字
    string allianceShortName = 8; //联盟简称
    int32 runType = 20;
}

//攻击奇观弹窗
message AtkWonderPopupNotice {
    int32 leftSoliderNum = 1; //剩余士兵数量
    int32 dieSoliderNum = 2; //死亡士兵数量
    int64 allianceId = 3; //联盟Id
    int32 wonderId = 4; //奇观Id
    int32 fightResult = 5; //战斗结果
    int64 mailExtendId = 6; //邮件扩展Id
}

//攻击资源矿弹窗
message AtkResPopupNotice {
    int32 leftSoliderNum = 1; //剩余士兵数量
    int32 dieSoliderNum = 2; //死亡士兵数量
    int64 allianceId = 3; //联盟Id
    int32 resId = 4; //资源矿Id
    int32 fightResult = 5; //战斗结果
    int64 mailExtendId = 6; //邮件扩展Id
}

//攻击关卡矿弹窗
message AtkCheckPointPopupNotice {
    int32 leftSoliderNum = 1; //剩余士兵数量
    int32 dieSoliderNum = 2; //死亡士兵数量
    int64 allianceId = 3; //联盟Id
    int32 checkPointId = 4; //关卡Id
    int32 fightResult = 5; //战斗结果
    int64 mailExtendId = 6; //邮件扩展Id
}

//攻击贼兵成功弹窗
message AtkEnemySoliderSuccessPopupNotice {
    int32 enemySoliderId = 1; //贼兵Id
    string res = 2; //侦查的资源
    int64 mailExtendId = 6; //邮件扩展Id
}

//攻击贼兵失败弹窗
message AtkEnemySoliderFailPopupNotice {
    int32 enemySoliderId = 1; //贼兵Id
    int32 leftSoliderNum = 2; //剩余士兵数量
    int32 dieSoliderNum = 3; //死亡士兵数量
    int64 mailExtendId = 6; //邮件扩展Id
}

//被进攻弹窗
message WalkFightPopupNotice {
    string allianceShortName = 1; //联盟简称
    int64 allianceId = 2; //联盟Id
    string name = 3; //玩家名称
    int64 playerId = 4; //玩家Id
    int32 areaNo = 5; //区服
    int32 x = 6; //坐标
    int32 y = 7; //坐标
}

//托管请求弹窗
message TrustRequestPopupNotice {
    string allianceShortName = 1; //联盟简称
    int64 allianceId = 2; //联盟Id
    string name = 3; //玩家名称
    int64 playerId = 4; //玩家Id
}

//驻扎成功弹窗
message StationPopupNotice {
    int32 areaNo = 5; //区服
    int32 x = 6; //坐标
    int32 y = 7; //坐标
}

//采集到资源弹窗
message FarmedResPopupNotice {
    int32 areaNo = 1; //区服
    int32 x = 2; //坐标
    int32 y = 3; //坐标
    int32 resId = 4;
    string res = 5;
    int64 groupId = 6;
}

//采集到地图buff弹窗
message FarmedMapBuffPopupNotice {
    int32 areaNo = 1; //区服
    int32 x = 2; //坐标
    int32 y = 3; //坐标
    int32 mapBuffId = 4;
    int64 groupId = 6;
}

//进入地图npc
message IntoMapNpcPopupNotice {
    int32 mapNpcId = 1; //配置Id
    int64 groupId = 2; //部队Id
    int32 areaNo = 5; //区服
    int32 x = 6; //坐标
    int32 y = 7; //坐标
}

//msgType = 3433
// 服务器 -> 客户端
// 集结目标通知
message MassTargetNotice {
    SimplePlayerInfo sendPlayer = 1; //发起集结这信息

    int32 targetType = 10; //集结目标
    int32 areaNo = 11; //集结区服
    int32 x = 12; //集结坐标
    int32 y = 13; //集结坐标

    MassTargetPlayer massTargetPlayer = 20;
    MassTargetBoss massTargetBoss = 21;
    MassTargetAllianceBoss massTargetAllianceBoss = 22;
    MassTargetAllianceBuild massTargetAllianceBuild = 23;
    MassTargetWonder massTargetWonder = 24;
    MassTargetCheckPoint massTargetCheckPoint = 25;
    MassTargetRes massTargetRes = 26;
    MassTargetStationGroup massTargetStationGroup = 27;
}

message MassTargetWonder {
    int32 wonderId = 1;
    int32 forceNum = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
}


message MassTargetPlayer {
    SimplePlayerInfo player = 1;
}

message MassTargetBoss {
    int32 bossId = 1;
    int64 nowHp = 2;
    int64 uniqueId = 3;
}

message MassTargetAllianceBoss {
    int32 bossId = 1;
    int64 nowHp = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
}

message MassTargetAllianceBuild {
    int32 allianceBuildId = 1;
    int32 forceNum = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
    int32 flagColor = 6;
    int32 flagStyle = 7;
    int32 flagEffect = 8;
    int64 nowDurability = 9;
    int64 buildNowSoliderNum = 10; // 当前的建造填兵进度
    int64 buildNeedSoliderNum = 11; // 需要的建造填兵总值
    int64 destroyNowSoloderNum = 12; // 当前的摧毁填兵进度
}

message MassTargetCheckPoint {
    int32 checkPointId = 1;
    int32 forceNum = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
}

message MassTargetRes {
    int32 resId = 1;
    int32 forceNum = 2;
    int64 allianceId = 3;
    string allianceName = 4;
    string allianceShortName = 5;
}

message MassTargetStationGroup {
    SimplePlayerInfo player = 1;
    int64 groupId = 7;
}

//msgType = 3434
// 服务器 -> 客户端
// 魔物刷新通知
message BossRefreshNotice {
    int32 bossId = 2;
    int32 areaNo = 3;
    int32 x = 4;
    int32 y = 5;
    int32 addOrDel = 6; //新增还是删除 1新增 2删除
}

//msgType = 3435
// 服务器 -> 客户端
// 愁人采集通知
message EnemyFarmNotice {
    int64 playerId = 1; //愁人Id
    int32 resId = 2;
    int64 groupId = 3;
    int32 addOrDel = 4; //新增还是删除 1新增 2删除
}

//msgType = 3436
// 服务器 -> 客户端
// 联盟据点数量变化
message AllianceBuildNumChange {
    int32 num = 1; // 造完的据点数量
}

// msgType = 3437
// 服务器 -> 客户端
// 周围小地图变化
message LandAroundChange {
    repeated NewEveryLandInfo lands = 1; //格子信息
    repeated CellPoint dels = 2; // 需要恢复成原始状态的地块坐标
}

// msgType = 3438
// 服务器 -> 客户端
// 联盟战有一方全部复活
message AllianceFightAllRevive {
    int64 allianceId = 1; // 全部复活的那个联盟的ID 有时候是我方 有时候是敌方 根据ID判断特效在哪播
}

// msgType = 3439
// 服务器 -> 客户端
// 城池着火情况
message AllianceBuildFireChange {
    AllianceBuildFireVo allianceBuildFireVo = 1;
}

message AllianceBuildFireVo {
    int64 buildId = 1;
    int32 fire = 2; // 是否在烧 0-否 1-是
    int32 x = 3;
    int32 y = 4;
}

// msgType = 3440
// 服务器 -> 客户端
// 联盟建筑被攻打
message AllianceBuildBeAtk {
    int64 buildId = 1;
    int32 buildType = 2;
    int32 x = 3;
    int32 y = 4;
}

// msgType = 3441
// 服务器 -> 客户端
// 被邀请英雄训练
message HeroTrainBeInviteChange {
    repeated HeroTrainInviteInfo inviteInfo = 1;
    int32 addOrDel = 2; //1、新增 2、删除
}

message HeroTrainInviteInfo {
    int64 playerId = 1; //邀请者的玩家Id
    int32 cardId = 2; //使用的训练卡配置Id
    int32 cardOverTime = 3; //消失时间
}

// msgType = 3442
// 服务器 -> 客户端
// 英雄训练信息变化
message HeroTrainChange {
    HeroTrainInfo trainInfo = 2;
}

// msgType = 3443
// 服务器 -> 客户端
// 我们帮进攻别人的旗帜能填兵
message AllianceFlagSoliderChange {
    AllianceFlagSoliderChangeVo allianceFlagSoliderChangeVo = 1;
}

message AllianceFlagSoliderChangeVo {
    int32 changeType = 1; // 1-新增 2-去除
    int32 x = 2;
    int32 y = 3;
}

// msgType = 3444
// 服务器 -> 客户端
// 联盟战状态切换
message AllianceSoloStateChange {
    int32 state = 1; // 状态 1 -准备阶段 2- 对抗阶段 3- 展示阶段 4-结束 删除数据
    int32 overTime = 2; // 到点时间
}

// msgType = 3445
// 服务器 -> 客户端
// 联盟战场内部发生变化
message AllianceSoloMainChange {
    int32 dealType = 1; // 触发类型  1-发起进攻 2-进攻结束 3-玩家复活 4-全盟复活 5-有人换阵
    AllianceSoloDefArmyPlan allianceSoloDefArmyPlan = 2; // 当事人数据
    AllianceSoloLog allianceSoloLog = 3; // 如果是类型2的话会带来一条日志
    string extend = 4; // 扩展字段 如果类型是4-全盟复活 这个字段表示复活的联盟ID
}

// msgType = 3446
// 服务器 -> 客户端
// 累充奖励变化
message TotalPayRewardChange {
    repeated TotalPayRewardInfo totalPayRewardInfo = 1;
}

message TotalPayRewardInfo {
    int32 protoId = 1;
    repeated int32 days = 2; // 已领取记录
    int32 startTime = 3; // 开放领取时间
}

// msgType = 3447
// 服务器 -> 客户端
// 托管请求变化
message TrustRequestChange {
    int32 needDecideNum = 1; //需要决定的数量
    int32 loseEffectNum = 2; //失效的数量
    int32 sendNum = 3; //发起的请求数量
}

// msgType = 3448
// 服务器 -> 客户端
// 天下大势结束推送
message WorldActivityChange {
    WorldActivityInfo2 worldActivity = 2; // 结束的天下大势
}

// msgType = 3449
// 服务器 -> 客户端
// 天下大势卡池结束
message WorldActivityLotteryFinish {
    int32 worldActivityId = 1; //天下大势Id
    int32 lotteryId = 2; //卡池Id
}

// msgType = 3450
// 服务器 -> 客户端
// 采集到资源的通知
message FarmedResNotice {
    int32 resId = 1; //资源点Id
    string res = 2; //资源
    int32 x = 3;
    int32 y = 4;
    int64 groupId = 5;
}

// msgType = 3451
// 服务器 -> 客户端
// 采集到buff的通知
message FarmedMapBuffNotice {
    int32 buffId = 1; //buffId
    int32 x = 3;
    int32 y = 4;
    int64 groupId = 5;
}

// msgType = 3452
// 服务器 -> 客户端
// 行军部队全军覆没通知
message WalkGroupWipeOutNotice {
    int64 groupId = 1;
    int32 x = 3;
    int32 y = 4;
    int64 playerId = 5;
    int64 allianceId = 6;
}

// msgType = 3453
// 服务器 -> 客户端
// 腾讯中控指令
message InstructionNotice {
    repeated Instruction instructions = 1;
}

message Instruction {
    int32 type = 1; // int	是		指令类型
    string title = 2; // 	string	否	32	标题
    string msg = 3; // 	string	否	1024	内容
    string url = 4; // 	string	否	1024	打开的网页地址
    int32 modal = 5; // 	int	否		1表示模态窗口，关闭则会退出登录；默认为0，允许关闭
    string data = 6; // 	string	否	1024	json格式
    int32 ratio = 7; // 	double	否		变化比例，只有type=5或6时才有效  ~~~ PS 原数据是double 这边传入的时候服务端 * 100了
    string ruleName = 8; // 	string	是	64	命中的规则名称,仅透传，用于执行上报接口
}

// msgType = 3454
// 服务器 -> 客户端
// 连杀通知
message KillForceNotice {
    SimplePlayerInfo atkPlayer = 1;
    SimplePlayerInfo defPlayer = 2;
    int64 atkGroupId = 3;
    int64 defGroupId = 4;
    int32 x = 5;
    int32 y = 6;
    int32 killNum = 7; //连杀次数
}

// msgType = 3455
// 服务器 -> 客户端
// 部队标签通知
message ForceExpressionNotice {
    int64 groupId = 1;
    int32 expressionId = 2;
    int32 x = 3;
    int32 y = 4;
}

// msgType = 3460
// 服务器 -> 客户端
// 地块变化推送
message LandChangeNotice {
    int32 showLv = 1;
    repeated NewEveryLandInfo lands = 2;
    repeated RemovePos removePos = 3;
}

message RemovePos {

    int32 gridX = 1;
    int32 gridY = 2;
    repeated IntToIntKV removeXys = 3;
}

// msgType = 3461
// 服务器 -> 客户端
// 联盟建筑变化推送
message AllianceBuildChangeNotice {
    int32 addOrDel = 1; //1、新增 2、删除
    repeated AllianceBuildMapInfo allianceFortressInfos = 300; //联盟据点位置信息
    repeated AllianceBuildMapInfo allianceFlagInfos = 301; //联盟旗帜位置信息
    repeated AllianceSystemBuildInfo allianceWonderInfos = 302; //联盟占领的奇观
    repeated AllianceSystemBuildInfo allianceResInfos = 303; //联盟占领的资源矿
    repeated AllianceSystemBuildInfo allianceCheckPointInfos = 304; //联盟占领的关卡
}

// msgType = 3462
// 服务器 -> 客户端
//联盟标记变化通知
message AlliMarkNotice {
    int32 showType = 1; // 1-新增  2-删除
    repeated AllianceMarkEnum allianceMark = 2;
}

// msgType = 3463
// 服务器 -> 客户端
// 盟友位置变化通知
message AllianceMemberPosChangeChangeNotice {
    int32 showType = 1; // 1-新增  2-删除
    repeated AllianceMemberPos pos = 2;
}

//msgType = 3464
// 服务器 -> 客户端
// 联盟建筑消失
message AllianceBuildDisappear {
    int32 buildType = 1;
}

// msgType = 3470
// 服务器 -> 客户端
// 预警变化主推
message WarnDataChangeNotice {
    repeated LongToIntKV warnDatas = 1;
}

// msgType = 3471
// 服务器 -> 客户端
// 攻击通知
message AtkNotice {
    int32 startX = 1;
    int32 startY = 2;
    int32 gotoX = 3;
    int32 gotoY = 4;
    int64 groupId = 5; // 行军组Id
    int32 robotId = 20; //机器人Id
    int64 playerId = 21;
    string playerName = 22;
    int64 allianceId = 31;
    string allianceShortName = 32;
    int64 massId = 34;
    int32 runType = 35;
    SkinInfo skinInfo = 37; // 行军形象

    int64 fightTime = 40;
    int32 fightResult = 41;

    int64 targetGroupId = 100;
    int64 targetPlayerId = 101;
    int64 targetMassId = 102;
    int32 targetRunType = 103;
    int64 targetAllianceId = 111;

    repeated int32 heroIds = 121; //部队英雄Id列表
    repeated IntToLongKV soldiers = 122; //兵信息
    int32 extendId = 123;
}

// msgType = 3472
// 服务器 -> 客户端
// 头像改变通知
message PhotoChange {
    repeated PhotoInfo photo = 1;
    string pictureUrl = 2;
}

// msgType = 3473
// 服务器 -> 客户端
// 预警速度变化主推
message WarnSpeedDataChangeNotice {
    repeated LongToIntKV warnDatas = 1;
}

// msgType = 3474
// 服务器 -> 客户端
// 头像框信息变化推送
message PhotoFrameChangeNotice {
    repeated PhotoInfo photoFrames = 1;
    string pictureUrl = 2;
}

// msgType = 3475
// 服务器 -> 客户端
// 召唤的巢穴变化推送
message CallRelicChangeNotice {
    repeated CallRelicData callRelicPos = 1; // 巢穴位置
}

message CallRelicData {
    int32 relicId = 1;
    int32 x = 2;
    int32 y = 3;
    int32 type = 4; //1 贞德 2七日
}

// msgType = 3476
// 服务器 -> 客户端
// 迷雾全部全开通知
message MaxKillBossLvNotice {
    int32 killBossLv = 1;
}

// msgType = 3477
// 服务器 -> 客户端
// 联盟顶部信息通知
message AllianceTopInfoNotice {
    AllianceTopInfo allianceTopInfo = 243; // 联盟推荐展示
}

// msgType = 3478
// 服务器 -> 客户端
// 陆军活动变更通知
message ArmyActivityChangeNotice {
    int32 tickets = 1; // 是否拥有门票 0否1是
    string openPlayerName = 2; // 操作者名字
    int32 chooseLvTime = 3; // 平判之战活动开始时间戳
}

// msgType = 3479
// 服务器 -> 客户端
// 多个通知lan
message MoreNoticeLanMsg {
    repeated NoticeLanMsg noticeLanMsgs = 1;
}

// msgType = 3480
// 服务器 -> 客户端
// 探索值信息变化
message ExploreValueChangeNotice {
    ExploreValueInfo exploreValueInfo = 1;
}

message ExploreValueInfo {
    int32 nowNum = 1;
    int32 limitNum = 2;
    int32 balanceTime = 3;
}

// msgType = 3481
// 服务器 -> 客户端
// 军队活动获胜通知
message ArmyActivityWinNotice {
    int32 result = 1; // 活动结果
    int32 chooseLv = 3; // 平判之战选择难度
}

// msgType = 3482
// 服务器 -> 客户端
// 世界奇观变更通知
message WorldWonderChangeNotice {
    int32 changeType = 1; //  变化类型  1-进入争夺 2-守军被击杀 3-占领成功 4-进入预告(下面的字段通通没有赋值 客户端要做的就是把进游戏时候给的字段worldWonderCount自增1)
    repeated IntToIntKV openTime = 2; // 类型1用的 key:奇观ID value:开启的"时"
    repeated string params = 3; // 类型2.3用的 是显示的弹窗里的具体参数
    WorldWonderInfo worldWonderInfos = 4; // 类型2.3用的 刷新发生变化的奇观的当前最新数据
}

// msgType = 3483
// 服务器 -> 客户端
// 发送 Tss Sdk 数据通知
message SendTssSdkDataNotice {
    bytes antiData = 1;
}

// msgType = 3484
// 服务器 -> 客户端
// 地图npc被探索推送通知
message MapNpcExploredNotice {
    IntToIntKV pos = 1;
}

// msgType = 3485
// 服务器 -> 客户端
// 世界boss被击杀推送通知
message WorldBossKilledNotice {
    int32 balanceEndTime = 1; // 结算的结束时间
}

// msgType = 3486
// 服务器 -> 客户端
// 联盟总动员任务刷新通知
message AllianceCmpttTaskChgNotice {
    NoticeType type = 1;
    int64 alliaceScore = 2;

    enum NoticeType {
        Task = 0;
        Score = 1;
    }
}

// msgType = 3487
// 服务器 -> 客户端
// 拾取资源发生天降鸿运
message PickUpResPointTakeMultiNotice {
    int32 resPointId = 1;
}

// msgType = 3488
// 服务器 -> 客户端
// 可领取npc条件奖励索引变化通知
message MapNpcConditionIndexChangeNotice {
    repeated IntToIntKV mapNpcConditionIndex = 1; //npc可领奖的条件奖励
}

// msgType = 3489
// 服务器 -> 客户端
// 清除玩家聊天记录
message CleanPlayerChatRecordsNotice {
    int64 cleanPlayerId = 1;
}

// msgType = 3490
// 服务器 -> 客户端
// 玩家封禁提示消息
message BanInfoNotice {
    int32 banEndTime = 1; // 封禁结束时间(秒)
    string banReason = 2; // 封禁理由
    int32 kickOffline = 3; // 踢下线 0 否 1 是
}

// msgType = 3491
// 服务器 -> 客户端
// 日月王城状态变化
message CapitalBattleStateChange {
    int32 state = 1;
    int32 stateChangeTime = 2; // 切换状态时间
    int32 capitalBattleSetKingOverTime = 3; // 国王设置结束时间
    int32 capitalBattleStateStartTime = 4; // 状态进入时间
}

// msgType = 3492
// 服务器 -> 客户端
// 日月王城官员职位变化
message CapitalBattleOfficer {
    int32 officer = 1; // 新职位 0表示被卸任
}

// msgType = 3493
// 服务器 -> 客户端
// 日月王城主人发生变化
message CapitalBattleBelongChange {
    int32 occType = 1; // 1 临时占领 2 完全占领 3 炮台占领
    string allianceShortName = 2;
    string name = 3;
    int32 protoId = 4; // 当前只有类型3 炮台占领的时候才会发来炮台的模板ID
}

// msgType = 3494
// 服务器 -> 客户端
// 日月王城被炮击
message CapitalBattleBeCannonAtk {
    int32 cannonProtoId = 1; // 攻击的炮塔ID
}

// msgType = 3495
// 服务器 -> 客户端
// 加入联盟被拒绝
message JoinNoSuccessTellNotice {
    int64 allianceId = 1;
    string shortName = 2;
}

// msgType = 3496
// 服务器 -> 客户端
// 米大师余额变化
message MidasMoneyChange {
    int64 money = 1;
}

// msgType = 3497
// 服务器 -> 客户端
// 精英魔物标记变化
message WorldMonsterLvNotice {
    int32 worldMonsterLv = 1;
}

// msgType = 3498
// 服务器 -> 客户端
// 当天获取到的资源变化推送
message GetResChangeNotice {
    GetResInfo getResInfo = 1;
}

message GetResInfo {
    repeated IntToLongKV farmGetRes = 1;
    repeated IntToLongKV plunderGetRes = 2;
    int32 nextRefGetResTime = 3;
}

// msgType = 3499
// 服务器 -> 客户端
// 米大师的开关发生状态
message MidasFlagChange {
    int32 midasFlag = 1;
}

// msgTyoe = 3500
// 服务器 -> 客户端
// 功能封禁
message FunctionBanChangeNotice {
    FunctionBanData functionBanData = 1;
}

// msgTyoe = 3501
// 服务器 -> 客户端
// 屏蔽字检测结果
message CheckTextResultNotice {
    int32 rt = 1;
    int32 checkType = 2; // 场景类型
    string checkValue = 3; // 检测内容
    int64 ticket = 4; // 唯一ID票据
}

// msgType = 3502
// 服务器 -> 客户端
// 屏蔽字检测结果
message LordSkinChange {
    PlayerLordSkinInfo playerLordSkinInfo = 1; //玩家皮肤
}

message LordSkinInfo {
    int32 LordSkinId = 1; // 拥有的皮肤id
    int32 finishTime = 2; //过期时间
}
message PlayerLordSkinInfo {
    int32 currentLordSkinId = 1; //当前穿戴皮肤
    repeated LordSkinInfo LordSkinInfos = 2; // 拥有的皮肤
}

// msgType = 3503
// 服务器 -> 客户端
// 宝藏自动刷新时间变化
message TreasureAutoRefTimeChange {
    int32 autoRefTime = 1; // 自动刷新倒计时
}

// msgType = 3504
// 服务器 -> 客户端
// 宝藏被人帮助
message TreasureChange {
    TreasurePb treasures = 1; // 宝藏数据
}

// msgType = 3505
// 服务器 -> 客户端
// 新邮件通知
message NewMailNotice {
    repeated NewMailInfo newMailInfos = 1;
}

message NewMailInfo {
    int32 mailTabType = 1;
    int64 mailId = 2;
}

// msgType = 3506
// 服务器 -> 客户端
// 新模块开启
message UiconditionOpenNotice {
    repeated UiconditionOpenPb uiconditionOpenPbs = 1;
}

// msgType = 3507
// 服务器 -> 客户端
// 世界聊天返回
message WorldChatRespNotice {
    int32 rt = 1;
}

// msgType = 3508
// 服务器 -> 客户端
// 竞技场开启信息
message JjcOpenInfoNotice {
    int32 times = 1; //竞技场剩余战斗次数
    int32 lastJjcCountTime = 2; //上次竞技场令牌回复时间
}

// msgType = 3509
// 服务器 -> 客户端
// 召唤的七日boss变化推送
message CallFestivalBossChangeNotice {
    repeated CallFestivalBossData callFestivalBossData = 1; // 七日活动boss
}

message CallFestivalBossData {
    int32 protoId = 1;
    int32 x = 2;
    int32 y = 3;
}

// msgType = 3510
// 服务器 -> 客户端
// 召唤的七日犒赏令奖励和积分变动
message FestivalRewardChangeNotice {
    int32 score = 1; //积分
    repeated FestivalRewardData festivalRewardData = 2; //奖励
    repeated int32 stage = 3; //已经购买的礼包
}

message FestivalRewardData {
    int32 stage = 1; // 1：普通 2：高阶 3：特殊
    repeated int32 lv = 2; //已经获取的奖励等级
}

// msgType = 3511
// 服务器 -> 客户端
// 七日boss玩家可攻击次数
message FestivalBossAtkNumChangeNotice {
    int32 num = 1; //可攻击次数
}

// msgType = 3512
// 服务器 -> 客户端
// 演武已攻击次数变化通知
message YanwuAttackNumChangeNotice {
    int32 yanwuAttackNum = 1; // 演武攻击次数
}

// msgType = 3513
// 服务器 -> 客户端
// 虚拟地图刷新(只有自己可以看到)
message VirtualMapItemNotice {
    repeated VirtualMapItem add = 1; // 新增
    repeated VirtualMapItem del = 2; // 删除, 删除的时候只有坐标
}

// msgType = 3514
// 服务器 -> 客户端
// 联盟召集
message AllianceCallNotice {
    AllianceCallInfo callVo = 1;
}

// msgType = 3515
// 服务器 -> 客户端
// 离开联盟CD变化
message LeaveAllianceCdNotice {
    int32 leaveAllianceCount = 1; // 玩家离帮次数
    int32 nextJoinAllianceTime = 2; // 下次可加入联盟时间
}

// msgType = 3516
// 服务器 -> 客户端
// npc城池首次被占领通知
message NpcCityOccupyNotice {
    int32 npcCityId = 1; // npc城池id
    int32 x = 2;
    int32 y = 3;
    int64 allianceId = 4;
    string allianceName = 5;
    string allianceShortName = 6;
    SimplePlayerInfo killFirstRankPlayer = 7;
    SimplePlayerInfo tearDownFirstRankPlayer = 8;
}

// msgType = 3517
// 服务器 -> 客户端
// npc城池占领变化通知
message NpcCityOccupyChangeNotice {
    int32 npcCityId = 1; // npc城池id
    int64 allianceId = 2; // 归属的联盟
}

// 红包
message RedEnvelope {
    int32 from = 1; // 来源
    int32 overTime = 2; // 触发的时间
}

// msgType = 3518
// 服务器 -> 客户端
// 平台红包
message RedEnvelopeNotice {
    repeated RedEnvelope envelope = 1;
}

// msgType = 3519
// 服务器 -> 客户端
// 平台福袋--增量
message BlessingBagNotice {
    repeated BlessingBagInfo blessingBag = 1;
    BlessingBagWrapper bagInfo = 2;
}

// msgType = 3530
// 服务器 -> 客户端
// 盟主征程资格变更
message AllianceJourneyChangeNotice {
    int64 allianceJourneyOpen = 1; // 是否开启,0否，非0开
}

// msgType = 3533
// 服务器 -> 客户端
// 掠夺上限信息通知
message PlunderLimitInfoChangeNotice {
    PlunderLimitInfo plunderLimitInfo = 304; // 掠夺上限信息
}

// msgType = 3534
// 服务器 -> 客户端
// 客户端更新通知
message ClientUpdateNotice {
    string clientResVersion = 1;
    string minVersion = 2;
}

// msgType = 3537
// 服务器 -> 客户端
// 战场联盟积分信息变化
message BattleFieldAllianceScoreInfoChange {
    BattleFieldAllianceScoreInfo scoreInfo = 1; // 联盟积分信息
}

// msgType = 3538
// 服务器 -> 客户端
// 战场联盟建筑信息变化
message BattleFieldBuildingInfoChange {
    BattleFieldWonderInfo wonderInfo = 1;
    BattleFieldCannonInfo cannonInfo = 2;
    BattleFieldCityInfo cityInfo = 3;
}

// msgType = 3539
// 服务器 -> 客户端
// 战场结束推送
message BattleFieldEndNotice {
    repeated BattleFieldBalanceInfo balanceInfo = 1;
    BattleFieldPlayerScoreRankInfo mvpPlayerRankInfo = 11; // mvp玩家信息
    BattleFieldPlayerScoreRankInfo myPlayerRankInfo = 12; // 我的信息
}

// 战场结算信息
message BattleFieldBalanceInfo {
    BattleFieldAllianceScoreInfo scoreInfo = 1; // 联盟积分信息
    int64 occupyTime = 2;   // 总占领时间
    int32 fireCount = 3;    // 导弹发射次数
}

// msgType = 3540
// 服务器 -> 客户端
// 战场结束回到世界推送
message BattleFieldBackWorldNotice {
    repeated AllianceMarkEnum allianceMarks = 98; //联盟标记
    PlayerPowerChangeVo playerPowerChangeVo = 99; // 实力信息
    CityInfo cityInfo = 100; //城池信息
    repeated EffectInfo effects = 161;
    repeated RedPointInfo worldRedPointInfos = 164; //红点信息
    repeated BuffVo buffs = 171; // 玩家的buff集合
    repeated BuildingView worldBuildingViews = 172; //世界服建筑视图状态
    repeated WalkGroup myWalks = 180; //自己的所有行军线路
    repeated IntToLongKV slgSoldier = 237; // 兵营中当前兵量, key为soldierID
    BarracksWoundedSoldierInfo barracksWoundedSoldierInfo = 238; // 伤兵信息
    repeated LongToIntKV warnDatas = 240; //预警数据 行军组Id-runType
    AllianceCallInfo allianceCallInfo = 301;    // 联盟召集
}

// msgType = 3541
// 服务器->客户端
// 战场充能buff变更
message BattleFieldChargeBuffChange {
    repeated ChargeBuffInfo chargeBuff = 1;
}

// msgType = 3542
// 服务器->客户端
// 城池技能释放
message BattleFieldCitySkillUseNotice {
    int32 cityId = 1;
    int32 targetCityId = 2;
    int32 targetCannonId = 3;
    int32 targetWonderId = 4;
}

// msgType = 3543
// 服务器->客户端
// 联盟BOSS斗兽场boss开启推送
message AllianceColosseumNotice {
    AllianceColosseumInfo bossInfo = 2;
}

// msgType = 3550
// 服务器->客户端
// 联盟防御炮塔攻击
message AllianceDefCannonAttackNotice {
    int64 atkBuildId = 1;
    int32 atkX = 2;
    int32 atkY = 3;
    int64 defBuildId = 11;
    int32 defX = 12;
    int32 defY = 13;
}

// msgType = 3560
// 服务器->客户端
// 偷菜活动经验变化
message CabbageActivityExpChange {
    int32 lv = 1;
    int64 exp = 2;
}

// msgType = 3561
// 服务器->客户端
// 内城恐龙变化
message DinosaurNotice {
    Change chg = 1;
    map<int32, DinosaurVO> dinosaurVO = 2;

    enum Change {
        ADD = 0;    // 新增
        DEL = 1;    // 删除
        CHG = 2;    // 变更
    }
}

// msgType = 3562
// 服务器->客户端
// 内城恐龙答题任务变化
message DinosaurMissionNotice {
    int32 nextRefreshTime = 2;
    repeated DinosaurMissionVO missionInfo = 3;
}

// msgType = 3563
// 服务器->客户端
// 联盟报名城池变化
message NeutralCityRegisterNotice {
    int32 optType = 1;
    int32 npcCityProtoId = 2;
    NeutralCityQueryRt.NeutralCityRegisterInfo cityInfo = 3;
}

// msgType = 3564
// 服务器->客户端
// 问卷变化
message QuestionnaireChangeNotice {
  repeated QuestionnaireData QDatas = 1; //问卷变化数据
}

message QuestionnaireData {
  Opt optType = 1;  //操作类型
  QuestionnaireCfg questionnaire = 2;
  enum Opt {
    UP = 0;     // 发布
    DEL = 1;    // 删除
  }
}

// msgType = 3565
// 服务器->客户端
// 恐龙狂潮一些变更
message ArmyActivityRobotChangeNotice {
    int32 type = 1;
    int32 failNum = 2;
}


// msgType = 3566
// 服务器->客户端
// 联盟福利支援礼包购买次数变化
message BuyAllianceGiftSupportBoxBuyTimeChange {
    int32 giftId = 1;//支援礼包id
    int32 buyTimes = 2;//购买次数
}

message FossilHunterData {
  int32 group = 1;              //层级
  int32 grandPrize = 2;         //大奖状态
  repeated int32 boxState = 3;  //箱子状态
}

// msgType = 3567
// 客户端->服务器
// 获取化石猎人活动
message GetFossilHunterData {
  int32 actId = 1;
}

message GetFossilHunterDataRt {
  int32 actId = 1;
  repeated FossilHunterData fossilHunterData = 2; //
}

// msgType = 3568
// 客户端->服务器
// 领取化石猎人奖励
message ReceiveFossilHunterReward {
  int32 actId = 1;
  int32 id = 2;
  int32 type = 3;   // 1箱子 2大奖
}

message ReceiveFossilHunterRewardRt {
  int32 actId = 1;
  int32 id = 2;
  int32 type = 3; // 1箱子 2大奖
  int32 state = 4;
}

// msgType = 3569
// 客户端->服务器
// 领取化石猎人奖励
message FossilHunterUnlockGroup {
  int32 actId = 1;
  int32 group = 2;
}

message FossilHunterUnlockGroupRt {
  int32 actId = 1;
  int32 group = 2;
}







